Why invest in intellectual production techniques?
2018-10-05
[https://gyazo.com/4065834a7837554cd9c0bbf34ff9b140]
	Column on page 2, which is an introduction to [the engineer's intellectual production techniques
	Published in Den-Nou-Kaigi vol.190 ([PDF http://image.gihyo.co.jp/assets/pdf/dennou/2018/d_190.pdf]) by Gijutsu-Hyohron Co.
	[The first BMOT Special Class "Intellectual Production" was released in this way!


I'll reprint the text later.

Manuscript under -----
[* Before Intellectual Productivity...]
I published the book "Intellectual Production for Engineers" on August 10, 2018. This book is a compilation and condensation of all the knowledge I have learned about intellectual production into one book. In this column, I will explain why I am interested in intellectual production and why I have invested time and money in acquiring knowledge of intellectual production techniques. But before we think about intellectual production, which is hard to imagine, let's first think about the production of physical objects.

[* Sock productivity increased by machine].
As a concrete example, consider the production of socks. In the past, socks were knitted by hand by craftsmen, and the sock knitting machine was invented in 1589. At the time, it was thought that hand-knitting produced better socks, but by 1812, more than 30,000 sock knitting machines were in use in all of Europe.
Why were so many sock knitting machines made? It was because sock knitting machines were more productive. Even if the quality was a little lower than hand-knitted socks, they could make more socks in the same amount of time. In terms of the value they could offer their customers and the sales they could get from their customers, the machines were more advantageous.
[https://gyazo.com/ac444aff9aff3903af45c3f3b552cc1d]

[* Programming productivity increased by language].
Next, let us consider programming as a type of intellectual production. What do you imagine when you hear the term "automated programming"? Is it a technology that will be created in the future through the evolution of artificial intelligence?

- The concept of automatic programming is much older. For example, a manual for the programming language FORTRAN published in 1956 was titled "The Fortran Automatic Coding System for the IBM 704.
+ The concept of automatic programming is much older. For example, the programming language FORTRAN, which originated in the 1950s, was then called the Automatic Coding System. (new paragraph)

- The name FORTRAN is a contraction of the formula translation system (FORmula TRANslation system). People at the time considered this to be automatic programming, whereby all you had to do was write a formula such as `C = A * B` and the computer would automatically generate a program written in machine language that would "load the appropriate value in memory into a register, perform the multiplication, and write the result of the calculation in the register back into memory. This was what people thought of as automatic programming at the time.
+ FORTRAN is a formula translation system (FORmula TRANslation system). By simply writing a mathematical expression such as `C = A * B`, the computer automatically generates a program written in machine language that "loads the appropriate value in memory into a register, multiplies it, and then writes the result of the calculation in the register back into memory". This was considered by people at the time to be automatic programming.


In this era, it was believed that efficient programs could only be created by humans writing machine language. In fact, the machine language programs output by early FORTRAN were less efficient than those written by skilled humans.

- Sixty years later, most programmers now write programs using programming languages. Why is that? Because it is more productive to use a programming language.
+ 60 years later, most programmers today write programs using programming languages. Why is that? Because it is more productive to use a programming language. It's the same composition as sock production.
[https://gyazo.com/414da3e943997a0d3bd811b55d1e8781]

[* Profits are invested in equipment].
Suppose you are the owner of a sock factory. If you make and sell a lot of socks and make a lot of profit, what do you invest the profit in? If the demand for socks is high and the more socks you make, the more you sell, you will probably buy more sock knitting machines and try to make more socks. This is a strategy called "extended reproduction.

- So what about intellectual production? Do we buy programming languages? The majority of programming languages are now free. To acquire a new means of productivity, one must pay not only money, but also time to learn. In the case of the sock knitting machine, the worker learned how to operate it after buying the equipment. The cost of the equipment was greater than the cost of the time it took the workers to learn it, so it was not noticeable. Conversely, in intellectual production, the cost of the time spent to learn is greater than the cost of the device, the programming language.
+ So what about programming? You are investing in a programming language. But thinking of it as "buying a programming language" is a bit odd. It is because you are overlooking the other costs besides money. To acquire a new productivity tool, you need to pay not only for money, but also for time. In the case of the sock knitting machine, you not only buy the equipment, you learn how to operate it. The amount of money for the equipment is so large that the time cost of learning it is just not noticeable. Conversely, in programming, the cost of the time spent to learn is greater than the monetary cost of the equipment, the programming language and computer.

[* Knowledge is attributed to you].
Let me summarize once and for all what we have said so far. Productivity requires both paying for things and spending time to acquire the knowledge to use those things. And when it comes to intellectual production, the cost of time is often greater. In software development, "freelance" work is possible because the cost of capital investment in the intellectual production of developing software is about what an individual can pay.

- There is an important difference when comparing this "thing" to "knowledge". Knowledge belongs to the individual and cannot be pulled off. For example, the laptop your company bought for you belongs to them and you must leave it with them when you change jobs. But the knowledge in your brain belongs to you and you can take it with you. The company may ask you to create handover materials, but even in that case, the knowledge in your brain is the original and the handover materials are a degraded copy of it. Your memory does not disappear just because you have given the materials to the company.

+ There is an important difference when comparing this "thing" to "knowledge". As an example of a thing, the computer you bought for your company belongs to the company and needs to be left with them when you move on. But the knowledge in your brain belongs to you and cannot be ripped out. You can take your knowledge with you when you change jobs. When you leave the handover documents with the company, the knowledge in your brain is the original, and the handover documents are a degraded copy. Your memory does not disappear just because you give the material to the company.

[https://gyazo.com/e67ee38e5a111e08675535b1b5e636ea]

[* Knowledge is not lost by using it.]

- Money disappears when you spend it, but knowledge does not disappear when you spend it. In other words, acquiring knowledge is like getting a "magic credit card" that does not diminish when you spend it. This is a good deal. With this in mind, I learned many things. Then one day, I realized, "By learning a programming language, I can learn how to program. If you abstract "learning a programming language makes you more productive in programming" to a more abstract level, it becomes "gaining knowledge makes you more productive in X." This is the same as "gaining knowledge makes you more productive in X". Substitute "gaining knowledge" for this X and you get more.
+ Money disappears when you spend it, but knowledge does not disappear when you spend it. Gaining knowledge is like getting a "magic credit card" that does not diminish when you spend it. This is a good deal. That's what I thought, and that's what I learned. Then one day, I realized, "By learning a programming language, I can learn how to program. If you abstract "learning a programming language makes you more productive in programming" to a more abstract level, it becomes "gaining knowledge makes you more productive in X." This is the same as "gaining knowledge makes you more productive in X". Substitute "gaining knowledge" for this X and you get more.


In other words, we want knowledge that improves the efficiency of knowledge acquisition. Therefore, we first decided to observe what is done when acquiring knowledge of a programming language. The results are summarized in a Web+DB Press feature article titled "How Engineers Learn.
[https://gyazo.com/cef7b727561e4a5209893f6974e19102]
http://gihyo.jp/lifestyle/feature/01/engineer-studying

[* From Knowledge Acquisition to Intellectual Production]
- Knowledge acquisition focuses on input. However, when considering the specific example of programming, the situation of acquiring knowledge of a programming language but not writing a program is a bit strange. To generalize, output is the main focus, and knowledge is input to make that output more efficient.
+ The term "knowledge acquisition" focuses on input. However, if we consider the specific example of programming, it is strange to have a situation where you gain knowledge of a programming language but do not write programs. You acquire programming knowledge in order to write programs. To generalize, the output is the main focus, and the knowledge is input to make the output more efficient.


Thus, from the story of input in "How Engineers Learn," "The Engineer's Art of Intellectual Production," in which input is used for output, was born. Chapter 1 is the equivalent of "How Engineers Learn," and Chapter 2 is the management of motivation. These two explain how to learn in cycles and the driving force to keep the cycle going; Chapter 3 is about memory and Chapter 4 is about reading, and these two are methods of input. Chapter 5 is how to organize your thoughts and Chapter 6 is how to come up with ideas. This is output. I will explain the process of crystallizing ideas from a vast amount of input and then bringing them to fruition. chapter 6 up to chapter 6 explains "how to learn (how)," but I believe that what is more important than how, so I will explain the strategy of how to decide what to learn in chapter 7.

#Engineer's Intellectual Production_Additions
