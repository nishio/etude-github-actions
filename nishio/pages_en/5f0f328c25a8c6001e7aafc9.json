arc019_2
[B - Name of the particulars https://atcoder.jp/contests/arc019/tasks/arc019_2]
	The question is to count up how many patterns are rewritten one character and not [palindrome].
	Check first if it matches the corresponding character.
	　For odd-numbered non-centers
	　　If there's one discrepancy, and that's the letter that's out of alignment, when it's rewritten and it's the same letter, it becomes a palindrome.
	　　No other pattern is palindromic.
	　For odd-numbered centers
	　　If there is zero displacement, no matter what you do, it's a palindrome.
	　　If it's non-zero, it's not a palindrome no matter what you do.
	count up without making a mistake
	　I make a lot of mistakes, so it's important to have a system that makes it easy to run tests.
	　Examples of Mistakes
	　　Displacement of one subscript access `S[-i]` → `S[-1-i]`.
	　　The == and ! == mistakes
	　　I reversed then and else.
	　　I was mixing up %2 and &1 and making it &2.
	　How could I have made so many mistakes?
code:python
 def solve(S):
     ret = 0
     N = len(S)
     if N == 1:
         return 0
     xs = [S[i] != S[-1-i] for i in range(N // 2)]
     sums = sum(xs)
     for x in xs:
         if x:
             if sums == 1:
                 ret += 24 * 2
             else:
                 ret += 25 * 2
         else:
             ret += 25 * 2
     if N & 1:
         if sums != 0:
             ret += 25
     return ret

https://atcoder.jp/contests/arc019/submissions/15263014
