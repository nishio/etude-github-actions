Hatena2008-02-04
code:hatena
 <body>
 *1202087510* Once a snowman or something
 f:id:nishiohirokazu:20080204101144j:image
 
 *1202102943*About the mustache
 Three quotes from Dan's blog.
 
 http://blog.livedoor.jp/dankogai/archives/50989822.html
 >>
 d:higepon is a typical example. d:higepon learned OS creation at 2ch, and learned scheme at Hatena Diary. .... What did he learn at Hatena?
 <<
 
 http://blog.livedoor.jp/dankogai/archives/50996823.html
 >>
 Sorry to take the piss, but from a typical Lisper's point of view, the "intelligence" of the former id:higepon and the current id:amachang is not very high.
 <<
 
 http://blog.livedoor.jp/dankogai/archives/50481193.html
 >>
 Certainly, a "seryoku no amattelu guy" is a nuisance to neighbors in any society, not just in blogging.
 <<
 
 Stop it already! higepon's mustache is long gone!
 
 -----
 I received a radio wave saying "Mr. Dan thinks higepon is going to be a bearded character," so I couldn't help but write about it. I am sorry.
 
 *1202104617* The most tame "beginner language" is Python!
 
 PS: This was a story, but it seems to have an unexpectedly high page rank and people who search for "beginner Python" come here.
 If you are really new to Python, you should read the article below.
 - <a href="http://www.python.jp/Zope/intro">Introduction to Python</a>
 - <a href="http://www.python.jp/Zope/intro/instant_hacking_jp">Instant Hacking</a>
 - <a href="http://www.python.jp/doc/release/tut/">Python Tutorial</a>
 
 -----
 
 -The most informative "beginner's language" is JavaScript.
 --http://d.hatena.ne.jp/amachang/20080204/1202096633
 
 You can make closures in Python, too! > <
 
 >|javascript|
 // JS
 function make_counter(){
     var x = 0;
     return function counter(){
         x++;
         console.log(x);
         return counter;
     }
 }
 
 make_counter()()()()
 ||<
 
 >|python|
 # Python
 def make_counter():
     def counter():
         counter.x += 1
         print counter.x
         return counter
     counter.x = 0
     return counter
 
 make_counter()()()()
 ||<
 
 Voila! They look exactly alike! (><)
 
 >|python|
 class make_counter():
     def __init__(counter):
         counter.x = 0
 
     def __call__(counter):
         counter.x += 1
         print counter.x
         return counter
 ||<
 
 It's just a little def became class and the initialization process went into __init__!
 
 >|pytnon|
 class Counter(object):
     def __init__(self):
         self.count = 0
 
     def __call__(self):
         self.count += 1
         print self.count,
         return self
 
     def reset(self):
         self.count = 0
         print "[reset]",
         return self
 ||<
 
 >||
 >>> Counter()()()().reset()()()()
 1 2 3 [reset] 1 2 3
 <__main__.Counter object at 0x0149C7B0>
 ||<
 
 I can easily add a reset button!
 The most tame "beginner language" is Python!
 You'll get in the habit of using indentation! (><)
 
 -----
 
 When amachang asked me if Python could be used for closure, I was surprised to find that I had written an article in a fit of anger. I was surprised that the article I wrote in a fit of anger after being asked by amachang, "Can Python use closures?
 I wish someone would seriously write a good Python article.
 
 Link link to past articles as I don't feel like writing seriously myself.
 - <a href="http://d.hatena.ne.jp/nishiohirokazu/20071227/1198746597">Get Values from Wii Remote Control with IronPython</a>
 - <a href="http://www.nishiohirokazu.org/archived_coreblog/605">Fractals in Python (Julia set)</a>
 - <a href="http://d.hatena.ne.jp/nishiohirokazu/20071203/1196670766">IRC bots can be made in Python</a>.
 - <a href="http://www.nishiohirokazu.org/archived_coreblog/962">Spectrum Analysis in Python</a>
 - <a href="http://labs.cybozu.co.jp/blog/nishio/2007/04/pythonpdf.html">A short sample of creating Japanese PDFs in Python</a>.
 
 <a href="http://ja.doukaku.org/">How to write org</a> is also made in Python.
 
 *1202117411* The most tame "beginner language" is Unlambda!
 It's like someone saying <a href="http://d.hatena.ne.jp/nishiohirokazu/20080204/1202104617">The most informative "beginner language" is Python!</a> But that's impossible! If you print out the library reference, it's like 100 pages long! How can a beginner learn something like that?
 
 All Beginners! The language to learn is Unlambda!
 
 Unlambda is great!
 - It's not full of parentheses like Scheme!
 - It doesn't force indentation like Python!
 - They don't tell you to "create a class first" like Java.
 - There's no operator! Don't worry about the order of evaluation!
 - You only have to remember a few things! There are probably only 8 or 9 functions you need to remember!
 - You don't have to remember all the different syntaxes like if, for, break, continue, next, last, end, begin, and progn! There is only one syntax, "apply function"!
 - Variables don't have a $ attached to them like in Perl! Or rather, variables don't exist in the first place!
 - It's Turing-complete, unlike languages like HQ9+ that can't do much! Roughly speaking, it can calculate anything! Even Fibonacci can be calculated!
 - You don't have to worry about int, long, unsigned, and all that stuff like in C! There's no such thing as an integer type!
 - It's not a vulgar name like Brainf*ck! I'm not an enemy of that kind of language, which I don't even know which fishbone it is!
 - You don't have to worry about vulnerabilities that could be created if someone else runs your software with strange options, like PHP! There are no global variables!
 - You don't have to worry about the distinction between destructive and non-destructive functions like in Ruby! They are all non-destructive functions!
 - You don't have to type `function' every time you want to create a closure like in JavaScript! I don't know what a closure is, but you can create a function that returns x just by writing `kx'! Maybe it's a closure!
 
 http://d.hatena.ne.jp/hayamiz/20080204/1202108447
 >>
 Scheme has some interesting features (first-class continuation, multi-valued, macros, etc.) that make it very challenging to learn! With a little effort, you can even write a Scheme interpreter to learn Scheme, and the compactness of the language makes it very easy to learn compared to other languages.
 <<
 - There's also a first class continuation in Unlambda!
 - If you work a little harder, you can implement a processing system!
 -- http://coderepos.org/share/wiki/unlambda_lambda_ja
 -- Only 46 lines, excluding tests and blank lines! That's still a lot of unnecessary line breaks to make it easier to read!
 
 Everyone should learn more about Unlambda! Minor? You can't differentiate yourself by studying a language that everyone else is studying! We do it because others don't!
 
 -----
 
 Postscript:
 http://generation1986.g.hatena.ne.jp/ukstudio/20080204/1202113687
 Excellent summary.
 
 *1202131964*Memui
 
 After eating champon noodles for the first time in a while, I got sleepy.
 
 *1202136982* How shall we insulate it?
 f:id:nishiohirokazu:20080204235618j:image
 </body>
 <comments>
 <comment>
 <username>amachang</username>
 <body>Ehhh<br>id:dankogai said I have low intelligence<br><br>(No_...) Shhhh</body>.
 <timestamp>1202104459</timestamp>
 </comment>
 <comment>
 <username>no-name</username>
 <body>I agree. <br>I think Python is the cleanest and easiest to understand<br>in terms of syntax and semantics when you put JavaScript, Python, and Ruby side by side. </body>
 <timestamp>1202107058</timestamp>
 </comment>
 <comment>
 <username>shou</username>.
 <body>I don't really like the order of string.join() in Python (I want it to be list.join()). <br>I want to join to a list, not to a delimiter character. </body>
 <timestamp>1202110882</timestamp>
 </comment>
 <comment>
 <username>Anonymous</username>.
 <body>Sho:<br>Please read the FAQ. http://www.python.org/doc/faq/general/#why-is-join-a-string-method-instead-of-a-list-or-tuple-method</body>
 <timestamp>1202112516</timestamp>
 </comment>
 <comment>
 <username>shou</username>.
 <body>I see what you mean. <BR><BR>I see what you mean, and I understand that. <br>I'm just saying. </body>.
 <timestamp>1202128767</timestamp>
 </comment>
 <comment>
 <username>amachang</username>
 <body>I didn't say I could write a Python closure.
 <timestamp>1202129644</timestamp>
 </comment>
 <comment>
 <username>TOKOROTEN</username>
 <body>Hot Bond is good</body>.
 <timestamp>1202141703</timestamp>
 </comment>
 <comment>
 <username>wasisan</username>
 <BODY>I am sorry for commenting so impulsively. <BR>Please forgive me. I was a little weird. I won't do it again. <BR><BR><BR>This article is a story, right? <BR><BR>This is not a misunderstanding, is it? <BR><BR>I was worried because the text was written in a misleading way. <BR><BR>I'm sure you are aware that dankogai is complimenting amachang. <br>The "intelligence" in this article is simply the "amount of knowledge". </body>
 <timestamp>1202141999</timestamp>
 </comment>
 <comment>
 <username>yugui</username>
 <body>Epoxy! Epoxy! </body>
 <timestamp>1202173414</timestamp>
 </comment>
 <comment>
 <username>keisuke_n</username>
 <body>I also use hot bond, suitable for beginners. <BR>The easiest to get hold of is epoxy. <BR>Well, I guess they are both.
 <timestamp>1202377418</timestamp>
 </comment>
 <comment>
 <username>nishiohirokazu</username>
 <body>It's okay, this entry is totally a story. <br>higepon actually has no beard at all and the video below is the original story. <br>http://www.youtube.com/watch?v=dW_U5Awa8Eo</body>
 <timestamp>1202546533</timestamp>
 </comment>
 </comments>

[Hatena Diary 2008-02-04 https://nishiohirokazu.hatenadiary.org/archive/2008/02/04]