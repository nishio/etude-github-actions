DX=Transition to double-loop learning using digital
>[tokoroten https://twitter.com/tokoroten/status/1279442207842250752]: I blurted out what I was thinking about [DX] and put it into a network structure and this is what I came up with. In short, the root of [agility] has moved from [personnel changes] to [double-loop learning] leveraging digital.
	[https://gyazo.com/910576aaf1b5a47d5e7b08419f2dd202]

>[nishio https://twitter.com/nishio/status/1279449296027279365]: why not leave the root of agility at the root of personnel changes? Has it stopped working? Why is that?

>[tokoroten https://twitter.com/tokoroten/status/1279451728367120384]: software development is a highly specialized field with large uptime swings, so it is not possible to hire software people in-house; IT people are professionals, so they cannot be reassigned IT people are professionals, so they cannot be reassigned (which is now a lie). As a result, the trend is toward [IT externalization]. In non-software areas, agility can be ensured through personnel transfers.

>[tokoroten https://twitter.com/tokoroten/status/1279452182249500672]: Nevertheless, the non-software domain has narrowed over the years, and computers have become the norm in almost every department. As a result, [agility through software renovation] has become more efficient than [agility through reassignment].

>[nishio https://twitter.com/nishio/status/1279457885794127872]: "Agility is gained through reassignments," "Software is now used in almost every department," and "Agility through software retrofits more efficient"? So you're now reassigning and firing [Tayupinko people] instead of people.

>[nishio https://twitter.com/nishio/status/1279458628961923072]: On the other hand, companies that outsourced software development fell into the trap of change inhibition, saying that they could not modify software without clarifying the specifications in advance, and thus could not gain "agility through software I understand that the company that outsourced software development could not gain "agility through software modification" because they fell into the trap of "cannot modify software without clarifying the specifications in advance". I am convinced.

>[tokoroten https://twitter.com/tokoroten/status/1279459787319603200]: y, it's around the right side of the diagram. Around [V-shaped model dysfunction] or something like that. To accept the "modifiability" of the ordered software, there must be at least one person who can write code. If it is not evaluated at acceptance, there is no benefit in the SI's business model to pay for the "changeability" of the software.

>[nishio https://twitter.com/nishio/status/1279469242975281152]: Unless the party specifying and placing the order includes [software changeability] in the requirements, the party being contracted is not obligated to make it. When changes are needed, it is an additional billing opportunity for the contractor. Rather, there is an incentive to make it difficult to change without information not given to the ordering party to prevent other vendors from taking it.

>[nishio https://twitter.com/nishio/status/1279470795475972096]: this whole argument is convenient for Cybozu. The reason why Cybozu kintone is selling so well is because it is "software intended to be highly changeable". And it solves the development resource problem by allowing business applications to be created to some extent without specialized engineers.
	[System development by non-engineers]

>[nishio https://twitter.com/nishio/status/1279473163382882304]: In the days when "highly specialized and difficult to relocate personnel" were needed to make business applications, the operation was based on the idea that "people are needed only when making applications and not later". The two assumptions are now changing.

>[tokoroten https://twitter.com/tokoroten/status/1279474270133878784]: y, software has become something that is constantly being modified and the bar for expertise has been lowered. Software has gone from mainframes, to Linux-based, to regular web applications. Then things like Kintone, Google App Script, and RPA are getting into the mix. It has become much more organized.

relevance
	[NoCode]
	[Companies that cannot outsource software]
