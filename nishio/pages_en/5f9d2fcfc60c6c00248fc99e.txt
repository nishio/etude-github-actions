abc151_e
https://atcoder.jp/contests/abc151/tasks/abc151_e
　Thoughts.
　　There may be an algorithmically contrived route, but a mathematical transformation seems like a good idea.
　　max(S), the max of a subset, is max(A) if it contains one or more max(A)
　　Conversely, what is not is the number of combinations that choose K from N-c(max(A)) with c(x) as the number of numbers greater than or equal to x [subtract the remainder events].
　　So if we sort and count, we know c, and we can also find the number of times it maxes out for each number.
　　　Fast if you make [binomial coefficient table
　　You can also ask for the max term first in [the sum of the differences is the difference of the sums].
　　	[$ \sum_{s\in S} (f(s) - g(s)) = \sum_{s\in S} f(s) - \sum_{s\in S} g(s)]
　　The same argument can be made about min, and if you pull it, you get the answer.
　Official Explanation
　　Duplicate values are handled a little differently.
　　Given the same values A1 and A2, the maximum value of A1 is the sum of "selecting A1 and choosing K-1 from A2 and onward" and "selecting A2 and choosing K-1 from A3 and onward," which is indeed an inversion.
