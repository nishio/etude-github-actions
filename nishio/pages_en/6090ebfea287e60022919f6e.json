Hatena2009-04-10
code:hatena
 <body>
 *1239338527* Making card games
 f:id:nishiohirokazu:20090410134207j:image
 
 I bought a piece of plasticine and made two arrow chips. One is the program counter and one is the jump destination label. The cards are 18 handwritten on word cards. I also bought a pack of 20 poker chips in 5 colors, which allows up to 3 people to play against each other, using 2 colors as +/- tokens. The game rules allow any number of people to play, but if there are too many people, the game gets out of control and takes too long to complete a round, which is no fun, so I'm assuming that it is mainly a 2-player game, maybe with 3 or 4 people occasionally.
 
 It's taking shape a lot. It's interesting. Next time, I'll make the cards less handwritten.
 
 **1239340275*[SpaMon] Consideration of multi-player
 When there are a lot of players and you have to place two bits for each player, where is the best place to place them?
 
 
 I think 2-bit is more gamey, but let's start with 1-bit... Bomb, Charm can't be placed because it will kill you, Jump and Reverse can't win you, MoveCard can't be placed, and MakeBit is the most useful card. The most useful card is MakeBit, but if everyone piles it up here, the latter player can try to remove it by placing it on the RemoveCard. 4 players can collude and place it on the Surge to defeat those who did not place it. The other danger is cards that can copy MakeBit and cards that can copy RemoveCard and remove RemoveCard itself.
 
 
 Next, think about when you have 2 bits: it's OK to pile on MakeBit, but the MakeBit group wants to bring the PC to MakeBit as soon as possible. On the other hand, the Surge group wants to bring the PC to Surge first, and even if they increase the bits in MakeBit, they will lose if they are hit by four Surge shots. On the other hand, the Surge faction wants to get the PC to Surge first, and if they get four Surge hits, they lose.
 
 
 Hmmm...even in a 2-player game, the rule of placing only two in the order of first move, second move, third move, and so on might be rather enjoyable.
 
 *1239342704* Derivation of V combinator
 I figured it out yesterday when I was in bed trying to figure out the derivation of Vx = V that I couldn't figure out during the day.
 It is rather easy to prove that x such that Ax = x is M(BAM); M(BAM) = (BAM)(BAM) = A(M(BAM)); it is easy to show that x such that Kx = x, Kxy = (Kx)y = xy. thus xy = x. So, all we have to do is to derive B from S since we have understood M = SII and I = SKK. Since we understood, we just need to derive B from S.
 
 
 S is very useful and can dangle unwanted arguments.
 >||
 1: xX = (I x)(KX x) = SI(KX)x
 2: X(Yx) = (KX x)(Y x) = S(KX)Yx
 3: XxY = (X x)(KY x) = SX(KY)x
 4: Xx(Yx) = (X x)(Y x) = SXYx
 ||<
 
 >||
 Bxyz = x(yz)
 = (Kx z)(y z)
 = S(Kx)yz
 = (KS x)(K x) yz
 = S(KS)K xyz
 ||<
 
 because of
 >||
 V = M(BKM)
 = ( (S(KS)KK) (S(SKK)(SKK)) )( (S(KS)KK) (S(SKK)(SKK)) )
 Vx = ( (S(KS)KK) (S(SKK)(SKK)) )( (S(KS)KK) (S(SKK)(SKK)) )x
 = ( (KS)K (KK)(S(SKK)(SKK)) )...
 = S (KK) (S(SKK)(SKK))  ( (S(KS)KK) (S(SKK)(SKK)) )x
 = (KK)(...) ( (S(SKK)(SKK))  ( (S(KS)KK) (S(SKK)(SKK)) )) x
 = K ( (S(SKK)(SKK))  ( (S(KS)KK) (S(SKK)(SKK)) )) x
 = (S(SKK)(SKK))  ( (S(KS)KK) (S(SKK)(SKK)) ) # xが消えた！
 = (SKK)( (S(KS)KK) (S(SKK)(SKK)) ) ((SKK)( (S(KS)KK) (S(SKK)(SKK)) ))
 = K( (S(KS)KK) (S(SKK)(SKK)) ) (...) K( (S(KS)KK) (S(SKK)(SKK)) ) (...)
 = ( (S(KS)KK) (S(SKK)(SKK)) )( (S(KS)KK) (S(SKK)(SKK)) ) # 元の形に戻った！
 ||<
 
 I am very confident that I am not conveying this excitement.
 </body>

[Hatena Diary 2009-04-10 https://nishiohirokazu.hatenadiary.org/archive/2009/04/10]