A few thoughts on thin literary programming.
from [/villagepump/thin-literary-programming-thought-a-bit].
I was thinking a little bit about [thin literary programming][/villagepump/nishio.icon].
 I'm writing a program in VSCode right now,
 Scrapbox does indeed have some nice features that are not in the current programming environment.
 　Like a line link.
 But the program environment has a lot of features in the browser that are not available in the Scrapbox environment.
 　type check
 　supplementation
 　GitHub Copilot
 　Jump to definition
 　symbol jump
 　Jump to symbols in the same file
 　In markdown, you can use `# headings` and so on.
 　Automatic reload of development server
 　Automated Testing
 　Version Control with Git
 　Automatic deployment after push to repository
 　I guess the only decent implementations would be formatter and completion without [LSP][/villagepump/takker.icon].
　Therefore, it is more straightforward to bring Scrapbox functionality to the VSCode side than to move the development environment to the Scrapbox side.
　	+1[/villagepump/sta.icon]
　That's the whole point.
　　As an extension to an editor called VSCode [a wiki that runs on the local file system].
　So, that's why
　　Wiki that runs on the local file system as an extension to the editor called Emacs
　　Isn't it a revival of [howm] that is which became
　　In Vim, [/villagepump/kuuote.icon] made it.
　What I wrote here is a feeling I may or may not make during Golden Week.
　　Most programming languages have the ability for multi-line comments.
　　so that you can write a Scrapbox-like link there.
　This also leads to [I want to use Scrapbox offline
　　Edit offline without internet and git push when you are online
　How to make VSCode extensions, I don't know anything about it.
　　I'll look into the possibility that "there's already a howm for VSCode."
  	[https://note.com/rashita/n/n6bd4705c060c VS Code used by writers - Extensions｜Tadanori Kurashita｜note]
   	[https://blog.bulkus.net/post/vscode-actionlock/ I created an extension for Visual Studio Code called ActionLock | WriteIfElse]
  	  >[Howm's ActionLock] was useful.
  　Only some of the features are there.
  　https://github.com/satokaz/vscode-memo-life-for-you
  　Open "Today's date and time page" with shortcut keys like howm
		[https://code.visualstudio.com/api/get-started/your-first-extension Your First Extension | Visual Studio Code Extension API]
　　There is a [vscode-wiki]thing[/villagepump/kuuote.icon].
　Is it a docstring becoming a Wiki thing[/villagepump/inajob.icon]?
　In emacs, it looks like a minor mode, so it could be implemented by combining existing modes (I'm not sure)[/villagepump/inajob.icon].
	The concept of [continuous documentation] might also be a clue[/villagepump/sta.icon].

　I think it's a good idea to extend VSCode as what we can do now, but I'm curious what the ideal form of [thin literary programming] would look like[/villagepump/yosider.icon].

---
from [/villagepump/first half of Golden Week Chronicles 2022].
　I was thinking about [a little bit of thinking about thin literary programming], for now, I was going to make a Hello world-like extension and do the "I have made a VSCode extension" achievement release[/villagepump/nishio.icon].
　　Hello world is ready.
　　Can reload with Cmd+R. Feels like developing a web app.

---
from [/villagepump/first half of Golden Week Chronicles 2022].

[ActionLock][/villagepump/nishio.icon]
	[ActionLock in /villagepump/Howm].
	reading comprehension
	　Once every 100 seconds, it updates text decorations, such as underlining, and determines if the cursor is in the RANGE at that time.
	　	[/villagepump/ActionLock#626e5273aff09e00009a8e83]
	　The range is defined by a regular expression.
	　	[/villagepump/ActionLock#626e5294aff09e00009a8f1c]
	　Pressing Enter when in range executes the command.
	　	[/villagepump/ActionLock#626e52c2aff09e00009a9065]
	I wish I could write a story like "I wish I could write a story like "I wish I could write a story like "I wish I could write a story like "I wish I could write a story like "I wish I could write a story like
	　[Sin Literary Programming].
	VSCode can't do it now, so we'll have to do it in Scrapbox.
	I tried it and got a page with only the source code posted...
	　This is only about 3 files now, but if there are more, would it be better to have separate pages for each source file...
	Would it be easy enough to jump to the corresponding page in Scrapbox if you enter on a string like `[/foo/bar]`?
	What should happen when you Enter on `[foo]`?
	　Scrapbox has an implicit jump target at the beginning of the page.
	　Clicking on the foo link results in a jump to the jump target at the beginning of the foo page
	　Each source code in VSCode has a file name, but not a title for humans in the Scrapbox sense.
	　　Need a notation to create jump targets?
	　　Create a jump target at an arbitrary position in the page, like [come-from link].
	　　For example, if you write `[< determine if the cursor is in the range]` at [ActionLock#626e5273aff09e00009a8e85] in the source code, it will jump to that position when you enter with `[determine if the cursor is in the range]`. And so on.
	　　I wonder if this can be done.
　			https://code.visualstudio.com/api/references/vscode-api#WorkspaceSymbolProvider%3CT%3E
　　　Even if you can't jump directly, you can do a "symbol search on that string" and get there in two hops.
　　　　That should work with file names, etc. in the bracket.

[yahow]
