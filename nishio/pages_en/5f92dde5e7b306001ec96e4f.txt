My way of learning atcoder (~light blue)
Previous [My way of learning atcoder (~green)]
[How I learned atcoder (~blue)]

It had been languishing for about a month just before light blue, but [ARC106] finally made it to light blue.
[https://gyazo.com/f6135300b90474a9c0175d10ef3dfc84]
[https://gyazo.com/0c19e85e8e4d6363373c906c7b48e375]


I don't usually look at it much, but you can see various stats on AtCoder Problems. So far, they have done 151 problems. I've been doing this for about 5 months, so I'm averaging 1 question a day.
[https://gyazo.com/1e5e3a08cebe8e17297bbb8b359d9ed6]
[https://gyazo.com/3fb401a14bfca098dcd55d38b74d2dd1]

The heat map shows that there is a lot of activity in June and July, and then mainly on weekends.
[https://gyazo.com/a545e29a1fe805d14403c557efcb5833]

Previous [My way of learning atcoder (~green)]

　I wrote in a previous article, "[Languaging Awareness] continues.
　　I feel like [crystallization] is happening slowly, with multiple issues reacting over time and so on.
　 The name "verbalization of awareness" is not appropriate.
 　　>To name the technique used in the deformation process and make it a tag on Scrapbox.
　　　Name the Transformation Technique."
　　This definitely contributes to rate improvement.
　　I was able to solve D in [ARC106] this time, and the reason why I was able to solve it is because I was able to take the three techniques [matrix halving] → [binomial theorem] → [reordering of addition] out of my brain drawer and use them
　　Name it to be a handle for "getting it out" [concept handle].

　Began to maintain the library.
　　[snippet library that can be tested].
　　In this case, the [UnionFind] and [combination with mod P] calculations are taken from the library.

　Solved learning contests.
		[Educational DP Contest]
		　Contest on [Dynamic Programming
		　I did this around July when there was a lot of activity.
	　[AtCoder Library Practice Contest]
　　　Contests on various algorithms added to the [AtCoder Library

　He was stepping in front of the light blue.
　　The "contents of the toolbox" have increased with the above study and library maintenance.
　　　However, I felt that it was weak to look at a problem and attribute it to a solution method or algorithm, saying, "If I use that tool like this, I can solve it.
　　[How can we develop the "power of return"?
　　　I started [return training] with the aim of finding out how to train it.
　　　This is simply put: "Instead of looking at a problem and writing a program, write a solution in natural language.
　　　I've only been at it for about 4 days, but it feels good.
　　　The detailed verbalization of "what we thought" clarifies what we misunderstood, missed, or didn't realize.

　What we no longer do
　　Numba, Cython and Numpy.
 　　If you think carefully about your current position, it is more important to arrive promptly at a solution of the appropriate order than to speed up such a process!
 　　This type of acceleration is not appropriate as an investment of time.
 　　So I'll just use PyPy3 until PyPy3 says "nothing is wrong, but I can't AC because the language is too slow".
 　Aiming for full completion after the contest.
 　　The ones who try to solve all the problems they couldn't solve after looking at the explanations.
 　　For a while, "solving it all" had become an objective, but was that an objective? I reconsidered.

---
[Return training] 10/20~.
