Intellectual Productivity of Engineers: A Summary of Reactions Part 2
The second page was created in the wake of the lecture because [Summary of Reactions to the Intellectual Production Techniques of Engineers] had become too long.

Lecture given.
	[Intellectual Production of an Engineer Before and After]
	Twitter summary: [Devsumi 2019 [15-B-1] The Intellectual Production of Engineers Before and After #devsumiB - Togetter https://togetter.com/li/1319406]

	[Intellectual production or knowledge production?]

	[I read The Intellectual Production of Engineers - MY ROOM https://m-yamashii.hatenablog.com/entry/2019/02/16/111302]

	[I liked "The Intellectual Production Techniques of Engineers" - Maikuro🍣Kirimin https://micro-kirimin.hatenablog.com/entry/2019/02/15/103723]

https://twitter.com/__gfx__/status/1099848587398197248
	In "The Engineer's Guide to Intellectual Production," there is something like, "When you feel like you're not having a hard time learning something new, it's because it's not really new," which is similar to the often quoted quote in the startup community, "When everything seems under control, you're just not getting out as fast as you should. This is a common quote in startup circles.
	I think the context was that if you don't challenge yourself to learn more new things, you can't call it intellectual production (my interpretation).
	> When you are learning a "new language" that you can use without difficulty, (omitted) you are learning few new concepts. （This is a bad mentality to be stuck in and you need to realize it and get out of it.
	[nishio.icon] I reprinted it myself: [When you can learn without effort, you are not really learning].

https://bookmeter.com/reviews/78964919
	The speed-reading story made sense to me, and I'm going to try the KJ method. The talk about excellence was also interesting.

https://booklog.jp/users/tomohikon12/archives/1/4774198765
	What I wanted to remember.
 How to know if knowledge has been built up
 　Can you explain in your own words?
 　Can you give specific examples that followed your experience?
 　Can I use that knowledge to achieve my goals?
 People who are unmotivated are not able to focus on a single task.
 To be able to do more than you can do today, "It's up to the barrel of your thought.

https://twitter.com/uchan_nos/status/1097300669680111617
	There's this story about an engineer's intellectual production techniques." Sometimes you look at someone else's activity and think, "I wonder how he came up with this way of doing things, ... maybe he's a genius," but you feel that way because you don't see the huge amount of trial and error he's doing behind the scenes." On Twitter, it really feels like this is a remarkable phenomenon.
	What I wanted to convey through this story is that there is no need to be depressed and say, "He's a genius, but I'm a useless guy who can't do anything..." Instead, we should do a lot of trial and error, discover 10,000 different ways that don't work, and finally find one good way to do it. He can write about his last discovery on Twitter, and voila, a genius is born.
	[nishio.icon] Reprinted from: [Trial and error is hard to see].

https://twitter.com/tkdn/status/1105813245338640384
	When you think you are learning, but you only know as much as you can, you are not learning (from "The Intellectual Production Techniques of Engineers"). The learning starts when you get stuck and don't know what you don't know.
		[nishio.icon]I feel uncomfortable with this expression
			Summary [When you can learn without effort, you are not actually learning].

https://twitter.com/_neko_suki_/status/1105014653388652547
	The part about management strategy really stuck with me. I am strong in network protocols, and I know a little bit about GPUs, automated driving, and deep learning, so I would like to differentiate myself by combining them.

https://twitter.com/shootacean/status/1104393829036126208
	It was an easy read with a good balance of abstract and concrete stories.
 Most of what I hadn't been able to verbalize was written in an organized manner, and I realized a lot...
 I also appreciate that the citation information is well documented in the annotations!

https://twitter.com/shootacean/status/1104389055750402049
	The "crossing the border" of the Kaizen Journey and the "excellence" of Chapter 7 of The Engineer's Guide to Intellectual Production are similar.

https://twitter.com/shootacean/status/1104267501913890821
	I'm glad I read about the intellectual production of engineers!
 Chapter 4 was written in a way that organized what I usually think about, so I felt so much clearer!

https://twitter.com/auxps/status/1103581315952070657
	The "Information Card."
	I also recommend a book called "An Engineer's Intellectual Production Technique" by Yasukazu Nishio on how to organize information using cards. (This guy does it with "fusen.")
 It is originally Jiro Kawakita's KJ method, but it is very easy to understand because he actually practices output to the point of putting ideas together and writing a book.
 	[https://gyazo.com/629f3a385f2b1f211d83da5d438b8478]

https://twitter.com/sasakinoblog/status/1103566679559159809
	I found the second half difficult.

https://twitter.com/hrgn_tw/status/1102939220178620416
	This book made me realize how much I usually don't think about anything. Let's start by writing down on paper the deadlines and goals of what we want to do.

https://twitter.com/Xyo/status/1102938063704023040
	Right now I am reading "The Intellectual Production of Engineers". I would like to send it to my past self in a time machine to read it, but even if my younger self reads it, he would not understand it due to lack of experience, and would be in a state of piling up boxes in the sky, which was the metaphor of the book.... I felt this dilemma. I felt something similar when I read the refactoring book.

https://twitter.com/sasakinoblog/status/1102415844523401216
	I am currently reading "Intellectual Production for Engineers" and "Output Compendium".
 Both have many points in common, but they are written from different perspectives, so it is good to be able to read them while comparing them.
 [nishio.icon] [knowledge integrity] p.167-168 real life example.
 	[https://gyazo.com/920dfceb1b882548c7d4ea011fb9c3ff]

https://twitter.com/kurupical/status/1102355745369055232
	I enjoyed the idea of [serial specialists] in chapter 7 and the overall machine learning tics that were explained.

https://twitter.com/sunalabo/status/1102073078312390656
	I've started reading "The Engineer's Guide to Intellectual Production." In my Scrapbox, "abstraction" and "KJ method" were already linked words, but I'm excited to see that the link will be further strengthened.

https://twitter.com/otakumesi/status/1101800191189897216
	Using the KJ method to write down your thoughts is a good exercise in going back and forth between the concrete and the abstract.
 I've been using it ever since I read The Engineer's Guide to Intellectual Production.

https://twitter.com/NikkoMonkey/status/1101762690173743104
	The book is a compressed version of work techniques often seen in business books, arranged in a style for engineers. The book addresses common problems such as "how to be motivated," "how to remember for a long time," and "how to read efficiently," and incorporates physiological/psychological aspects into methods that can be practiced on a daily basis.
	I think I like that kind of thing because I generally find stories that explain or hack the behavior of the human body or groups of people in a hardware/software abstraction interesting.
	I really like the nonsensical stuff like "Nmsec is the limit of the eye's afterimage recognition, and the pace of reading aloud is Nsec, so the pace of reading is in the range of N to Msec. On the practical side, I think the Pomodoro method of dividing task time is pretty useful.

https://twitter.com/benevolent0505/status/1100350096112181248
	What was unconscious is being verbalized anyway.

https://twitter.com/kappezoro/status/1099924891132776448
	Does the math department need to understand one page at a time to move on? ..... I had one line when I was there, and as soon as I was unclear on even one line, the professor would... I stopped, so I went looking for books to understand the essence of the subject and kept my notes at 1~2 pages per line. So I didn't finish reading one book even in a year.

[Read "The Intellectual Production Techniques of Engineers" by Yasukazu Nishio. - Super Notepad (Web-based) at Revived https://www.ituki-yu2.net/entry/Engineer_intellectual_production_technique]

[[Reading] The Intellectual Production Techniques of Engineers By Yasukazu Nishio Book Review by Naoki Shiho | Naoki Shiho Official Site https://naokishiho.com/2018/12/18/engineer-input-output/]

https://twitter.com/kigh/status/1098801343718813696
	The SECI Model. Scrum as an intelligent creation system.
 I'm reminded of what I read at the beginning of the year in "The Intellectual Production of Engineers." That one is individual play, this one is team play.

https://twitter.com/mike_neck/status/1115235478431645699
	I collected about 100 contents for jjug ccc according to the list of 100 anyway in "The Art of Intellectual Production of Engineers".

https://twitter.com/yuuki_script/status/1115140602541236224
	It was not a how-to on engineering, but rather how to leverage the nature of engineering to become stronger. The talk about excellence based on differentiation strategy, etc., stuck with me personally. I want to put it into practice.

https://twitter.com/disneyduffy1118/status/1114302838773911553
	The Intellectual Production of Engineers, interesting 🙂 I feel like what I've been feeling in the atmosphere is falling into my stomach in writing. I see what you mean about flow theory! I thought. When I'm anxious or bored, I'll review the challenge 😌.

https://twitter.com/Xyo/status/1113452079819804672
	Chapter 4 of "The Intellectual Production of Engineers," How to Read a Book. It had the biggest impact on me. I have not read many books of this type, so I subconsciously read aloud quietly, and I was concerned about reading through the book, but now I feel that I don't have to do that. I knew this was a book I wanted to send to myself 10 years ago.

https://twitter.com/Xyo/status/1113449605042102272
	Chapter 3 of "The Engineer's Guide to Intellectual Production," the importance of the output needed to remember. It was kind of a rule of thumb, but I still remember things better once I write them down. Even if I don't have confidence in my memory, I can remember how to deal with technical problems that I used to write about in my old blog (which I don't use anymore).

https://twitter.com/mesh1nek0x0/status/1111949697365622784
	I have a feeling that we will learn about abstraction, which was also found in the intellectual production techniques of engineers (Table of Contents #The Magic of Memos
	I feel that abstraction and diversion from facts is similar to the patterning and trial-and-error that I read the other day in the engineers' intellectual production techniques. It's interesting to see how we all arrive at the same place. Reproducibility gives it a name. I'm sure that's the case. The magic of #notes

https://twitter.com/bc_rikko/status/1111838753201348608
	In "The Intellectual Production Techniques of Engineers," there is a phrase, "Use knowledge to gain a position, and then use that position to acquire knowledge." I would like to use my position as a CSS framework world ranker to connect with various people and absorb various things!

https://twitter.com/tkt_horikoshi/status/1111243244115918848
	I found myself reading The Intellectual Production of Engineers. I'll read it five more times.

https://twitter.com/43memo_com/status/1111066630665068544
	I bought a copy of "The Engineer's Art of Intellectual Production," and flipping through it, I found that it explains various things related to intellectual production in a considerable volume, and the illustrations are easy to understand. I think Maruzen in Marunouchi has been pushing the book for almost half a year, and the fact that it has been on the shelves for that long suggests that it must be a big seller. Even non-engineers should read this book.

https://note.mu/raynote/n/n8ee6caebb80f
	Role as a map for those who will be doing intellectual production

https://twitter.com/_chick_p/status/1109585339985747968
	When choosing a reference book, you should look at the syllabus of the university. However, the author says that he excludes those by the lecturers themselves or those related to the university.

https://twitter.com/stand_arrow/status/1109435178483507200
	It was good to realize that I had incorrectly remembered how to do the KJ method.

https://twitter.com/AndSaino/status/1109240963090644992
	Let's do sutra copying now and then. According to "The Engineer's Art of Intellectual Productivity," modeling is advanced by discovering similarities and differences.

https://twitter.com/yukitakaiha/status/1108628516059271168
	I read "The Intellectual Production Techniques of Engineers," and Yuji Maeda said the exact same thing about how he writes his notes.
 The flow of "concrete -> abstract -> applied" can be applied to all studies, not just program studies, and I think it is so important to be aware of this process when learning something.

https://twitter.com/kurupical/status/1107999355489771530
	I quite like the idea of the "straw man strategy" of learning new things using your current weapons as bait. The book: The Intellectual Production of Engineers also talked about the same thing with the term "serial specialist" - I think.
 I'm vaguely aware of these places in a corner of my mind (but I haven't done anything about it lol).

https://twitter.com/tomo_yoshizaki/status/1107634290248962049
	I used to use the Pomodoro Technique only for study breaks, but when I read about the intellectual production techniques of engineers and applied it to my work, I had 7 Pomodoro in one day.
 Surprisingly, tasks cannot be processed in a day.

https://twitter.com/windymelt/status/1106856613984403458
	By the way, I had finished reading "The Intellectual Production of Engineers". There were a number of passages that I was unsure about, and I wish I had read this earlier. The best part was "There is no 'story' in source code.

https://twitter.com/hellomyapple777/status/1118548363824091137
	I read "The Technology Behind Coding" by Yasukazu Nishio. I learned a lot. I would like to read this book again when I write programs in the future. I wish I had it when I was a student.
	As I thought in "The Engineer's Art of Intellectual Production," I am glad that the author has managed to discard the details while carefully considering the order in which the topics are presented so that they can be easily absorbed into the mind. I also appreciate the back and forth between concretization and abstraction.
	There are surprisingly few books like this that "create a rough map in your mind," which is valuable. Many of them are too dictionary-like and exhaustive, making it difficult for beginners to grasp the important points, and many of them do not touch on the purpose of various mechanisms and concepts.

https://twitter.com/ledsun/status/1118611439416033280
	I'm wondering if there's a pro-management version of the book "The Intellectual Productivity of Engineers." It's become the norm with Agile and Scrum in the last 20 years or so. A book that outlines techniques such as project charters, estimates are probabilities, decide on the done of tasks, combine buffers into one, don't move on to the next phase with a reverse line table, etc.
	PMBOK is too much. It should be more like a how-to, introducing techniques and original sources. That would reach people who have not been exposed to Agile for 20 years.
		[nishio.icon] "The Intellectual Production of Engineers" consciously concentrated on "what can be done alone. Because change is slow when you try to move others. Many PM books assume "a position to move others. So I think we need a book that fills in the gaps here, and Kaizen Journey is much closer to that.

https://genkiroid.github.io/2020/05/11/learn-tech/
