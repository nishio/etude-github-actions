technical debt
[https://gyazo.com/079c9a639fa6d41cb6e79f8116b381cc]
	>Ward Cunningham I found the explanation by the man himself quite interesting, so I translated it for you.
		https://t-wada.hatenablog.jp/entry/ward-explains-debt-metaphor
		Many people in the world interpret it as A, but the original is B
		Even if the implementation is perfect at the time of release, the ideal implementation will deviate from the actual implementation as we learn from user behavior and other factors after release.
		'When you have a lot of debt, you're squeezed by interest payments, and you have less money to spend.'
			= "lower productivity in developing new functions, etc." can be interpreted either way.
  The original B's interpretation was, "If you leave the code untouched with no debt, the debt will accumulate."
  	This is not a very good match for the financial debt metaphor.
  	Of course, "parables" are "similar" by focusing on only some aspects of things, not necessarily all aspects.
  		Just because public key cryptography can be compared to a padlock does not mean that public key cryptography is made of brass ([Engineer's Guide to Intellectual Production] p.40 [Padlock metaphor for public key cryptography]).

https://bliki-ja.github.io/TechnicalDebt/
