Hatena2008-02-07
code:hatena
 <body>
 *1202352899* innovation
 -Former Cybozu President's Theory of Innovation, "Ignore the Shareholders" - "LUNARR" (1/2) - ITmedia News
 --http://www.itmedia.co.jp/news/articles/0710/29/news036.html
 >>
 　Innovation will not happen 100% if we interact with capital markets."//// Shareholders should rather ignore them if they want innovation.
 <<
 
 Hmmm.
 Look at this, "If I had asked my customers what they wanted, they'd have asked for a faster horse."(<a href="http://ja.wikipedia.org/wiki/%E3%83%98%E3%83%B 3%E3%83%AA%E3%83%BC%E3% 83%BB%E3%83%95%E3%82%A9%E3%83%BC%E3%83%89">Henry Ford</a> "If I had asked my customers what they wanted, they'd have said 'I want a faster horse' (without saying they wanted an automobile )"). What Ford is saying, in essence, is "ignore the customer's needs."
 
 That's difficult. I wonder if that's really the right thing to do.
 
 -----
 PS: Isn't "Ignore your customers' needs... I don't think "customers don't always know the best method to meet their needs." I see you don't ignore the need for "fast and comfortable transportation." But if a customer says, "I want a fast horse," you can't just take it literally and research fast horses.
 
 *1202374134*[AS3]Accuracy of Sprite coordinates
 When v is an instance of Sprite, substituting 0.09 for x rounds to 0.05.
 >||
 v.x = 0.09;
 log(v.x); // 0.05 
 ||<
 Internally, it's held in twentieths of a pixel increments (at 72dpi. <a href="http://ja.wikipedia.org/wiki/Twip">Twip</a>), which is held as an integer. I didn't think that was supposed to be the case, but I was putting values in and out of x, and the sprite I was displaying was gradually moving to the upper left corner. rounding to Twip is fine, but I wish they had rounded to the nearest whole number instead of calculating by rounding down.
 
 *1202376013*[AS3]Speed comparison between Point and Array
 Time taken after comments.
 I was a bit surprised that accessing class member variables was faster than accessing arrays by their subscripts, but this may be because ActionScript arrays are not C-like arrays. On the other hand, it seems that class member variables are already allocated as arrays, and x and so on may be mapped to integers.
 
 >||
 var d:Point = new Point();
 d.x = 0.1; //55
 d.x; //55
 
 var d:Array = [0.1, 0.2];
 d[0];　//105
 d[0] = 0.1; //995
 d.x = 0.1; //2115
 
 var d:Object = new Object();
 d.x; //798
 d.x = 0.1; //1860
 ||<
 
 At any rate, I have concluded that it is much faster to use Point to deal with 2-dimensional vectors. However, I am troubled by the non-destructive methods such as point's add, while offset can be rewritten destructively. I think I'll make a vector calculation library with this in mind. I'm sure there are already good ones out there. First of all, let's look for one.
 
 In other cases, if the length is fixed, it would be a good idea to consider avoiding Array.
 
 *1202383097* Lunar
 f:id:nishiohirokazu:20080207201812j:image
 
 *1202385609*Behind Roppongi
 f:id:nishiohirokazu:20080207210009j:image
 
 *1202394794* Wow, fatty!
 f:id:nishiohirokazu:20080207233308j:image
 </body>
 <comments>
 <comment>
 <username>Youchan</username>
 <body>Henry Ford said that customers don't always know what they want. <br>They cannot want something that is unknown to them in the first place. <br>I think this means that we should not listen to the voice of the customer, but rather give shape to what the customer really wants. </body>
 <timestamp>1202362479</timestamp>
 </comment>
 <comment>
 <username>coji</username>
 <body>It's like "two shoe sales"! I think it's an important idea</body>.
 <timestamp>1202362927</timestamp>
 </comment>
 </comments>

[Hatena Diary 2008-02-07 https://nishiohirokazu.hatenadiary.org/archive/2008/02/07]