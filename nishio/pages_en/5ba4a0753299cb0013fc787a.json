How can the ability to abstract be taught?
A note that led to a discussion about how [abstraction skills] could be taught in the process of planning [technology to support coding] in 2013.

[2013-12-16 Facebook https://www.facebook.com/nishiohirokazu/posts/10202269901245477]
It is not good to devote too many pages to "How important it is to learn."
	You're a person who "[wants] to learn" when you pick up such a book to read it in the first place.
	People who don't want to learn when I devote pages to explain it to them don't read it in the first place,
		On the off chance that I do read it, I have no desire to learn.
	So the reader should assume that you are trying to learn and speak to you and say, "That's the right choice.
	The problem to be solved is "I want to learn, but I don't have [the time] OR [the motivation]."
	So, I will touch on [time reduction] ([efficiency improvement]) and [motivation management].

The disadvantage of not learning is [not being able to notice change].
	Learning to prevent this [broadens horizons] is the second axis.
	Learning for [efficiency] is the first axis.
	Coming to an [abstract understanding] accelerates [learning] of new things.

	From one end, from the big picture, from where it needs to be.
 The latter is easier to learn by comparison or from history.
 Learn by making, [check understanding].
 	It's important to know what you don't know.
  But what to make?
  So [close contact with information in the organization]. Find [problems that need to be solved].
		If you avoid [close contact with concrete examples] and collect only abstract information, it will not become knowledge that takes root in you.
  Cut flowers will eventually wilt. [It is important to "put down roots.

	Primary target is new employees who want or need to learn a programming language
	 How to learn a programming language?
	 You learn from history, you learn from comparison, only after you've reached a level where you can create and learn at least one language.
	 Axis 1 might be better for the axis of widening horizons.
			broaden one's horizons
			cultivate a better understanding
			[Close to application].

 Maximizing Surprises

	[tokoroten.icon] Our understanding is that by learning, we acquire the ability to abstract.
 	But you can't reach people because you can't bridge the gap between the knowledge you gain from learning and the [ability to abstract].
 	So why do we acquire the ability to abstract when we learn?
  I wonder if it would be a good idea to write pertinent information about why there is no point in studying only knowledge without acquiring the ability to abstract it....
		[nishio.icon] Tokoroten Nakayama Why do we acquire the ability to abstract by learning?
			[nishio.icon] How do we develop the ability to abstract?
			[nishio.icon] Has the ability to abstract been acquired, or have people with the ability to abstract experienced success in gaining abstracted knowledge as a result of their studies and have begun to devote more resources to learning?
			[nishio.icon] What makes you happy about abstraction?
			[nishio.icon] Abstraction can be applied to new problems. If you learn the answer to a specific math problem, you can only answer that problem. If you learn the "solution" that led to that answer, you can solve other problems.
			[nishio.icon] How can we teach the ability to abstract to someone who does not have the ability to abstract at this point in time?
			[nishio.icon] Can the ability to abstract be taught?
			[nishio.icon] What exactly do you mean by abstraction?
			[nishio.icon] The topic of abstraction may not be answered immediately

[tokoroten.icon] For a quantity of knowledge, do we acquire abstractions by [induction]?
	In my experience, buying two books in the same field is a successful abstraction.
		Can [nishio.icon] [comparison of several things] determine that what is commonly established is "[universal]" (likely)? Surely that's an abstraction.
		[nishio.icon] I suspect that the ability to abstract by induction is innate, and that you're not abstracting because you don't do the "read multiple books in the same field" behavior, but then that's easier than teaching the ability because you simply have to teach the behavior.
		[nishio.icon] [教科書を疑う]発想の有無か
		[nishio.icon] So you can say that when you say let's compare programming languages or learn from history, you suspect that the current language is not perfectly correct and abstract from it by comparing similar ones?

[tokoroten.icon] あとは
	[understanding by metaphor].
 [Graph Structure of Knowledge]
 [Linking History and Invention]
 The acquisition of a graph structure of knowledge becomes [a pattern of graphs] and [abstraction through pattern matching].
	[tokoroten.icon] So I would say that what you learn is not useful, but the results of chewing what you have learned is useful.
 	How to bridge the gap here is what leads to how important it is to learn.
	[tokoroten.icon] I wonder if I should use the name [structuralism] and the philosophy of [deconstruction] for the series of flows.
		[nishio.icon] What exactly is deconstruction? It is difficult to answer this question.
			[tokoroten.icon] I wonder if we understand structure through abstraction and create new creations by transforming and destroying the structure.
   	It might be easier to understand if you think about it from [deconstructed architecture].
			[nishio.icon] In the context of how to learn, would you say that we should move away from the idea that "there is a [right answer](the [structure] of [the right answer]) and we learn to get it"?
			[tokoroten.icon] It's like a complement of [deconstruction] and [structuralism], so the contents are different depending on who says it.
			[nishio.icon] If I say something like "each individual needs to create their own structure of understanding" here, am I going back to constructionism?
				I thought it was called [constructivism]. That's confusing.