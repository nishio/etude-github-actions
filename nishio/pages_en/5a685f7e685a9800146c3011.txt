Three types of knowledge transfer
 When we talk about [knowledge transfer], there are three ways to transfer: the [knowledge] itself, pointers to the knowledge, and knowledge tailored to the [situation].
 	The first is, "What is Python?" The first is something like, "Python is one of the programming languages commonly used for machine learning."
  This type of knowledge transfer is very costly to teach.
  We would like each person to acquire this information on their own from books, searches, etc., rather than having it provided by a human being.
  [Parable of the fish and the fishing]
  [Asking people and searching].
 The second "pointer to knowledge" takes the form of "it is written in this book" or "you can do it if you use that library.
 	This is efficient for those who can learn on their own based on that information.
 For those who cannot achieve results with that pointer alone, the third, "situational knowledge," must be supplied.
 	This can only be provided by those who have the "ability to create knowledge to fit the situation".
 	Simply knowing written knowledge, etc., is insufficient to provide situational knowledge
  Must be able to apply existing knowledge with minor modifications to fit the situation
  I see this as [internalization] of knowledge.
  Internalization of programming-related knowledge requires gaining [experience] of "fine-tuning" itself through the experience of creating something that works by oneself and debugging "I thought it would work this way, but it doesn't."
 [2018]-01-24 [Twitter https://twitter.com/nishio/status/956035567350943745]

relevance
 There are two levels of knowledge pointed to by the term "software technology." Knowledge of a specific language or library, such as jQuery, quickly becomes obsolete. Therefore, having "people who can only do that" is a liability. However, there is also "the know-how to efficiently learn new languages and libraries," which is not so well verbalized, but it certainly exists, and people who have such knowledge are rather important in a rapidly changing environment.
  The former level of knowledge can be acquired from the market when it is needed, but the market cannot acquire personnel who can think about what to acquire. Unless incentives are created for long-term employees to learn the various constraints specific to the company, it will not be possible to have people in the company who can select technologies to meet the company's specific constraints.
  Lock-in: "We want to get good engineers, but we don't have anyone who can judge good engineers."
 When trying to acquire knowledge from outside the company that is not available within the company, it is inefficient to acquire it from books, papers, and other written materials. This is because the evaluation function of books and papers is different from that of business.
  In business, it is of utmost importance that the knowledge gained (e.g., machine learning algorithms) can be put into practice and gain value. In order to do so, it is necessary to overcome the detailed troubles encountered when applying it to one's actual data. On the other hand, "troublesome details" are not the main topic of the book, so they tend to be omitted from the paper.
  Therefore, a personal network with external "individuals with practical experience" is useful for acquiring this kind of knowledge. As a corporate knowledge acquisition strategy, it would be beneficial for individual employees to take measures to develop such a network, but I wonder how many companies are actually doing this.
  As for the difference between academia and business, I wrote about it from p. 27 here
   https://www.slideshare.net/nishio/if-80195170#27
  Simply put, the latest and best algorithms in academia, which are trying to achieve higher accuracy by devising methods for data that is well maintained, open to the public, and shared, have not been tested to see if they are beneficial for your company's data. In addition, what is important in business is customer value, not accuracy, so if you can generate sufficient customer value with a dead method, it is preferable to operate with a dead method rather than seeking excessive accuracy.

