Hatena2014-09-18
code:hatena
 <body>
 *1410970520* book review: under standing computation
 Mr. Sasada, the supervisor of the translation, wrote "<a href="http://www.amazon.co.jp/gp/product/487311697X/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN= 487311697X&linkCode=as2&tag=nishiohirokaz-22">Understanding Computation - From Simple Machines to Impossible Programs</a>" from Mr. Sasada, the supervisor.
 
 What is the "meaning" of a program? This book tackles the abstract question, "What is the 'meaning' of a program? There are two ways to express the "meaning" of a program: one is to express it in terms of "how the computer is operated by it," and the other is to express it in terms of "what would happen if it were converted into another (simpler) language. This book explains that there are these two methods and goes into depth on each of them.
 
 Along the lines of "how a calculator is manipulated," it is, of course, necessary to next ask the question, "what is a 'calculator'?" The first step is to start with a "deterministic finite automaton," which is an inferior calculator. The first chapter is devoted to the "deterministic finite automaton," which is a computer with inferior capabilities, and then a whole chapter is devoted to explaining how it interacts with a certain programming language called regular expression. This storytelling is interesting.
 
 Then, the limits of the capabilities of finite automatons are explained, and "pushdown automatons" are described as machines with even higher capabilities. After devoting another whole chapter to this, the next chapter finally brings us to the main subject, the "Turing machine. It is hot!
 
 The second part begins in Chapter 6. In this chapter, we remove various features from Ruby in order to create a "minimal programming language" and finally arrive at an "untyped lambda computation" that has only three things: referencing variables, creating single-argument functions, and calling single-argument functions. The goal of this chapter is to implement FizzBuzz in a small language with no strings, no assignments, no numbers, and no control syntax. Some might be surprised that such a thing is possible.
 
 The next chapter explains how the untyped lambda calculus can simulate a universal Turing machine, and then introduces various things that are similarly Turing complete (SKI combinatorial calculus, Iota, tag system, Conway's Life game, ...). The next section is about problems that are impossible to program. The last chapter explains how to extract useful information by simplifying and executing the program without having to execute it exactly.
 
 Wow, what a great book, a bird's eye view of this range in a little over 300 pages.
 
 The book is written for "people with no background in mathematics or computer science. It also says "for people interested in the theory of computation," but I suspect that most people out there probably don't even know it's called "theory of computation."
 
 Unlambda, LazyK, ((<a href='http://blog.livedoor.jp/dankogai/archives/51524324.html'>404 Blog Not Found:Math - How small can a language get? Unlambda|iota|jot)), or that you can do a lot with just functions ((<a href='http://blog.livedoor.jp/dankogai/archives/50458503.html'>404 Blog Not Found: Between Turing and Church</a>))), Y Combinator ((<a href='http://d.hatena.ne.jp/nishiohirokazu/20080415/1208254884'>To Mock a Mockingbird</a>, <a href='http://d.hatena.ne.jp/nishiohirokazu/20090410/1239342704'>Derivation of the V Combinator</a>))), what about the Turing perfect ((<a href='http://cpplover.blogspot. jp/2013/10/blog-post_20.html'>bookworm: Turing perfection</a>))), and Turing perfection ((<a href='. This book gives you a bird's-eye view of the positioning of such topics.
 
 <iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=AAFFAA&fc1=000000&lc1=0000FF&t=nishiohirokaz-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=487311697X" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
 <a href="http://www.amazon.co.jp/gp/product/487311697X/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=487311697X& linkCode=as2&tag=nishiohirokaz-22">Understanding Computation - From simple machines to impossible programs</a>
 
 *1411009426* Keynote speaker at PyCon JP 2014
 A version of the presentation with questions and answers is here: <a href='http://www.slideshare.net/nishio/pyconjp-keynote-speach-japanese-version'>PyConJP Keynote Speech ( Japanese version)</a>
 Here is the English translated version: <a href='http://www.slideshare.net/nishio/pyconjp-keynote-speech-english-version'>PyConJP Keynote Speech (English version) version)</a>
 Video here: <a href='https://www.youtube.com/watch?v=3AVt6A7qaOg&list=UUxNoKygeZIE1AwZ_NdUCkhQ'>CH10 Opening~Keynote: Hirokazu Nishio - YouTube</a> (Japanese only)
 </body>

[Hatena Diary 2014-09-18 https://nishiohirokazu.hatenadiary.org/archive/2014/09/18]