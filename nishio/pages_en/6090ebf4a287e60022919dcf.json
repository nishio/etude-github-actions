Hatena2008-01-22
code:hatena
 <body>
 *1200971421*Scheme Commute
 >|python|
 >>> ConsList([])
 ()
 >>> ConsList([1])
 (1 . ())
 >>> ConsList([1, 2])
 (1 . (2 . ()))
 >>> ConsList([1, 2, ".", 3])
 (1 . (2 . 3))
 >>> ConsList([1, [10, 20], ".", 3])
 (1 . ((10 . (20 . ())) . 3))
 ||<
 
 We have made it this far.
 (1 . (2 . ()))) as (1 2), the side that displays (1 2) is not done yet. I wonder if there is a straightforward way to write this in a recursive call.
 
 >|python|
 class Pair(object):
     def __init__(self, car, cdr):
         self.car = car
         self.cdr = cdr
     def __repr__(self):
         return "(%s . %s)" % (self.car, self.cdr)
 
 class NULL(object):
     def __repr__(self):
         return "()"
 NULL = NULL()
 
 class ConsList(object):
     def __init__(self, xs=[]):
         if len(xs) == 0:
             self.v = NULL
         else:
             if isinstance(xs[0], list):
                 xs[0] = ConsList(xs[0])
                 
             if len(xs) == 3 and xs[1] == ".":
                 self.v = Pair(xs[0], xs[2])
             elif len(xs) == 1:
                 self.v = Pair(xs[0], NULL)
             else:
                 self.v = Pair(xs[0], ConsList(xs[1:]))
     
     def setv(self, v):
         self.v = v
         return self
         
     def __repr__(self):
         return str(self.v)
 ||<
 
 *1200994435* Apache
 
 It was closer than I expected.
 f:id:nishiohirokazu:20080122183346j:image
 
 *1200998091*R5RS
 Most of what you wonder about is written in the R5RS if you read it.
 The R5RS equivalents in Python are the <a href="http://www.python.jp/doc/2.4/lib/lib.html">Python Library Reference</a> and <a href="http://www.python.jp/doc/2.4/ ref/ref.html">Python Reference Manual</a>.
 What would be the equivalent of R5RS in Haskell? Is <a href="http://www.sampou.org/haskell/report-revised-j/index.html">The Haskell 98 Language Report</a> enough?
 
 *1200998536* tail recursive
 >>
 Scheme implementations are required to be authentically tail-recursive.
 <<
 
 Because. It's not Scheme if it doesn't implement tail call optimization, apparently. I wonder if I can implement it.
 I made call/cc when I implemented Unlambda, but I'm not sure if it should be like that. Passing a continuation each time and calling the continuation at the end...is that called CPS?
 
 Oh, and I also noticed that "numeric constants, string constants, character constants, and boolean constants are evaluated "to themselves." I just realized that I'm converting "123" to 123 at the time of evaluate, which is not correct. It should be converted to an integer object when the tree is parsed...
 
 *1201012417*Slope
 
 interesting
 f:id:nishiohirokazu:20080122233321j:image
 
 *1201020081*Re: Functional programming approach (3)
 Functional Programming Approach (3) - lethevert is a programmer
 http://d.hatena.ne.jp/lethevert/20071014/p2
 
 Chewing....
 
 It's hard to grasp that the scope switches, so I replaced it with a function call.
 
 >|python|
 class RandState(object):
     def __init__(self, x, y, z, w, t):
         self.x, self.y, self.z, self.w, self.t = x, y, z, w, t
 
     @staticmethod
     def new ():
         return RandState(123456789, 362436069, 521288629, 88675123, 1)
 
 def rand(r):
     t =(r.x ^ (r.x << 11)) & 0xffffffff
     x = r.y & 0xffffffff
     y = r.z & 0xffffffff
     z = r.w & 0xffffffff
     w = (r.w ^ (r.w >> 19)) ^ (t ^ (t >> 8)) & 0xffffffff
     return w, RandState(x, y, z, w, t)
 
 r = RandState.new()
 i, r = rand(r)
 print i #=> 3701687786
 i, r = rand(r)
 print i #=> 458299110
 
 def print_first_and_return_second(args):
     print args[0]
     return args[1]
 
 print_first_and_return_second(
     rand(
         print_first_and_return_second(
             rand(
                 RandState.new())))) # same output
 ||<
 
 Even though it looks like you are putting them in the same variable named r, that is because the first r is the second print_first_and_return_second's args[0] and the second r is the first pri.... .nd's args[0], so it is not "the same variable".
 
 *1201022545*Re: Function programming approach (6) 1st half
 Functional Programming Approach (6) - lethevert is a programmer
 http://d.hatena.ne.jp/lethevert/20071027/p1
 
 Chewing.
 I thought you were making an infinite list in Python.
 Python's infinite list is different from an infinite list in the context of a functional language, of course, because a Python infinite list is "an object that changes its internal state, returning the next value each time next is called.
 
 The LazyList class doesn't really look like a list, but it is in essence "something that delays evaluation until the first time __next__ is called". I guess you didn't want to mention the word "thunk" from the description flow, but I'm just trying to chew myself out, so I'll change it to thunk.
 
 >|python|
 # -*- coding: cp932 -*-
 class Thunk(object):
     def __init__(self, func):
         self.is_defined = False
         self.func = func
     def __call__(self):
         if not self.is_defined:
             self.value = self.func()
             self.is_defined = True
         return self.value
 
 def one():
     "When rated, it shouts "ONE!" and returns 1."
     print "one!"
     return 1
 
 t = Thunk(one)
 
 print t()
 # one!
 # 1
 
 print t()
 # 1
 ||<
 
 and a delay list can be written as shown below.
 
 >|python|
 def repeat(n):
     "Delayed list that repeats a given number of times."
     def f():
         return (n, Thunk(f))
     return Thunk(f)
 
 ls = repeat(1)
 x, ls = ls()
 print x # 1
 x, ls = ls()
 print x # 1
 
 def count(n):
     "Delayed list counting up from a given number."
     def f(m):
         return (m, Thunk(lambda: f(m + 1)))
     return Thunk(lambda: f(n))
 
 ls = count(1)
 x, ls = ls()
 print x # 1
 x, ls = ls()
 print x # 2
 ||<
 
 By the way, repeat and count are in the infinite list that comes standard with Python: <a href="http://www.python.jp/doc/2.4/lib/itertools-functions.html">5.15.1 Itertool functions</a>. name.
 
 -----
 
 Ah, I see, I would think ls is list-like, but it's not, it's "the next value in the list (but not yet evaluated)".
 
 >|python|
 next = count(1)
 x, next = next()
 print x # 1
 x, next = next()
 print x # 2
 ||<
 
 You don't know if there is a next one until you evaluate it; you don't know if there is a next one until you call next.
 
 -----
 
 Second half. The original Thunk was supposed to return None implicitly without doing anything when next() returned None (i.e., "no more list left"), so I tried to make it all match that, but for readability, it might be better to explicitly return None. Incidentally, Python has an exception called StopIteration, so I might as well return it without throwing it.
 
 >|python|
 def mapL(func, next):
     def f(next):
         v = ls()
         if v:
             x, next = v
             return func(x), Thunk(lambda: f(next))
 
     return Thunk(lambda: f(ls))
 
 def takeL(n, next):
     def f(n, next):
         if n <= 0:
             return None
         v = next()
         if v:
             x, next = v
             return x, Thunk(lambda: f(n - 1, next))
 
     return Thunk(lambda: f(n, next))
 
 def forceList(next):
     ret = []
     v = next()
     while v:
         x, next = v
         ret.append(x)
         v = next()
     return ret
 
 print forceList(takeL(5, count(5)))
 # [5, 6, 7, 8, 9]
 ||<
 
 >|python|
 def groupL(n, next):
     def f(next):
         ret = []
         for i in range(n):
             v = next()
             if v:
                 x, next = v
                 ret.append(x)
             elif ret:
                 return ret, Thunk(lambda: v)
             else:
                 return v
         else:
             return ret, Thunk(lambda: f(next))
 
     return Thunk(lambda: f(next))
 
 print forceList(takeL(3, groupL(3,count(5))))
 # [[5, 6, 7], [8, 9, 10], [11, 12, 13]]
 ||<
 
 -----
 
 I see, so the code was like that in order to say in (7) that random numbers are also an infinite list. Well thought out...
 
 -----
 
 Wow, (8) changes the name to Thunk!
 
 >>
 This code returns 3 instead of the delayed list when next(x) is executed. This can be thought of as delaying the call of the computation 1 + 2 until next() is called. Such a data structure is generally called a thunk. The above LazyList, rewritten as a Thunk, is shown below.
 <<
 
 *1201026322*Sleepy
 More and more things I don't understand every day.
 - <a href="http://ja.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%9A%84%E6%84%8F%E5%91%B3%E8%AB%96">Operational semantics - Wikipedia</a>
 - <a href="http://d.hatena.ne.jp/m-hiyama/20080116/1200468797">CPS (Continuous Passing Scheme) conversion explained in JavaScript, Nani, it's not a big deal - Masayuki Hiyama's Chimera Breeding Chronicles</a>.
 - <a href="http://d.hatena.ne.jp/m-hiyama/20080117/1200530398">Why CPS (Continuous Passing Scheme) Conversion Flips Over - Masayuki Hiyama's Chimera Breeding Journal</a>.
 - contravariant conjunction
 </body>

[Hatena Diary 2008-01-22 https://nishiohirokazu.hatenadiary.org/archive/2008/01/22]