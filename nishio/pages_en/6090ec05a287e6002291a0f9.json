Hatena2010-08-24
code:hatena
 <body>
 *1282660794*Python tinkering
 I'm <a href='http://d.hatena.ne.jp/nishiohirokazu/20100815/1281831565'>tinkering with Ruby</a>, which unexpectedly started showing tokens entered interactively when trying to display the generation of an object. I thought, "Wouldn't it be nice to be able to actually run a programming language from a string of code through a sequence of tokens, a syntax tree, and bytecode when teaching a class on "Programming languages are run from a string of code through a sequence of tokens, a syntax tree, and bytecode", and so on....
 
 >||
 build$ PYTHON_AUTODIS=1 ./python.exe
 Python 2.7rc2+ (trunk:82245M, Aug 24 2010, 23:25:27) 
 [GCC 4.2.1 (Apple Inc. build 5659)] on darwin
 Type "help", "copyright", "credits" or "license" for more information.
 >>> 1
 ===== DIS =====
   1           0 LOAD_CONST               0 (1)
               3 PRINT_EXPR          
               4 LOAD_CONST               1 (None)
               7 RETURN_VALUE        
 ===== END DIS =====
 1
 >>> x = 1  
 ===== DIS =====
   1           0 LOAD_CONST               0 (1)
               3 STORE_NAME               0 (x)
               6 LOAD_CONST               1 (None)
               9 RETURN_VALUE        
 ===== END DIS =====
 >>> x + 1
 ===== DIS =====
   1           0 LOAD_NAME                0 (x)
               3 LOAD_CONST               0 (1)
               6 BINARY_ADD          
               7 PRINT_EXPR          
               8 LOAD_CONST               1 (None)
              11 RETURN_VALUE        
 ===== END DIS =====
 2
 ||<
 
 Mm-hmm. It's nice.
 
 However, the display of the syntax tree did not work.
 
 >|python|
 >>> 1
 ===== AST =====
 <_ast.Interactive object at 0x100492150>
 ===== END AST =====
 1
 ||<
 
 I wanted it to be like this.
 
 >|python|
 >>> import compiler
 >>> compiler.parse("1")
 Module(None, Stmt([Discard(Const(1))]))
 >>> compiler.parse("x = 1")
 Module(None, Stmt([Assign([AssName('x', 'OP_ASSIGN')], Const(1))]))
 >>> compiler.parse("x + 1")
 Module(None, Stmt([Discard(Add((Name('x'), Const(1))))]))
 ||<
 
 See the changes here: http://gist.github.com/547651
 
 So the internal parse tree that comes across to run_mod is not an easy-to-read parse tree that can be made with compiler.parse or something. So, how do you make the interconnections, or do you make them directly from the string before it becomes an internal syntax tree? You might think the latter would be easier, but from a cursory reading, no one has the entire input string because the tokenizer chops it up every time a line is entered. I guess I'll try to keep it on my own.
 
 Well, I'll continue in a moment.
 </body>
 <comments>
 <comment>
 <username>jbking</username>
 <body>PyPy-like deja vu. </body>
 <timestamp>1283156074</timestamp>
 </comment>
 </comments>

[Hatena Diary 2010-08-24 https://nishiohirokazu.hatenadiary.org/archive/2010/08/24]