Hatena2010-07-26
code:hatena
 <body>
 *1280161627*Leverage memo: programming language concepts and structures
 <a href="http://www.amazon.co.jp/gp/product/4894717700?ie=UTF8&tag=nishiohirokaz-22&linkCode=as2&camp=247&creative=7399& creativeASIN=4894717700">Concepts and Structures of Programming Languages</a>. I borrowed this book from id:yugui before I wrote the manuscript, but I wrote the manuscript by my memory and momentum without reading it. I borrowed it from id:yugui before I wrote the example manuscript, but I wrote it from memory and on the spur of the moment without reading it. So I made a leverage memo before returning it.
 I'll get around to pulling the list of references later today because it's late and I'm sleepy.
 <hr>
 The Mariner I unmanned Venus probe was blown up 290 seconds after launch on July 22, 1962. Losses are estimated at $18 to $20 million due to the missing NOT.
 In the 1950s it was believed that efficient programs could only be created by people writing machine language. Fortran challenged this belief.
 The UNIX kernel, initially written in assembly language, was rewritten in 1973 with the C programming language. Advantages were "new users and programs," "portability," and "readability" Ritchie [1978] ((Dennis M. Ritchie The Evolution of the Unix Time-sharing System http://cm.bell-labs.com/cm/cs/who/ dmr/hist.html ))
 BNF Naur used BNF (then Backus Normal Form) for the Algol60 report.
 In early Fortran, variables beginning with I through N were of type int and all others were of type real, and it was not possible to add, subtract, or multiply different types. Later, when calculating between real and int, int was forced to be converted to real.
 Language design in the 60s was all about how to improve on Algol60. The use of BNF to specify syntax is also a tradition from Algol. However, Algol had only arrays as data structures.
 Wirth [1971] ((The Programming Language Pascal. Acta Informatica, 1, (Jun 1971) 35-63. also in Programming Language Design, A.I.Wasserman, Ed., IEEE Computer Society Press, 1980.)
 Modula-2 "included all aspects of Pascal, but extended it to have an important modular concept." It "ensured that every structure began and ended with a keyword."
 "In addition to the features provided by C, C++ provides the flexible and efficient ability to define new types" Stroustrp [1986] ((The C++ Programming Language Addison-Wesley, ISBN 0-201-88954-4 and 0-201-70073 -5.)) The new types are defined using classes borrowed from Simula67.
 The main difference between today's C and the C of 1972 is today's strict attitude toward type checking. Today, a pointer to one type can no longer masquerade as a pointer to an integer or another type.
 Assignment operators: In C, you can write assignments in expressions (not in Pascal)
 Knuth [1974]((Structured programming with go to statements (1974) http://pplab.snu.ac.kr/courses/adv_pl05/papers/p261-knuth.pdf)) states that the harmfulness of goto was first published by Naur [1963a] and made popular by Dijkstra [1968a].
 In Lisp, dynamic scope was traditionally used. Recent Lisp tends to use lexical scope. --- I thought it was "traditional" only in ancient and very early Lisp (and EmacsLisp). We were born after dynamic scope was over, children who never knew dynamic scope~â™ª
 Value calls: pass right-hand side values, reference calls: pass left-hand side values, name calls: pass the text itself while avoiding name collisions --- this concise summary is an eye-opener!
 Early Fortran did not check whether real reference parameters were assignable. As a result, swap(1, 2) sometimes exchanged the constants 1 and 2. Some languages avoid this problem by using value calls when an expression without a left-hand side value is specified as a real argument.
 C macro preprocessor ignores "name collision" name calls; Algol60 name calls are ok because they change local names when they collide.
 A module is a program divided into two parts of moderate size, one part of which is publicly available and the other part is an internal state that is not publicly available.
 True abstract specifications are difficult to achieve. Implementation hiding, encapsulation, and representation independence allow the private part to be changed without external influence.
 Modula-2 modules = visibility + initialization Cannot access across module boundaries without explicit import/export.
 An opaque export is an export of the type name only (i.e., no components are shown). Only assignment, equivalence checking, and other operations that are explicitly exported can be used. --- This is also why you can't access the internals of Haskell's IO monad.
 Basic/derived types in C++ are more generalized than super/partial types (subtypes). private inheritance prevents derived classes from becoming partial types.
 Lisp, a list processor, has its origins in an extension of Fortran called FLPL (Fortran List Processing Language), which did not have recursion and did not allow conditions to be written in expressions.
 Concurrency in programming languages and parallelism in hardware are two independent concepts. Hardware operations are said to be parallel when they overlap in time. Operations on a source text are said to be concurrent if they can be executed in parallel, but not necessarily in parallel. --- This is the easiest explanation of the difference between parallel and concurrent that I have ever heard!
 A notation similar to BNF was used by the ancient Indian linguist Panini around 400-200 BC to describe the complex grammar of Sanskrit Ingerman[1967].
 
 <iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=AAFFAA&fc1=000000&lc1=0000FF&t=nishiohirokaz-22&o=9&p=8&l=as1&m=amazon&f=ifr&md=1X69VDGQCMF7Z30FM082&asins=4894717700" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
 </body>

[Hatena Diary 2010-07-26 https://nishiohirokazu.hatenadiary.org/archive/2010/07/26]