Programs that cannot be composed of reductionist
	Possibly incorrect to try to structure the program in a [reductionist] way in designing it.
 [Systems Thinking] [Network of Interdependence] Seeing the Whole as It Is
 Scrapbox Implementation Process
 Splitting [into modules] in [design] is a traditional approach
 A straightforward approach in the design of physical products, since the components were physically localized
 [Modular and Integral]
 Software components are not localized in their interrelationships.
 The [concept of module] in software was born due to [cognitive limitations] of human beings.
	This is about the 70's?
 Modularity is inferior in global performance.
 Appropriate modularity is determined by tradeoffs with design and maintenance costs
 If the human cognitive side is to be enhanced by software, etc., the appropriate modularity should be more integral than the state that [flesh and blood humans] are designed for.
 ã€€[Software enhancement of humans makes them more integral].
