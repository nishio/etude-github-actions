Hatena2010-10-16
code:hatena
 <body>
 *1287216761*I've been playing an interesting game of Lego.
 Creationary" is a game of creativity.
 
 <script src="http://www.gmodules.com/ig/ifr?url=http://4.latest.ikunozama.appspot.com/gg/def.xml&amp;up_bgcolor=AAFFAA&amp;up_asin=B001U3Y5XE&amp;up_nation=UK&amp;synd=open&amp;w=250&amp;h=240&amp;title=amazon.co.uk%E4%BE%A1%E6%A0%BC%E6%83%85%E5%A0%B1%3A+%E3%82%A4%E3%82%AF%E3%83%8E%E3%82%B6%E3%83%9E&amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;output=js"></script>
 
 Let me briefly explain the rules. A theme is given by cards and dice, and you have 3 minutes to express that theme with LEGO. The first person to guess it, except for the person who is making it, gets a point. The first person to guess correctly and the first person to make it gets a point. The person with the highest score after several rounds wins. The time limit of "3 minutes" was set at random, so it may be increased or decreased as desired.
 
 and the rules are very simple, but since what we use for expression is Lego
 
 f:id:nishiohirokazu:20101003184736j:image f:id:nishiohirokazu:20101003185115j:image
 How do you describe the moon or the lion? The game is to solve this problem in three minutes. And there are not an inexhaustible supply of Legos. The number of LEGOs is rather small, so you will have to think hard.
 
 f:id:nishiohirokazu:20101003212557j:image
 
 This is a water ski I made. I thought I did a good job. I had a hard time getting the doll to hold the black string-like parts, but I think it probably solved the problem before I finished putting them on.
 
 f:id:nishiohirokazu:20101003213146j:image
 
 Here is the ropeway I got right. It is well made. Looking at the completed form, anyone would recognize it as a ropeway, but I answered when I saw the pillars facing each other and the rope being passed between them. Because it is a genre of vehicle.
 
 f:id:nishiohirokazu:20101003203752j:image
 
 Someone who made this with the theme "elephant" got a good laugh, saying, "There are more decent ways to make an elephant," but in any case, it is justice if the intention is conveyed. This one was also justified because it conveyed the idea that it was an elephant. I'm sorry, but I was DIS'd when I saw this one and thought it was terrible.
 
 f:id:nishiohirokazu:20101003222610j:image
 
 The seahorse I made. How can you make a seahorse out of LEGO? It's hard to make a seahorse with Legos! (By the way, I think this is the most difficult card. I think this is the most difficult card.)
 
 Still, the seahorse was properly identified as a seahorse, so that is justice. There are not so many creatures that grow vertically in the sea.
 
 f:id:nishiohirokazu:20101003224227j:image
 
 It's a great idea, like "a building with a monk -> temple" without the hair.
 
 f:id:nishiohirokazu:20101003222956j:image
 
 The number of blocks is limited, so it is not always possible to have them in the same color. But there are a lot of variations in shapes. I want to use that shape, so I use this color - but I don't want to give meaning to the color, so I use different colors! And so on.
 
 f:id:nishiohirokazu:20101003230343j:image
 
 Since the last subject was a laser gun, everyone started to make their own laser gun after the event was over: the
 
 f:id:nishiohirokazu:20101003230553j:image f:id:nishiohirokazu:20101003230700j:image 
 f:id:nishiohirokazu:20101003230750j:image f:id:nishiohirokazu:20101003230921j:image
 
 You can see the rich variation in the parts.
 
 I think this is a very interesting game that can be played by three people, has a sense of urgency due to the time limit, is not too time-consuming with a quick turnaround, but tests creativity rather than monotonous work.
 
 <script src="http://www.gmodules.com/ig/ifr?url=http://4.latest.ikunozama.appspot.com/gg/def.xml&amp;up_bgcolor=AAFFAA&amp;up_asin=B001U3Y5XE&amp;up_nation=UK&amp;synd=open&amp;w=250&amp;h=240&amp;title=amazon.co.uk%E4%BE%A1%E6%A0%BC%E6%83%85%E5%A0%B1%3A+%E3%82%A4%E3%82%AF%E3%83%8E%E3%82%B6%E3%83%9E&amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;output=js"></script>
 
 *1287220975*30-40 years later
 I feel like I should be writing a draft instead of writing a blog, so I'm just running through my thoughts so I don't forget them:)
 
 >>
 Don't worry, most of the languages in use today will be eradicated to the level of "I remember when there used to be such a language" in another 30 to 40 years.
 <<
 
 The reason I say 30-40 years is that after that long, the way we enter programs will likely change. Just as we once changed from punch cards to keyboards.
 
 When the development environment changes, a language that pursues "ease of writing" in the current environment will lose its appeal. Therefore, if other aspects of the language do not have value that will remain 40 years from now, it is only natural that they will be eliminated.
 
 >>
 moriwaka:
 @nishio I agree with you rather a lot, but I'd like to unlock the secret of Fortran, COBOL and C's longevity.
 <<
 
 If I understand correctly, it is not "having features that people who are willing to learn a new language would like". Its value will fade in less than 40 years. Those people will quickly move on to another language. The opposite. The secret of longevity is to become the de facto standard in a particular domain so that it will be learned by those who "don't want to learn a new language and don't want change.
 
 That kind of niche-top strategy would be more likely to succeed if the domain were smaller. So it is less likely that regular expressions will be extinct than it is that Ruby and Python will be extinct in 30-40 years.
 
 C/C++ will survive unless the domain where speed is important disappears. Unless a language that is easier to write and faster than C appears. Other de facto standard languages will survive until the generation of hard-headed people is replaced. Readable languages will survive as long as there is demand for maintenance of applications written in those languages. But what about ease of writing? That's a very ephemeral value. It only benefits the writer. Once the writing is done, that benefit is over.
 
 There is no particular conclusion because it is a scribble.
 
 **1287228301*Reviewing Object Oriented in JavaScript.
 >|javascript|
 function Foo(){
   this.x = function(){}
 }
 
 new Foo().x === new Foo().x //-> false
 ||<
 
 Well, that's what happens. This way of writing would create as many entities of method definitions as there are instances.
 
 >|javascript|
 function Foo(){
 }
 
 Foo.prototype = {
   x: function(){}
 }
 
 new Foo().x === new Foo().x //-> true
 ||<
 
 Do we do it this way?
 
 P.S. I was told by id:TAKESAKO that prototype.x = function... is better than prototype.x = function... because it will disappear if the prototype already has a value. I was told by id:TAKESAKO that it is better to use
 </body>
 <comments>
 <comment>
 <username>Zo</username>.
 <body>Aside from COBOL, there are other factors that remain with C and Fortran besides whether the users are hard-headed or not. <BR>Specifically, unless the architecture of computers is fixed or there is a paradigm-shifting innovation in compiler development, only compilers for "languages with relatively light language specifications and many users" will inevitably be supplied due to cost. At that time, C and Fortran, which have abundant source-level assets and optimization know-how in OS and numerical computation, are likely to be selected, and as a result, these two languages are in high demand as "standard languages. </body>
 <timestamp>1287226777</timestamp>
 </comment>
 </comments>

[Hatena Diary 2010-10-16 https://nishiohirokazu.hatenadiary.org/archive/2010/10/16]