Intellectual Production of Engineers Before and After
2019-02-15
	[Developer Summit 2019 https://event.shoeisha.jp/devsumi/20190214/session/1976/]
	[発表資料 https://www.dropbox.com/s/8m073ir1wt3qe4q/%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE%E7%9F%A5%E7%9A%84%E7%94%9F%E7%94%A3%E8%A1%93%E3%83%93%E3%83%95%E3%82%A9%E3%83%BC%E3%83%BB%E3%82%A2%E3%83%95%E3%82%BF%E3%83%BC.pdf?dl=0] PDF
	2019-03-12 Transcription pasted between slides.

-----
[https://gyazo.com/0bb1e7ffe3ca76b7389a95631ac20b43]
Saeki: Good morning, everyone. My name is Saeki and I am the editor of Shoeisha's Codezine. Thank you very much for coming to Technoparts Summit 2019. We have had a total of over 4,000 people register for this two-day event, making it one of the largest ever. Thank you very much. As for the theme of this year's event, we have chosen "SHARE YOUR FUN". In the midst of the recent technological formation and the intense needs of society, I am sure that all engineers feel the importance of continuing to learn every day. The motivation to continue learning is not so much that you have to do XXX, but rather that you want to do XXX, and it is the enjoyment of excelling at what you do that drives you. I believe that there is a lot to be learned from the enjoyment that drives you. At this event, we will have a variety of speakers who will talk about the joys of software development, and I hope that everyone will take away some insights from their presentations and apply them to their development tomorrow. One more point. One more point. We would be very happy if you could share the fun you had using the Wi-Fi on your social networking sites and blogs. We would be very grateful if you could share the FUN you had using the Wi-Fi on your social networking sites and blogs, as we believe such feedback will be very encouraging to the speakers. Mr. Yasukazu Nishio from Cybozu Labs will be speaking on the topic of "Intellectual Productivity of Engineers" at the beginning of the session. Although not our company, Gijutsu Hyoronsha published a book of the same title last year, and I believe it is one of the best books published by Gijutsu Hyoronsha, and was nominated for the Engineer Book Award held yesterday. This time, I would like to ask him to talk about the essence of how to learn and output as an engineer. Please welcome everyone with applause. Mr. Nishio, please welcome.
会場：拍手
Nishio: Yes. I am looking forward to working with you. Mike: You're okay. This book, "The Intellectual Production Techniques of Engineers," was published by Gijutsu Hyoronsha, and I am very impressed with the open-mindedness of Shoeisha, as I had the opportunity to talk about it at their event. I'd like to talk about what happened before and after the book was published, what happened after the book was published, and what they are aiming to do after the book is published. I would like to talk about these things. The reason for this is that everyone knows what is written in the book because it is written here when they buy and read the book, but they don't often have a chance to hear about why you decided to write the book or something like that. So I thought it would be more interesting to focus on that kind of thing, and that is why I am going to talk about it this time. Thank you very much for your cooperation.

[https://gyazo.com/fb2d52e9f5f132aa9441142fef9d92a2]
	[The Intellectual Production of Engineers Author's official page]
	[The Intellectual Production of Engineers]
As I mentioned earlier, this book was published by Gijutsu-Hyohron Co. The book was a bestseller on Amazon 〓00:10:40〓 10 days before its release. I'd like to digress for a moment here, folks, but just for fun, when you look at the cover of this book, what do you think is the important part? It says at the top, "The Intellectual Productivity of Engineers," and below that, it says, "Learn, organize, and output efficiently. After that, it says in the middle black space, "Apply it to your environment to enhance your creativity," and at the bottom it says, "Learn to think in a way that will still be useful 10 years from now. I personally find this to be a very moving point, not because of the title or subtitle, but because of what is written on the belt at the bottom. The reason is that titles and subtitles are affected by various restrictions, but this part can be decided almost freely, so the most important thing to say can actually be put here. When I talk about the one in front of me, I'll say something like 〓00:11:28〓

[https://gyazo.com/9078c9895a8ae5a14117c0d7d3e8a674]
To return to the topic, this book, "The Intellectual Production Techniques of Engineers," was published in August of last year and was so highly acclaimed that it ranked 10th in the Ikebukuro main store of Junkudo, not only in technical books but in general books as a whole. I was particularly happy to hear that many non-technical people picked up the book at bookstores and commented that they learned a lot from it, even though they are not engineers themselves. In fact, in the 〓00:12:00〓Writing section, there were two comments from bookstore clerks who said they were bookstore clerks and found the book very interesting when they picked it up and read it. The title of the book is "Intellectual Production Techniques for Engineers," but I think I was able to write a book that is very useful not only for engineers but also for anyone who produces things and produces intellectual information.

[https://gyazo.com/fe302005b0c4c51c9652ff7da84f5d57]
Now, let's talk about before and afters. Let's get back to the story. This presentation is a "before" story of what happened before the book was written and how it came to be, and an "after" story of what happened after the book was released. The "after" is what happened after the book was released and what happened afterwards. I would like to talk about what happened after the book was released and what we are aiming to do afterwards.

[https://gyazo.com/aec3068a684940aeee7a4d6dc8c92220]
	[Technology Behind Coding Author's official page].
The book that led to the publication of this book was a book I wrote five years ago, "The Technology Behind Coding," which was published in April 2013 and is still a long seller five years later, This book is a long-selling book that is still selling five years after its release in April 2013. The book is about how the grammars of different programming languages were developed by comparing them. When you study only a specific programming language, you tend to get mixed up with grammars that are specific to that language, that are based on the local rules of that language, and that were created for reasons that make them not work unless they are structured in that way. Comparing multiple languages, why did you think it necessary for each language to have its own grammar, language features, and other specifications? Programming languages are created by human beings, so they have functions because the people who created them thought that these functions were necessary for some reason. This is how the programming language was created, in other words, the "before" part. This book focuses on the "before" part of the creation of a programming language.
[https://gyazo.com/41efe6238c919cf2776a1fbdc01aefd2]
So there's a question I had while writing this book. Why do I need to learn it in the first place? I am writing this book because I thought it would be fun to compare and learn programming languages, and while I was writing the book I thought, "No, wait a minute. I'm writing this book because I enjoy it, but what is the need for the reader to learn it? There's no explanation as to why they need to learn it. I realized that while I was writing the book, I had no explanation as to why I was learning it. This was a surprise to me. You deny the significance of the book while you are writing it. I thought to myself, "Wait a minute. I need to explain it better. I need to understand why I need to learn. Why do we need to understand? I started thinking like, "What the hell is understanding anyway? One answer I came up with was

[https://gyazo.com/c9480fef5d9f52943ce2db0d468eaf2f]
	[Accelerated Learning]
He said this is to accelerate future learning. 〓〓00:14:59〓You can learn new programming languages in the future by comparing programming languages and understanding common patterns, common structures, and necessities that are common to multiple languages in general, not just one particular language. In this article, I also introduce Flash, which was born at one time but has since declined, and APL, which was very popular at one time but is now no longer a shadow of its former self. I am writing about the flow of history, but this is a story that will repeat itself in the future, and languages that are popular now will naturally decline, and new languages will emerge. No one can predict whether the programming industry itself will continue to grow or shrink. I think it is necessary to accelerate learning new things as they emerge.

[https://gyazo.com/b9c3963315dc76300ff72d691e48e745]
I think everyone has heard it so often that it is important to learn that you could almost hear it in your ears. People who don't learn don't grow at all, but those who do learn grow. I am sure that you have heard this kind of thing to the point that your ears are like calluses, and you are thinking, "Of course, this is the way it should be...

[https://gyazo.com/5b98ae578ae908d800de7daa19ae9c17]
	[who accelerates learning].
Compared to those who are accelerating their learning, those who learn and those who do not learn are not so much 〓00:15:52〓 Compared to those who are accelerating their learning, those who learn and those who do not learn are not so different. I think that if we don't focus on how we can make our learning more efficient, it will lead to a big difference in the long run, decades from now.

[https://gyazo.com/97b9801d5246ceaed8cc924195a32af6]
	I wrote about it in detail in [Why Invest in Intellectual Productivity?
	[生産性の向上]
This learning is accelerated. The story of increasing productivity can be likened to the economics of hand-knitting socks. However, sock-knitting machines were invented, and now factories can produce large quantities of socks by installing sock-knitting machines and making socks at the same time. This was an improvement in sock production capacity. As a result, socks made at home by hand became only a few premium items, and most of the socks you wear today are made in factories. Most of the socks you wear today are made in factories. You are wearing those socks. In the same way, the 〓00:16:53〓 programming language has increased the production capacity of programs. Compared to the old days when we used to write in machine language when there were no programming languages, FORTRAN has been created and 〓00:17:02 〓 has been created. So the productivity of programming has really increased. I think that FORTRAN, the 〓00:17:08〓, an old-fashioned language, was the axis on which new languages, such as scripting languages and languages that run on the browser, which people now consider to be modern, were born, and they were able to build on the productivity of the past languages. These new languages are the result of building on top of the productivity of past languages. It is only natural that the languages that are popular today will be replaced by more productive languages in 10 to 20 years' time. I think it's probably easier to understand for everyone here, but which do you prefer, compiling or non-compiling languages? Do you prefer languages that compile? Do you prefer languages that don't compile? The ratio is pretty much 50/50, or 60% of those who don't compile and 30% of those who do. I'm sorry. I'm sorry, I didn't use the right example. There was a time when we compiled all the time, and then there was a time when we didn't compile, and now we are in a period of 〓00:18:21 where we can talk more about languages that compile, and that is good. I'm sorry. I'm a little confused, but to return to what I wanted to say, languages are changing. New languages and new concepts will be born, and they will change in 5 to 10 years, so it is necessary to learn them. And we need to accelerate our learning in order to master them.

[https://gyazo.com/50f14fa4183a25e508ac0e9a7da153c2]
New information will always emerge, and my future self will have to catch up with it. If this is the case, it is necessary to increase the productivity of learning to catch up with the new information. This increase in learning productivity will make a big difference in the long run. The difference will be the same as if you were wearing machine-made socks instead of hand-knitted socks.

[https://gyazo.com/adc0e16d1f9172e090cf900bb90991c9]
	[Knowledge, Capitalism, and the Technologist Condition]
I wrote a chapter as Chapter 0 that involved economics and things like that. I wrote a chapter 0 in a book called "The Technology Behind This Coding". Then it was rejected. The reason for this is that it was lined up in bookstores. People usually open the book and start reading from the beginning. It is a technical book that talks about economics at the very beginning. The editor said to me, "I don't think this is a good idea. The editor said, "I don't think this is a good idea. If you delve into the question of what knowledge is, you end up with philosophy, and if you delve into the question of what productivity is, you end up with economics. I was forced to delete this white paper because of the 〓00:19:34. Fortunately, I discovered it in 2017 and put it online, so you can read it by searching for "Knowledge, Capitalism, and the Technologist Condition". I'll let you know how to get to it later by Googling it on the Internet, so if you are interested, I hope you will read it.


[https://gyazo.com/c599d95454a6d575da7206ee2f49a3a8]
So, to return to the story, you decided to include the rejected text as a column because you thought it was a waste of space. About two weeks before the end of the project, I was asked, "There are some pages that are half-empty after typesetting. About two weeks before the end of the project, I was asked, "Well then, the manuscript that was rejected is not good enough for the column. So I said, "Well, let's pick from the rejected manuscripts," and I cut out some of the pages and inserted them as columns.

[https://gyazo.com/1658576287010dfd39d75bf85e1b05c1]
	[What do we learn how?"]
	[What do we learn? 2: Three major input methods].
	This area is discussed in [Why are you interested in learning how to learn?] I gathered more information in
I also suggested that it would be a good idea to put the slides of what I thought was missing in the book on the book's official page. You wrote these two "How to Learn What?" and the sequel to those two, "The Three Major Input Methods," which you wrote. Each of these was published on SlideShare, and they were read quite a bit with 53,000 page views and 25,000 page views, respectively, making them interesting 〓00:20:44〓full presentation materials. What happened next after we published this public document was that we received a lot of feedback like, "The column is interesting," or "This presentation material is interesting," and so we decided to make it public.
[https://gyazo.com/266807a01bd5126390446ab761bfdada]
	[Special Feature How Engineers Learn]
The editor of Gijutsu Hyoronsha asked me if I would like to write a feature article on WEB+DB with this content. I wrote a feature article on this subject in WEB+DB PRESS Vol. 80, which came out exactly one year later, in April 2014, called "How Engineers Learn. The subtitle of the feature was "How Engineers Learn," and it included the same kind of content that I was talking about earlier, about efficiently acquiring knowledge and linking it to results. I wrote this. This article is also available online, so if you are interested, you can search for it. I'm not sure if you can find it in the book, but it's almost all in the book, so if you read the book, you'll be fine. What are the important points I wrote about in this feature?

[https://gyazo.com/186157987c23b2d5183f727cebf64271]
	[Output]
There are two styles of study: reading books and working with one's hands. I said that it is not good to have one or the other. When people hear the word "study," they tend to think of reading books and doing their best to read and input, input, input. But if you ask me how I actually learned programming languages, I would have to say that I learned by reading books all the time without tapping the keyboard.
Generally, when you write a program and run it, you get a different result than what you expected, and you think, "Oh, that's not what I expected! Something is different from what I expected. What's different? I think everyone has learned to write programming language by repeating this cycle over and over again. I think that "working with your hands" = "outputting". Why is that?

[https://gyazo.com/884cf7c8204d4c1739602c8ae79ff160]
	[理解は仮説]
This feeling of understanding is a hypothesis. Whether or not you really understand something has nothing to do with whether or not you feel like you understand it. So even if you think you understand, try to write programming based on that understanding and execute it. If you understand it correctly, it 〓00:22:40〓回, but if you don't understand it correctly, the programming will behave differently than you expected. When a program you wrote behaves differently from what you expected, it means that your understanding was wrong. You now have a chance to improve your understanding. You have a chance to learn. This is a complete process of writing a program based on a hypothesis, looking at the program and seeing how it behaves, and then confirming that your hypothesis was incorrectly understood and improving it.

[https://gyazo.com/ca022f681a42e01347a4c755d5e31960]
	[Proof of knowledge by action].
It is just like hypothesis testing in experimental science. In experimental science, we also formulate a hypothesis. We conduct an experiment to test that hypothesis. The results of the experiment are observed to see if the hypothesis being tested is correct or if it contradicts the hypothesis. Science has developed by repeating this comparison. So, you can think of it as if you are constructing science in your brain. Verify knowledge with codes. By repeating this cycle, you will learn to verify what is correct knowledge and whether your understanding is correct or not by taking action. The theme of this event was "FUN Fun," and I forgot to include the topic of fun in the slides, but as I mentioned here, I thought it might work, and it was actually a lot of fun when it worked as I had hoped. I forgot to put the theme of this event on the slide. It doesn't move. I wonder why. I wonder why. And then I think, "Oh, I see! I see. It was like this, so I should have done it this way." This is also a fun moment when you realize that you should have done this. It's fun to keep this cycle going. 〓00:24:14Reward? It's a 〓 cycle. Learning while having fun and enjoying yourself in this highly motivated state is overwhelmingly more productive than studying while reading textbooks out of a sense of disgust. So, how can we turn this cycle around? I believe that learning while having fun will have a huge impact on your long-term productivity and long-term learning efficiency.

[https://gyazo.com/d81a6bdfcf13ece1d68aebd003e362c1]
	[Lean Startup]

The next thing I want to talk about is the importance of keeping this cycle small, because if you spend a year experimenting and then find out the results a year later, it is very difficult to learn. Software engineers are very fortunate in this regard, because they can experiment immediately. You can write a program, run it, and then say, "Oh, I made a mistake! I made a mistake. Then I fix this part, run it again, and this time it works. You can do this in a day. Suppose you were a woodworker. You are studying to improve your woodworking skills. If you make a chair and it doesn't turn out because you made a mistake in cutting the wrong length of wood, or you wrote down the wrong piece of wood, you have to start all over again from the cutting point. If there is no wood in stock, you have to start all over again from where you bought the wood. Compared to this, software engineers are blessed. Compared to this, software engineers are blessed to be able to learn and enjoy this small cycle. We are in a very privileged position. Because it is a digital meta. Programming is. I think that the cycle of physical creation will become easier as more and more things like 〓00:25:32〓 will be created, but you are one step ahead of the rest of the human race, and you are in a very privileged position among human beings. Now, I wrote a feature article like this.

[https://gyazo.com/271f2ab618b08e8c522c2ae36329ba95]
Since this feature article was so popular, we are talking about making a book based on this feature article. This will take about May-November 2017, and we will be writing a chapter every 3 weeks. The reason for this is that I read something like 〓00:26:00 〓00:00 about how to turn it around, and I see! I want to try this. I was thinking, 〓00:26:07Deliberation in 3 weeks? It was pretty hard for me to try to do it in 〓. Here is what I wrote in 3 weeks. I think the text is a bit broken. It's also a bit of a meta-challenge to write about the intellectual property techniques I used when I wrote "The Techniques Behind Coding" and how I went about writing it. It's also a bit of a meta-challenge, but it's a book that is structured in such a way that the person to whom I give feedback writes the results of my observation of how I write. I am talking about how I wrote the book in chapters 5, 6, and 7. It's a meta kind of book. It's a meta kind of book. Writing this book itself is one of the examples of validation by action that I mentioned earlier.

[https://gyazo.com/9d92daba77faec257d6a53de6f7b2fab]
We talked about how important it is for learning to validate knowledge through action. I thought that the book I wrote on the techniques that support coding must have been a useful method for some kind of useful intellectual production, because the book has been selling well for five years. Then I thought, why not use that method for another book and write about the contents of the other book? That is the standard for this book. So, when I talk about a column article being made into a book, many people think that the content of the column article is copied directly into the book, or that it is diluted and put into the book, but in effect, the content of the column article is put into the first chapter, and the rest of the book is newly produced in a new format. The rest of the book is filled with the knowledge produced by this experiment.
When I say I will write a feature article for a book, people say, "Well, please write it in 12 pages. There is no way I can write it in 12 pages. This book is 250 pages long, and I tried my best to compress the 250 pages that I thought were not enough into a book that could be published. Now, I have about 25 minutes left, and the slides are about halfway through.

[https://gyazo.com/3bf6dd2c66db4d4351a9bd0eaba91484]
The title has changed a bit. What was originally a feature on "How Engineers Learn" is now titled "The Intellectual Production of Engineers. Why is this? I feel that the word "learning" tends to create the misconception that learning is a place to read books and input information, or that learning is something to be done by inputting information. However, as I explained earlier, I believe that the key to learning is to output and verify the results. The output is important, so there is output. By outputting and seeing the results, I have learned. Many people think that they should make a presentation after learning, or that they should output after learning. For example, many people think that they will give a presentation at a study group only after they have studied enough and become confident enough to give a presentation. If you think you will learn enough and then do it, you will never do it. So I emphasized that kind of output. I am sure that everyone has heard the phrase "output is important" so often that it is hard to hear it, but what exactly does output mean? But what exactly is output? For example, you give a 5-minute lightning talk at an IT study session. I think this is a relatively easy output. But if you have a hurdle in your mind, you may feel that even that is a hurdle. If this is the case, then we should start with smaller outputs, things with lower hurdles, and gradually work our way up to larger and larger outputs, and then we will be able to produce outputs. We need to work in this way. This book spends an entire chapter on the need to lower the hurdle for output. What I write about is, first of all, on a sticky note. The first thing he does is to write a sentence on a small sticky note, no more than 20 words. Whether you can write it or not will tell you whether you have the knowledge to output or not. If you look at the sticky notes that you have written, you can use 100% of your brain's CPU resources to combine the fragments of information, because the information will not disappear while you are thinking. If you try to think only in your brain, the fragments of information to be used as materials are stored and retained in your brain, which takes up CPU resources, so the brain resources that can be used for actual thinking are reduced. By reducing the 〓00:30:57〓 time required to remember information by writing it down and thinking about it while looking at it, your brain can invest more 〓00:31:07〓 in assembling the fragments of information and creating a structure. This is a method to improve your intelligence through technology. This is a method to improve your intelligence through technology.

[https://gyazo.com/a1716f73e438e3cb39cc16900c9d3ac6]
One more point. This was an experiment of sorts after I published the book, but more people than I expected were concerned about the "of" in the title. More people than I expected saw the title "Intellectual Property Techniques for Engineers" and interpreted it as "Intellectual Production Techniques for Engineers" and thought that people who are not engineers should not read it. I did not think there were that many. I don't think that 〓00:31:40〓 is only for Tokyo University students, and I don't think that the documentation techniques of foreign consultants should be used only by foreign consultants. I don't know why so many people think it is for engineers when I say "intelligent production techniques for engineers," but if you look at the response on Twitter, you will see that it is because the first half of the book seems to imply that while Tokyo University students and foreign consultants are special, engineers are not special, and that is why I think "intelligent production techniques for engineers" is not a book for engineers. I have seen the responses on Twitter and elsewhere, and it seems that the first half of the book is about how Tokyo University students and foreign consultants are special, but engineers are not. In reality, however, engineers are rather special.

[https://gyazo.com/e0d455ac40e5d2b8148aae8c82649638]
	For a long time, [concepts] were made using [words] and [tools] were made using [matter].
	With the birth of programming languages, mankind has the option to "[create] tools with words.
You have a very special existence in the history of mankind in terms of intellectual production. What kind of existence is the 〓00:32:23〓 or the thing that is produced using words is a thought, an idea, a concept, a 〓00:32:29 discussion? 〓 or something like that, it is a thought. On the other hand, things that are made using materials are tools, such as hangers, bicycles, factory machines, and so on. But with the birth of programming languages, mankind now has the means to create tools with words. We now have that option. This was only 70 years ago, and programming languages were born in the 1950s. With the creation of programming languages, the ability to produce software increased.

[https://gyazo.com/1d7982db75ec85143f4fe55a97ee5b0a]
The programming language itself is software. So you have improved the ability to make tools, and at the same time, tools are being made even more. Using an efficient language, an even more efficient language is created 〓00:33:10 Fade up? A 〓-like cycle is occurring. It is truly a cycle of acceleration. There were no programming languages a mere 80 years ago. Imagine everyone when there were no programming languages. How did we write programs? There were computers. We were doing what we wanted the computer to do, which was to execute a specific desired process. Then how did we make that happen? You reconnect the wiring of the gables. We would make a chart that said, "In order for this purpose to be calculated by this computer, we need to connect this wire to this wire," and we would take a bunch of cables and connect them by plugging this one here and this one here and this one here. That's what I was doing. It was physics. The 〓00:33:53 way of physics? 〓There was a 〓. Then it became possible to write programs with digital data. Software is now made of digital data.

[https://gyazo.com/73f8a178b91489a2555ee6878a2daa62]
How great an impact this has had on the history of mankind. There were many great philosophers and great academic teachers in history, say 300 or 500 years ago. There were a lot of smart people in the world, but none of them had any programming experience. This is an interesting point. The advent of programming had a great impact on mankind. It was almost certain, but the people who experienced it were in the later period. So, the people who have experienced it have only appeared in the period after 1950, after the last 70 years. So you are all in such a situation. That is a very special situation.

[https://gyazo.com/2aa3f7d109d6a1d1a7bb477b77fdff02]
	The story of the invention of the "version control system
		Prior to that, it was difficult to develop multiple branches in parallel that were expressed in words.

Things described by words are executed by non-human objects. This is special. Before computers, words written by words were read by humans and executed by humans. Now, non-human things are executing things described by words. What has become possible in this process? What happened with the development of computers and the like was that it became possible to search for and find vast amounts of information that could not be grasped by humans, from amongst the information written in words. You might search for 〓00:35:16〓 in the source code. If there is a search data engine that contains data from books and other sources, you can enter a search keyword there and the location of the book or book will come up in a flash. People search on Google, don't they? Almost on a daily basis. What is happening is that the computer is finding the ability to find out information from a huge amount of information that would never fit in the brain of a single [living] person. That state of increased intellectual capacity. I think it's a state of great equipment. It is a state of great enhancement. There is no philosopher here who has experienced this enhanced state. This is a very interesting situation. Moreover, since you are engineers who are dealing with digital data, you are different from engineers who are working on physical products. The biggest difference is that the editing process can be recorded, and it can be rewound each time it is viewed, because it is made using words. I am explaining this in the image of 〓00:36:17〓, but it is possible to do this. Until now, when philosophers were writing books on various philosophical ideas, it was not possible to cut off branches that could not be done in the current situation, or to cut off both branches for the time being, because there are two ways of thinking, one is "A" and the other is "B." This was not possible. It was not possible to do collaborative editing. What software can do, however, is to allow collaborative editing, to cut branches, to have multiple parts running at once, to make mistakes 〓00:36:48〓, and to merge if there is a branching problem. So, the 〓00:36:53〓, it's a story about how the human race has done some interesting things in the history of mankind. Time is running out fast when I talk about this kind of thing. But well, there is enough. There are 17 minutes left. I think you can already tell how much I enjoyed writing this book, but it is very interesting. We are living in interesting times, and we are blessed with interesting opportunities.

[https://gyazo.com/bb9f9d05f77e930e74514168c307fd71]
	[handle]: [metaphor of liquid in a container].
	[sticky note is not the body] [conceptual handle] [hook] to pull out "what has not yet been verbalized" under the water.

By writing this book, I am at least aware that thousands and thousands of engineers in Japan have an intellectual cycle going on inside them. Acceleration of that cycle is possible through technology. Acceleration is beneficial to one's life. That is the kind of 〓00:37:40〓 that you will receive. Moreover, I have seen a lot of comments on this book so far, but what I have been doing unconsciously, or rather, without words, is explained here. This is how the process is born. This is the kind of concept that existed in the past. I now have more words to use as a handle to observe, describe, and think about my own intellectual production, which is similar to mine in some ways and slightly different in others. This book has given me more words to use as a handle to observe, describe, and think about my intellectual production.
The figure here shows a whale being fished out of the water. The surface of the water is the borderline between what is verbalized and what is not. You have had many experiences in the intellectual production process of writing programs, writing texts, and so on, and you have a lot of your life experiences on the surface of the water, but you have not been able to put them into words and draw them out. But you are not able to put them into words and draw them out. But you are not able to put those experiences into words and drag them out. If a hook is attached to it, such as, "This is the word that describes my experience," then it is possible to pull it out. When a hook is attached to the book, you are able to verbalize your experience by pulling on the hook. This handle, or as I call it in the book, a handle, if you use the analogy of a fish, it would be more imaginative to hook it with a hook and catch it than to hook it and catch it. By including words that can be used as hooks or handles, we can make it easier for people to think. In the software industry, this is the same as design patterns. In the days when there was no such thing as a "mediator pattern," design patterns were more like the "〓00:39:17〓" than the "〓00:39:17〓" of design patterns, where a mediator was at the center and all communication was concentrated at each of these two points, and each of them worked together to create an efficient and manageable form of communication. I had to use a lot of words to explain that it was more like a form of communication that was efficient and manageable. Yes, it is. Yes, it is. It's better to implement it with the Mediator Pattern. So we can have a conversation like that. Words can improve the economy of thought, the efficiency of thought, and the efficiency of communication, thought, discussion, and so on. We were able to create this kind of language and this kind of book. Then, inevitably, the next thing that happens is that people start talking about how to use the functions of the book, or how to solve the problems they have been having by using the techniques described in the pages of the book. In fact, if you look at Twitter, you will find such things happening all over the place. In other words, the readers of this book will be able to improve their intellectual production by using the words in this book. It is a language that will improve your intellectual productivity in the same way that the invention of programming languages improved the productivity of programs. This is it. That is what is currently being observed 〓00:40:35 〓.

[https://gyazo.com/24480a307c3bf66bd8680d4435a6f8e8]
	[Intellectual Production of Engineers: A Summary of Reactions].
I was a little ahead of my time when I said that I wanted to verify the book through action, but I was not sure whether the methods I used in this book were only beneficial to me or not, or whether they would be beneficial to others as well. I wasn't sure if this was just beneficial to me or if it would be beneficial to other people as well. This was a hypothesis, and I started writing this book thinking that it might be beneficial to others, but this was just a hypothesis. I started searching for the book's title several times a week since its release to see all the reactions on Twitter. I have been searching for the book's title several times a week since its release and looking at all the responses on Twitter. I am very grateful to the many different people who have written blog posts on various topics, and I have read a blog post written by someone whose day job is writing, but who is not a programmer, and I thought it was really well written and very professional. People from various backgrounds in various fields have said many things about this book, and blog posts have been written about it. I think this is very interesting, and I think it is a validation that this book is beneficial to everyone.

[https://gyazo.com/4e0583976814df757adc76db7dda1053]
The reason why I mentioned the scrapbox is that software that supports intellectual productivity will continue to get better and better, as is the case with the scrapbox that is recording data. The scrapbox service is the service that I feel the most excited about and the service that I feel the most fun about. In terms of this event, I would say.

[https://gyazo.com/ba3ffd582cc867d5ecbbf1a80cd78291]
	[Scrapbox]
		[Stock in associations]
Unfortunately, the scrapbox was not in full use until August of 2005, which is after I started writing this book. If this book had been written a year later, I am sure that the number of scrapbox pages would have increased considerably. Such is the kind of tool this scrap box is. What exactly is this scrapbox? To put it simply, it is a tool to express information connections in the form of links. Wikipedia has pages, right? When you click on the link, you jump to the page. This is a state in which links are created between information without any connection. Wikipedia is a wiki like Wikipedia, but it is written by an unspecified number of people. Therefore, the local rule is to remove all subjective information and collect only objective facts, or not to write original information. On the other hand, when you use the Scrapbox, or when I put my own writings on the Scrapbox, I am sorry. I'm sorry, I skipped a bit in the order of the story. I'm sorry, I've skipped the order of the story,

[https://gyazo.com/20af6a4ae4269776f12f44b2c58a7a41]
	[Number and format of authors]
On the other hand, e-books, even though they are electronic, still retain the form and format of a book, don't they? One-dimensional. In my book, there are actually a lot of links, such as "This story is written in Chapter 4" or "This book is written in the column on page xx", but it is not easy to follow them. But, don't people read them in the order they are written in the book? This is a paper book, but paper books are suitable for reading in that format. We have become accustomed to the input pattern of reading in one dimension. On the other hand, you have read Wikipedia, haven't you? When you click on a keyword you are interested in while reading, the explanation for that keyword appears, and when you click on an unfamiliar word in the explanation for that keyword, the explanation for that word appears again, and you follow it in a roundabout way. I wondered, "What is this? The answer to your curiosity or question will appear, and learning through this cycle is a lot of fun, don't you think? That's what I thought. Books are written by a specific few authors, unlike Wikipedia. I am now thinking that it would be very interesting if there were a format for [networked information expression] or knowledge expression written by a specific few authors. This is a hypothesis that may be TRUE or FALSE. I think that even if such a new format exists, the majority of readers would find it difficult to read, or would prefer the paper format. I am the 〓00:45:21〓theorist, but I think it would be interesting to have something like that. I think it would be interesting to have something like that.

[https://gyazo.com/5fe5f18684c09d1093da65280ff3de0e]
I've been thinking about turning The Art of Intellectual Production of Engineers into a scrapbook project, which already exists on the log, but unfortunately, the publisher is having some difficulty because they think it will decrease sales. I'm still debating on it! I've already written about it in the text, so let me tell you that we haven't signed a publishing contract yet because we haven't reached an agreement on this point yet. It's been several months since the release of the book, and I was asked, "Is it okay to make an English version of this book? So we said, "That would be good indeed." So we decided to make an English version.

[https://gyazo.com/72e86bebfe24e83c7b51280560740b2f]
This is actually a scrap box for the English version of this book that I'm working on right now. What's interesting about this is that diagrams and such are displayed in this box.

[https://gyazo.com/3287e3ba28c8be78cfe5de2267c9689e]
Let me put that aside and talk about why I decided to make an English version. I've been on Twitter for 〓00:46:22 for about 4 months since the release of the book. I've been 〓 and found that the contents of this book are useful for many Japanese people. That has been verified by experiments. There is almost nothing in this book that is unique to Japanese people and can be done only by Japanese people. Well, there are some Japanese things like the word "sutra" and the KJ method, but the content of this book...I added some explanation of sutra in the English version. 〓00:46:47〓I think that this content should be useful not only for people in Japan but also for people all over the world. But this is just a hypothesis. I think it is a hypothesis, but from an English-speaking person's point of view, they might say, "Hmmm. That's not an interesting story. It's not a new story. Japanese people didn't know that until now. You're behind the curve! But I don't know, so it's a hypothesis. I think it's beneficial. So what I needed to do to test this hypothesis was to have this content in English. If it is in English, it is not just a translation, but I have to add 〓00:47:17〓various supplementary explanations in English-speaking countries, which is why I am translating it myself.


[https://gyazo.com/5d16c3a9d555a96c010313a3a95d64f6]
This is an ongoing experiment, and the second experiment is to see if it would be interesting if a book took the form of a scrap box. The first experiment is to create a scrapbook and experiment with it. The second experiment is to see if it would be interesting to create an English version of this content. We are now in the process of translating the English version into scrapbook form, and once the translation is completed to some extent, we are thinking of creating an e-book version and releasing it in English-speaking countries, as we feel that some people would be more receptive to the book format.
	英語版
		[/intellitech-en]
	英語版の電子書籍
 	https://leanpub.com/intellitech-howtoboostyourcreativity/c/NF89WYOM4fLm


[https://gyazo.com/abe70c107d626ae8e95344c5cd04dd35]
To give you a brief overview of the book, Chapter 0 is a short introduction, in which the importance of the cycle is explained in a few words. Chapter 1 is similar to the content of the Gijutsu hyoronsha column "How Engineers Learn," which I mentioned earlier. The first chapter is similar to the one in the Gijutsu hyoronsha's "How engineers learn" column I mentioned earlier. As I explained earlier, it talks about the importance of learning through a cycle. Chapter 2 contains additional content. If you don't feel motivated to keep the cycle going and your motivation wanes, the cycle won't work. How can we maintain a state of mind that allows us to keep the cycle going while having fun? There are many life hacks and productivity tips out there. The most important thing is to keep yourself in a state where you are enjoying learning. The most important thing is how to extend the time in which you are able to enjoy learning and taking action. There is no 100% correct answer to this question, but for example, if the time is 〓00:48:58〓...If the task is too big and you cannot see the end time, you will lose motivation, you need to make the task smaller. What are the ways to do this? Chapter 2 describes how to do it by time or by volume, how to solve urgent tasks that keep popping up, and so on.

[https://gyazo.com/2bf8961c548cf3650bd50a23ab15b450]
[https://gyazo.com/7931cd93c5622bcd1ca9fdb14d6f569c]
Chapter 3 and after are about extending the cycle and focusing more deeply on the details of the cycle. Chapter 3 is about memory, and how to accumulate memories. Chapter 4 is about how to read a book. This is the story of how to read a book. To put these chapters 3 and 4 in a nutshell, they are about how to do input.
Chapters 5 and 6 are about how to organize ideas and how to create new ideas and new thoughts. Chapters 5 and 6 are about output and how to improve output.
The last 7 chapters are what you will learn. This is the chapter 0 that I wrote in the first "Technology behind Coding," but it was rejected and deleted. The chapter 7 is the one that includes philosophy and business administration as a concept.
Now, a book like this is still being experimented with after it is launched right now. The launch itself was an experiment, but after that, it's not the end of the story. It is not the goal. In fact, what it says on the last page of the book is, "This experiment is about to come to an end. I hope that I have created valuable knowledge that will be passed on to you through this book, take root in you, and help you in your intellectual production. For me, this is not a goal, but a new beginning. It is a start, and I am excited to see what will happen five or ten years after the first edition of this book." The seed of this book is now taking root in your soil, and when it grows from there, what will happen in five to ten years' time?

[https://gyazo.com/cf26e46e6f4985c10d19eb343008ad4c]
So I wrote a book about that kind of thing, and for those who want to read it, I heard that there were quite a few Gijutsu Hyoronsha books in stock at this event, even though it was a Shoeisha event. I heard that there were 50 books. I think they will probably go back to the venue as well. If they haven't sold out. I think there are people who want the e-book version of the book, so you can download it from Gijutsu Hyoronsha's e-book store in PDF and EPUB formats, or you can buy it from Amazon.
I think it should be available on Kindle by now. I'm not sure because I haven't done it myself. I'm not sure if I'm doing it myself, so I'm not sure. The most important point is that I'm currently working on the English version of the book, and I think my English skills may be a problem, but I'm slowly working on the English version and have translated up to the middle of chapter 3. While the English version has the disadvantage of being in English, it also has the advantage of being in a scrap box format, which is a mysterious positive or negative experiment.

[https://gyazo.com/1a4ecb8e3aa8f97df6686485ce77d429]
I am sure that many of you are wondering how to get to the English version of the site. First of all, please search for "Nishio's Scrapbox". Then you will arrive at the Scrapbox page. There, you will find a wiki with all the fragments of my presentation and other things I have mentioned. The title of this presentation is "Before and After the Intellectual Productivity of Engineers. If you search for the title of this presentation, you will find a page that I created for this presentation, and from there you can find links to all the various fragments. So if you follow this, I think it would be good. That is the end of the presentation, but there is a delicate extra minute left, so I hope you don't mind if I start the Q&A session. Does anyone have any questions? No, I don't. No? Then let's cut off early. Okay, I would like to end the session early. I think we all have a hard time when we are asked, "Do you have any questions? When you are asked, "Do you have any questions? When you are asked if you have any questions, it is difficult to ask questions immediately. You can also mentions me on Twitter. I would also like to conclude my presentation by saying that I think it is very important to lower the barriers to output without worrying too much about asking questions in such a place. Thank you very much for your attention.

[https://gyazo.com/b24eb02ebd99c1920178b9c2d076eae9]
	[Engineers' intellectual production techniques and physical education-type classes].
	I had initially assumed that the presentation would be 30 minutes long with 15 minutes for questions, so I included a question time slide for a physical education-type class, but when I heard that the presentation was supposed to be 45 minutes long, I improvised and added more content, but didn't use it because I had one minute left when the presentation was over.

-----
2019-02-12
	[Knowledge, Capitalism, and the Technologist Condition]
	[Why invest in intellectual production techniques?]
	The capital of knowledge #Knowledge capital

-----
2019-01-23
	[Why invest in intellectual production techniques?]
	The capital of knowledge #Knowledge capital
	[Engineers' intellectual production techniques and physical education-type classes].
