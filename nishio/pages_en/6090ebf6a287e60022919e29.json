Hatena2008-04-22
code:hatena
 <body>
 *1208825039*無題
 I think that solving one TopCoder problem a day would be a good way to learn C++.
 
 Also, I was flipping through "Pattern Recognition and Machine Learning" and the explanation of Lagrange multipliers in the appendix seemed very clear to me. I'll read it on the train.
 
 Is it still a good idea to read a good commentary 10 times?
 
 *1208833985*[cpp]What I learned today
 - It is not good to write long y = (long)x or long y = long(x) to convert int x to long y. This is an unconditional typecast and should only be used when really necessary, like a goto, just like it is not good to use goto to do something that can be done with a for statement.
 -- C++ has four different casts: <a href="http://www.s34.co.jp/cpptechdoc/article/newcast/">New C++ casts</a>
 -- if you want to convert an int to a long, you don't cast, you cast long y(x);.
 - In LL, it is faster to use a loop in C by using a map or a generator than to write a for statement by yourself, but in C, looping in a library is slower than writing a for statement by yourself.
 
 *1208839171*[TopCoder]僕の開発環境
 I'll expose the development environment I've been working on.
 First of all, the basic premise: http://gulfweed.starlancer.org/d/index.php?itemid=10
 
 追記：
 I put all the various files into freehg. At first I said I would put them in CodeRepos, but I couldn't figure out how to neatly put yasnippet, *.sh, and *.py in CodeRepos.
 http://freehg.org/u/nishio/tcutils/
 
 ** build.sh
 If the compilation succeeds, the test case is run immediately.
 http://freehg.org/u/nishio/tcutils/file/142a7cc8bd0e/build.sh
 
 ** Machine
 I first put it on the lab's Windows machine, but then I reconsidered and decided to participate on my MacBook.
 
 ** Editor
 carbonEmacs. there is no other choice but Emacs because I want to use yasnippet.
 
 ** yasnippet
 I raised it to freehg.
 http://freehg.org/u/nishio/tcutils/file/142a7cc8bd0e/yasnippet/cc-mode/
 
 Not much yet. The easy part.
 >||
 cout << ${1:x} << endl;
 ||<
 This moves the cursor to the x when inserted.
 
 It's a more complicated one.
 >||
 ${1:long long} _${2:v}[${3:N}] = {${4: }};
 vector<$1> $2(_$2, _$2 + elementof(_$2));
 ||<
 
 This is
 >||
 int _x[5] = {1, 2, 5, 4, 2};
 vector<int> x(_x, _x + elementof(_x));
 ||<
 Insert a code that is
 
 ** Templates
 Template for FileEdit. I think there is still room for improvement, but this is the current state for now.
 
 (Deleted: I put the latest version of this in freehg, yasnippet/cc-mode/TEMPLATE)
 
 iter_print: http://www005.upp.so-net.ne.jp/episteme/html/stlprog/sample.html
 elementof: http://blogs.wankuma.com/melt/archive/2007/09/01/93176.aspx
 
 
 ** topcoder_proxy.py
 Fixed a problem with http. →I fixed it. I also put this in freehg.
 If you open C++ code that starts with #include, you can save it locally.
 
 *1208858026*[TopCoder]今日のTopCoder
 問題文：http://www.topcoder.com/stat?c=problem_statement&pm=8160&rd=12170
 
 I wrote it in C++ and got stuck, so I rewrote it in Python.
 >|python|
 >>> def bar(s, c):
     result = []
     start = s.find(c)
     while start != -1:
         result.append(start)
         start = s.find(c, start + 1)
     return result
 
 >>> bar("babab", "a")
 [1, 3]
 >>> def foo(w, words):
     can = dict((x, 0) for x in bar(words[0], w[0]))
     for i in range(1, len(words)):
         poss = bar(words[i], w[i])
         newcan = {}
         for p in poss:
             for k in can:
                 if p <= k:
                     diff = k - p
                     score = can[k] + diff
                     if newcan.get(k, 10000) > score:
                         newcan[k] = score
                 else:
                     diff = p - k
                     score = can[k] + diff * i
                     if newcan.get(p, 10000) > score:
                         newcan[p] = score
         can = newcan
     return can
 
 >>> foo("abc", ["cacac", "cbbaa", "cc"])
 {1: 0, 2: 2, 3: 3}
 >>> foo("TOP", ["TIK", "PPPO", "OP"])
 {3: 5}
 >>> foo("FIND", ["VERYFAST", "OPINION", "SPENDING", "ODD"])
 {4: 3, 6: 8}
 ||<
 
 Converted to C++, took quite a bit of time because I couldn't figure out how to add and trace to map.
 
 >|cpp|
   for(int i=0; i<elementof(findpos); i++){
     can.insert(map<int, int>::value_type(findpos[i], 0));
   }
 
   for(map<int, int>::iterator it=can.begin();it != can.end(); it++){
     cout << (*it).first << endl;
   }
 ||<
 
 I almost wrote it, but now I'm having trouble with map = newmap. There is no way I can write it as it is. Hmmm...
 
 I finished writing it but it doesn't work. At any rate, if it were Python, I could print and check, but cout << just gives me a compile error. Hmmm.
 
 >|cpp|
 template<class Iterator>
 void map_print(const Iterator& begin, const Iterator& end){
   cout << "{";
   for(Iterator it=begin; it != end; it++){
     if(it != begin) cout << ", ";
     cout << (*it).first << ":" << (*it).second;
   }
   cout << "}" << endl;
 }
 
 int main() {
   typedef map<int, int> mii;
   mii d;
   d.insert(mii::value_type(1, 2));
   d.insert(mii::value_type(2, 3));
   d.insert(mii::value_type(3, 4));
   d[4] = 5;
   map_print(d.begin(), d.end());
 }
 ||<
 
 I made a function to display it for now. Wooo... It's already been over an hour. At this rate, I might not be able to solve even one question in the actual battle. I'm getting impatient.
 
 -----
 
 I did "!M[x]" for some map M with the intention of saying "there is no key x", but this creates a default value with the key x. And if the value was 0, it would be a problem, like a tree.
 
 >|cpp|
 template<typename _K, typename _V>
 bool has_key(map<_K, _V> m, _K k){
   return (m.find(k) != m.end());
 };
 
 int main() {
   typedef map<int, int> mii;
   mii d;
   d[4] = 5;
   map_print(d.begin(), d.end());
   cout << has_key(d, 4) << endl;
   cout << has_key(d, 5) << endl;
 }
 ||<
 
 Oh, I got it. I'm getting a lot clearer.
 
 -----
 
 Finally, I got 270 points on SUBMIT. Let's put it through a system test.
 Ugh, I failed...924 when I should have returned 919...hmmm, am I still missing something... I don't think I can solve it anymore, so I'll just post the code up to the point where I was able to solve it and be done with it.
 
 >|cpp|
 vector<int> getpos(string s, char c){
   vector<int> result;
   size_t start = s.find(c);
   while(start != -1u){
     result.push_back(start);
     start = s.find(c, start + 1);
   }
   return result;
 }
 
 int placeWords(string matchString, vector <string> matchWords) {
   size_t N = elementof(matchWords);
   map<int, int> can;
   vector<int> findpos = getpos(matchWords[0], matchString[0]);
   if(findpos.empty()){
     return -1;
   }
   for(size_t i=0; i<elementof(findpos); i++){
     can.insert(map<int, int>::value_type(findpos[i], 0));
   }
 
   for(size_t i=1; i<N; i++){
     findpos = getpos(matchWords[i], matchString[i]);
     if(findpos.empty()) return -1;
     map<int, int> newcan;
     for(size_t pi=0; pi<findpos.size(); pi++){
       int p = findpos[pi];
       for(map<int, int>::iterator it=can.begin();it != can.end(); it++){
 	int k = (*it).first;
 	if(p <= k){
 	  int diff = k - p;
 	  int score = can[k] + diff;
 	  if(!has_key(newcan, k) || newcan[k] > score){
 	    newcan[k] = score;
 	  }
 	}else{
 	  int diff = p - k;
 	  int score = can[k] + diff * i;
 	  if(!has_key(newcan, k) || newcan[k] > score){
 	    newcan[p] = score;
 	  }
 	}
       }
     }
     can.clear();
     can = map<int, int>(newcan.begin(), newcan.end());
     newcan.clear();
   }
 
   int minvalue = 10000;
   for(map<int, int>::iterator it=can.begin(), end=can.end(); it != end; it++){
     if((*it).second < minvalue){
       minvalue = (*it).second;
     }
   }
   return minvalue;
 }
 ||<
 
 *1208874181*Part 2 Creation of Draft Dedication List
 - I am a middle and high school student
 - I am a technical college student.
 - Is a minor
 - 1/1000th of annual income is less than the price of the book (i.e., annual income is less than 3 million. otsune's proposal)
 
 How about making a list like this, and then making book donations from those who have the most YES answers?
 
 - No Python experience
 - I believe classes are a must-have spell when writing a program.
 - When I was told that "Java's private can be accessed from other classes," my understanding of the concept fell apart and I was in a panic.
 </body>
 <comments>
 <comment>
 <username>k.inaba</username>
 <body>(I think this has already been solved...) I think can = newcan can be used in C++ as it is. </body>
 <timestamp>1208998338</timestamp>
 </comment>
 <comment>
 <username>nishiohirokazu</username>
 Am I understanding this correctly because the <body> assignment operator is defined to do the copying? In this case, it's not a problem, but I'm afraid that Python's can = newcan doesn't cause copying, so using it with the same intention as Python is going to rub me the wrong way. I'll make an entry in the near future when I get my head a little more organized. </body>
 <timestamp>1209019896</timestamp>
 </comment>
 <comment>
 <username>とぷこだ好き</username>
 <body>You can tell if a map has a certain key by map::count(key)>0. </body>
 <timestamp>1212120198</timestamp>
 </comment>
 </comments>

[Hatena Diary 2008-04-22 https://nishiohirokazu.hatenadiary.org/archive/2008/04/22]