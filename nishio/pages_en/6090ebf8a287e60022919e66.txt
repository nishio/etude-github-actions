Hatena2008-06-28
code:hatena
 <body>
 *1214602204*Python Hot Springs Day 2
 <a href='http://gadget.cre8system.jp/life_hacks/post_31.html'>How to Enjoy an Outdoor Study Session</a>
 
 -----
 
 VirtualBox is basically Xen, but it's totally different."
 
 -----
 
 ScrapBook. a Firefox extension. You can keep the page you are looking at. You can edit and save again, or save only selected parts. I added it because it looks useful.
 
 -----
 
 pdumpfsã€‚
 Hard-linked backup.
 
 <a href='http://0xcc.net/pub/sd-2003-08/'>Recommendations for regular backups with pdumpfs</a>
 
 I searched for it in Spotlight. It was in my MacBook.
 
 <a href='http://itpro.nikkeibp.co.jp/article/Watcher/20071113/287084/'>I'm impressed with the interface of Apple's new OS "Time Machine" feature: ITpro</a>.
 
 -----
 
 I woke up to a cat invading my room.
 
 -----
 
 When I opened the screen door, it came off.
 
 -----
 
 <a href='http://en.wikipedia.org/wiki/Vector_clocks'>Vector clock - Wikipedia, the free encyclopedia</a>
 
 <a href='http://teahut.sakura.ne.jp/b/2008-06-18-1.html'>Takemaru / Erlang Distributed System Study Session is over</a>.
 
 Talking about what kind of algorithm Amazon's Dynamo is and so on.
 
 Oh, I saw something about <a href='http://www.hyuki.com/yukiwiki/wiki.cgi?ConsistentHashing'>ConsistentHashing - Consistent Hashing Method</a> in the context of something I saw the other day. I wonder if this is related to it.
 
 <a href='http://d.hatena.ne.jp/viver/20080429/p1'>P2P Distributed Storage "Cagra" - Diary of Sadayuki Furuhashi</a>, This one is written in C++ and is said to be faster.
 
 -----
 
 <a href='https://addons.mozilla.org/ja/firefox/addon/2691'>Poster :: Firefox Add-ons</a>
 
 -----
 
 <a href='http://www.json.com/json-schema-proposal/'>JSON &#187; JSON Schema Proposal</a>, on how to use JSON to express the information "I want JSON with this structure". It is easy to understand to see an example.
 
 >||
 {
   "name": {"type":"string"},
   "age" : {
     "type":"number",
     "maximum":125
   }
 }
 ||<
 
 The link above is OUT OF DATE and is apparently being discussed in a Google Group. <a href='http://groups.google.com/group/json-schema'>JSON Schema | Google Groups</a>
 
 -----
 
 <a href='http://haxe.org/doc/intro'>haXe - Introduction to haXe</a>. This allows you to write in AS3-like syntax and compile to the old Flash format.
 
 -----
 
 Tried to get Chumby to work on my MacBook and it didn't work. I was trying to set it up and <a href='http://wiki.chumby.com/mediawiki/index.php/Chumby_tricks#Configure_your_chumby_to_connect_wirelessly_through_a_ I'll try it on my e-mobile connection.
 
 -----
 
 say "zetz baw shitter"
 
 say "arma-chang"
 
 -----
 
 >>
 I'm not sure if that's true. "Python's multiple assignments are different from C's multiple assignments in the order in which the assignments occur." http://tinyurl.com/673zwq Is that right? But it seems like the only thing the code shows is the timing of the GC.
 - http://twitter.com/smeghead/statuses/845517112
 <<
 
 Well, the reason why x is GC'd first is because x is assigned first and what was in x is reduced in reference count first, but maybe that was a confusing example. So here is a direct example:
 
 >|python|
 >>> class MyNamespace(dict):
 ...     def __setitem__(self, k, v):
 ...         print "set", k, v
 ... 
 >>> exec "x = y = 1" in MyNamespace()
 set x 1
 set y 1
 ||<
 
 In C, the assignment of x = y = 1 is interpreted as x = (y = 1) because equal is a right-associative operator, but Python's assignment statement is not so, and the syntax is designed for multiple assignments.
 
 >||
 assignment_stmt  	::=  	(target_list "=")+ expression_list
 ||<
 <a href='http://www.python.jp/doc/release/ref/assignment.html'>6.3 Assignment statement </a>
 
 -----
 
 I was in a hurry to delete the iPhone study session because I heard that it is against the license to blog about the contents of the session. Sorry for the inconvenience.
 
 -----
 
 reddit is pylons
 
 -----
 
 It takes 4 minutes to process 5000 x 5000 cases...that's O(N*M). I should add the essence of Myers' An O(ND) Difference Algorithm and Its Variations, which I wrote yesterday, to this code. From a quick look at the code, it seems to search in order from near the diagonals, taking advantage of the tendency for the cost to be lower near the diagonals.
 
 -----
 
 Ehhhh, the interface of Interface Builder for Mac is amazing!
 
 -----
 
 <a href='http://www.thanko.jp/goronecushion/'>Sanko Rare Mono Shop [Super Goronami Cushion] The ultimate goronami cushion</a> that will not tire you out even when you are lying on your back, on your head, or using a computer. This is bad.
 
 -----
 
 They have something called brainwriting, which is like brainstorming.
 
 -----
 
 Write everything down in 15 minute time segments.
 
 -----
 
 <a href='http://skitch.com/'>Skitch.com + Skitch = fast and fun screen capture and image sharing.</a>
 
 -----
 
 I heard that shared_ptr is easier to understand if you read the built-in version, not boost's.
 
 -----
 
 <a href='http://www.freia.jp/taka/blog/536'>I wrote shared_ptr for BREW in C++ template - Shimizugawa Web</a>. I glanced at it and it was short, so don't look at it, implement it yourself and then answer it.
 
 -----
 
 Jarariko is a drink.
 
 **1214603856* Correlation between language hardness and body hardness
 <a href="http://www.flickr.com/photos/shibukawa/2616997540/" title="[Python Onsen] Language Comparison (2) by shibukawa.yoshiki, on Flickr"><img src="http:// farm4.static.flickr.com/3114/2616997540_4e4e72f71a.jpg" width="500" height="375" alt="[Python Onsen] Language Comparison (2)" /></a>
 
 http://d.hatena.ne.jp/jYoshiori/20080628/1214604037
 http://d.hatena.ne.jp/jbking/20080628/p1
 
 *1214631753*Needleman-Wunsch algorithm implemented.
 Someone in 86 chat was trying to make a diff before, and he was having trouble because he was allocating an N * M array for a string of length N, M, which ate too much memory for a large input size. I need to have them all because I have to go back and find the path later!" No, I don't. I just have to have the root of the path by reference! If we keep only the root of the path by reference, the path we don't need will disappear in GC! I was talking about this, but now I kinda need it myself, so I made it. Yeah, it works as I thought it would.
 
 It is written in the test case, but when executed, the input/output looks like the one below.
 >||
     >>> test("1", "001")
     in1:  1
     in2:  001
     (((), (0, 2)), 'D')
     out1: --1
     out2: 001
 
     >>> test("1", "100")
     in1:  1
     in2:  100
     (((((), (0, 0)), 'D'), 'V'), 'V')
     out1: 1--
     out2: 100
 
     >>> test("1", "00100")
     in1:  1
     in2:  00100
     (((((), (0, 2)), 'D'), 'V'), 'V')
     out1: --1--
     out2: 00100
 
     >>> test("11", "1001")
     in1:  11
     in2:  1001
     ((((((), (0, 0)), 'D'), 'V'), 'V'), 'D')
     out1: 1--1
     out2: 1001
 
     >>> data1 = [1,2,3,5,7,9,0]
     >>> data2 = [2,3,4,5,6,7,8,0]
     >>> test(data1, data2)
     in1:  [1, 2, 3, 5, 7, 9]
     in2:  [2, 3, 4, 5, 6, 7, 8]
     (((((((((), (1, 0)), 'D'), 'D'), 'V'), 'D'), 'V'), 'D'), 'D')
     out1: 123-5-79
     out2: -2345678
 ||<
 
 What I want to do is diff two very similar HTML files, but I can't get it to work using the normal line-by-line diff. I thought I could use a character-by-character diff, but that would give me very stupid results, because the y in the Library in one sentence would match the y in the body tag of the other sentence. Since we have knowledge about the structure of input "being HTML," there is no way but to use it. So, I used regular expressions to separate the <~~> form into tokens and the non <~~> form into tokens, and diffing with those tokens worked, but not as well as I had hoped. I don't want to put too much emphasis on text node discrepancies, since they are "natural" input, and I want the difference between an ul tag and an a tag to be considered a big difference. I wanted to customize that part, so I put together a function to calculate the score. For now, it's still a simple comparison.
 
 String or no string is not essential, as you can see from the code below, which feeds a string or a list of integers. But now I need random access to the file.... I'll have the contents of the file in memory. Well, the object I want to apply it to is not in the size of a gigabyte, so I guess it's OK.
 
 >|python|
 """
 Needleman-Wunsch algorithm
 """
 
 def calc_cost(x, y):
     """
     calc inverse similariry
     0: completely match, 1: completely different
     """
     if x == y:
         return 0
     return 1
 
 GAP_COST = 1
 
 def diff(s1, s2):
     W = len(s1) # widht
     H = len(s2) # height
     costs = [GAP_COST * y for y in range(H + 1)]
     paths = [((), (0, y)) for y in range(H + 1)]
     for x in range(1, W + 1):
         next_costs = [GAP_COST * x]
         next_paths = [((), (x, 0))] 
         for y in range(1, H + 1):
             # horizontal gap
             min_cost = costs[y] + GAP_COST
             min_link = (paths[y], "H")
             # vertical gap
             cost = next_costs[y - 1] + GAP_COST
             if cost < min_cost:
                 min_cost = cost
                 min_link = (next_paths[y - 1], "V")
             # diagonal
             cost = costs[y - 1] + calc_cost(s1[x - 1], s2[y - 1])
             if cost < min_cost:
                 min_cost = cost
                 min_link = (paths[y - 1], "D")
 
             next_costs.append(min_cost)
             next_paths.append(min_link)
         costs = next_costs
         paths = next_paths
     return paths[-1]
 
 def test(data1, data2):
     """
     >>> test("1", "001")
     in1:  1
     in2:  001
     (((), (0, 2)), 'D')
     out1: --1
     out2: 001
 
     >>> test("1", "100")
     in1:  1
     in2:  100
     (((((), (0, 0)), 'D'), 'V'), 'V')
     out1: 1--
     out2: 100
 
     >>> test("1", "00100")
     in1:  1
     in2:  00100
     (((((), (0, 2)), 'D'), 'V'), 'V')
     out1: --1--
     out2: 00100
 
     >>> test("11", "1001")
     in1:  11
     in2:  1001
     ((((((), (0, 0)), 'D'), 'V'), 'V'), 'D')
     out1: 1--1
     out2: 1001
 
     >>> data1 = [1,2,3,5,7,9,0]
     >>> data2 = [2,3,4,5,6,7,8,0]
     >>> test(data1, data2)
     in1:  [1, 2, 3, 5, 7, 9]
     in2:  [2, 3, 4, 5, 6, 7, 8]
     (((((((((), (1, 0)), 'D'), 'D'), 'V'), 'D'), 'V'), 'D'), 'D')
     out1: 123-5-79
     out2: -2345678
     """
     print "in1: ", data1
     print "in2: ", data2 
     result = diff(data1, data2)
     print result
     buf1 = []
     buf2 = []
     x = len(data1) - 1
     y = len(data2) - 1
     while result:
         cur = result[1]
         next = result[0]
         if cur == "D":
             buf1.insert(0, str(data1[x]))
             x -= 1
             buf2.insert(0, str(data2[y]))
             y -= 1
         elif cur == "H":
             buf1.insert(0, str(data1[x]))
             x -= 1
             buf2.insert(0, "-")
         elif cur == "V":
             buf1.insert(0, "-")
             buf2.insert(0, str(data2[y]))
             y -= 1
         else:
             ox, oy = cur
             for i in range(ox):
                 buf1.insert(0, str(data1[x]))
                 x -= 1
                 buf2.insert(0, "-")
                 y -= 1
             for i in range(oy):
                 buf1.insert(0, "-")
                 x -= 1
                 buf2.insert(0, str(data2[y]))
                 y -= 1
                 
         result = next
 
     print "out1:", "".join(buf1)
     print "out2:", "".join(buf2)
 
 def _test():
     import doctest
     doctest.testmod()
 
 if __name__ == "__main__":
     _test()
 ||<
 
 *1214669168*[cpp]create shared_ptr
 I glanced at <a href='http://www.freia.jp/taka/blog/536'>I wrote shared_ptr for BREW with C++ template - Shimizugawa Web</a> and implemented it without reading it because it was short and I wanted to learn. I was taught a lot of things.
 -----
 In addition, I would like to reiterate a note in case anyone tries to use this code. I am not assuming that it will be used for practical purposes. Rather, I wrote "free" for "delete" and the code did not work.
 
 >|cpp|
 #include <iostream>
 using namespace std;
 
 template<typename T>
 class PtrWrapper {
 public:
   PtrWrapper(T* ptr):_ptr(ptr),_count(1){}
   ~PtrWrapper(){
     delete _ptr;
   }
   int dec(){
     _count--;
     cout << "obj " << *_ptr << " refcount " << _count << endl;
     return _count;
   }
   void inc(){
     _count++;
     cout << "obj " << *_ptr << " refcount " << _count << endl;
   }
   T* _ptr;
 private:
   int _count;
 };
 
 template<typename T>
 class SharedPtr {
 public:
   SharedPtr(T* ptr):_ptrwrap(new PtrWrapper<T>(ptr)){
   }
   ~SharedPtr(){
     if(_ptrwrap->dec() == 0){
       delete _ptrwrap;
     };
   }
   T* operator->(){
     return _ptrwrap._ptr;
   }
   operator T*(){ // weird syntax here?
     return _ptrwrap._ptr;
   }
   SharedPtr<T>& operator=(SharedPtr& rhs){ // reference return or copying will occur
     if(_ptrwrap->dec() == 0){
       delete _ptrwrap;
     };
     rhs._ptrwrap->inc();
     _ptrwrap = rhs._ptrwrap;
     return *this;
   }
   PtrWrapper<T> *_ptrwrap;
 };
 
 class MyValue {
 public:
   MyValue():value(42){
     cout << "cstr wit 42" << endl;
   }
   MyValue(int v):value(v){
     cout << "cstr with value" << value << endl;
   }
   ~MyValue(){
     cout << "dstr" << value << endl;
   }
   MyValue(const MyValue &v){
     cout << "copy cstr " << value << endl;
     value = v.value;
   }
   int value;
 };
 
 ostream& operator<<(std::ostream& os, const MyValue& v){
   os << v.value;
   return os;
 }
 
 typedef SharedPtr<MyValue> SPM;
 
 int main(){
   {
     SPM x(new MyValue(43));
     {
       SPM y(new MyValue(44));
       x = y;
       cout << "after assign" << endl;
     }
     cout << "out_of_y" << endl;
   }
   cout << "out_of_x" << endl;
 }
 -----
 output (e.g. of dynamo)
 cstr with value43
 cstr with value44
 obj 43 refcount 0
 dstr43
 obj 44 refcount 2
 after assign
 obj 44 refcount 1
 out_of_y
 obj 44 refcount 0
 dstr44
 out_of_x
 ||<
 </body>
 <comments>
 <comment>
 <username>kajuntk</username>
 <body>Without writing Jython or anything, it's easy to tell at a glance which one is the walking moe element. <br>The way he opens his hands is cute wow</body>.
 <timestamp>1214634222</timestamp>
 </comment>
 <comment>
 <username>harajune</username>
 I have been taught by <body>ujm. I just confirmed with math that this is indeed the case for finding the edit distance. <BR>I think I was thinking only of dp in the general case (cost depends on the node and branch), so I thought it was impossible. I think it may be necessary to do a reverse search depending on the cost function. </body> <br><br><br
 <timestamp>1214668786</timestamp>
 </comment>
 <comment>
 <username>takano32</username>
 <body>bontmia recommended</body>.
 <timestamp>1215158023</timestamp>
 </comment>
 </comments>

[Hatena Diary 2008-06-28 https://nishiohirokazu.hatenadiary.org/archive/2008/06/28]