Hatena2012-10-31
code:hatena
 <body>
 *1351691338*Agile estimating and planning: leverage memo
 I talked to id:Yoshiori at PySpa about how difficult estimating is and he said "<a href="http://www.amazon.co.jp/gp/product/4839924023/ref=as_li_ss_tl?ie=UTF8&camp=247& creative=7399&creativeASIN=4839924023&linkCode=as2&tag=nishiohirokaz-22">Agile Estimation and Planning ~Concepts and Techniques for Developing Valuable Software~</a>". I read it immediately and made a leveraged note.
 
 <iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=AAFFAA&fc1=000000&lc1=0000FF&t=nishiohirokaz-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4839924023" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
 
 It is not right to say, "Let's develop in an agile way with smaller batch sizes to deal with uncertainty," and then operate in a way that says, "Estimates are made at the beginning of the project and never changed. This book says that estimation and planning must also be agile and change according to the situation.
 
 In short, "It is impossible to make accurate plans and estimates at the beginning of a project. Instead, let's update our estimates to be more accurate with each iteration.
 
 It is interesting to see some of the patterns raised where conventional estimating methods fail.
 
 For example, if you are asked to estimate how many days Task X will take, and you answer, "It will take 3 days," then if the actual work takes 4 days, 4 days will really be consumed, but if the actual work takes 2 days, the remaining 1 day will be used for "unplanned work" such as improving code quality or enhancing test code, and 3 days will be consumed. The remaining one day is used for "unscheduled work" such as improving the quality of the code or enhancing the test code, so the time spent may increase, but it may not decrease. The work expands to the point where it uses all the time given to it.
 
 If estimates are taken as "commitments," then there is a barren struggle over uncertain tasks, such as "(I don't know if it will be done in two days or two weeks...) It will take 'two weeks,'" "No, it can't take that long, make it shorter," "Even if you say so.... (I'm worried...)" "(What the heck, we can shorten it. Let's keep on cutting it down.)" This is a sterile game in which stakeholders fight each other. It becomes a game in which stakeholders fight each other. It is important, though, to create a system that makes it a game of cooperation to reach a goal.
 
 The basic premise is that the estimates will not work as planned, so you must plan to build important features first and then cut out the unimportant ones when you run out of time. If you think you can implement everything as planned and cut corners on prioritization and sequencing, you will suffer later.
 
 Estimating with "story points," as this book presents it, can be summed up in one sentence: "Don't estimate time. Estimate the scale, measure the velocity, and derive the time. The larger the scale, the less accurate the estimate. Therefore, the larger the scale, the wider the interval. For example, 1, 2, 3, 5, 8, 13, 20, 40, 100... The "story point" is a unit of convenience to roughly estimate the scale.
 
 At the granular level of project planning, list features, not tasks. Features are from the customer's point of view, and are described in terms such as "the user is capable of doing...". In this way, it is easy to understand "what customer value will be created by doing this, and what will be lost if it is discarded. The scale of the "feature" is then estimated in story points. Later, when the iteration actually begins, this is refined into estimates of "task" and "time" in the iteration planning phase. Even if you refine the task and time estimates at the beginning, they will change as the development progresses, resulting in unnecessary costs.
 
 Next, the listed features (and their collective themes) must be prioritized. There are a number of cut-off points in the decision-making process. Monetary value (gain or lose or save). Cost of development and support. Knowledge to be gained. Risks that can be reduced. Note that we tend to think only about the first two. It is recommended to start with high-value, high-risk features, followed by high-value, low-risk features, and then low-value, low-risk features.
 
 Customer satisfaction is another cutoff point for prioritization. The book presents the Kano model based on questionnaires and Weeger's method. For my purposes, Weeger's method seems to be more suitable. The advantages and disadvantages of implementing the project are rated on a relative scale of 1 to 9, and then divided by the estimate to obtain the ROI.
 
 Stories (and epics) that are too large to fit into an iteration should be split up in the preliminary stage of iteration planning. At this point, care must be taken not to split them into tasks. If we split the iteration in such a way that nothing can be learned until both iterations are completed, such as "one iteration on the server and one iteration on the client," we are ruining the "fast execution -> learning cycle" by splitting the iteration. Instead, create a minimum implementation that allows both the server and client to be used and tested. Tracer (Towing Bullet). Cut out low priority sub-stories. Data boundaries, data manipulation (CRUD) boundaries, functional and non-functional requirements boundaries, and crosscutting concerns such as logging and error handling.
 
 Release Planning. What are the release requirements? Estimate how big the story is in story points. Determine the length of the iteration, the velocity (speed) per iteration, and the priority of the stories. Select the stories and determine the release date. Is the date important to the planning of this project or is the feature important? If the date is important, then any features that stick out must be discarded, and if the features are important, then the deadline must be extended.
 
 Velocity estimation is detailed in Chapter 16, but it is best to actually do it once and measure it.
 
 Next, for each iteration, a plan for that iteration is developed. The author recommends the commitment-driven approach, as the diagram on p. 173 is easy to understand. First, consider whether the priorities you initially set should remain the same or whether they need to be changed. Next, describe the goal of this iteration in a few words. Then select a story, break the story down into tasks, and estimate the tasks. Only at this stage does it become an "estimate in time. Asking team members, "Can you commit to accomplishing this task in this iteration? The plan is terminated when it becomes "no longer feasible.
 
 It is important to include meetings in the task count; a one-hour meeting with six people should be counted as at least six hours of work. If preparation time is required, it should also be included in the man-hours.
 
 There are tasks that are like, "I don't know how many hours this is going to take until I do it, right?" We'll isolate them as "spikes" and "placeholders." Spikes are tasks to gain the knowledge necessary for accurate estimation. Placeholders are tasks that cannot be estimated accurately at this time, and are estimated appropriately for now with the intention of re-estimating them later.
 
 How to prepare buffers. It is important to rationalize and theorize buffers so that they are not considered "skipping" or "padding". There are feature buffers and schedule buffers. The former is a method of making sure that MUST HAVE tasks do not exceed 70% of the plan in advance, and then cutting them out when there is not enough time. The latter is a great way to intimidate people who are not good at math by estimating "50% chance of completion by this time" and "90%" and then deriving the uncertainty (standard deviation) of the estimate and saying "w
 
 Communication. In managing a project, there will be a need to communicate progress to stakeholders. To communicate that there is a range of estimates, not only calculate the timing of completion by average velocity, but also by worst 3 velocities, etc. If a Gantt chart or WBS is requested, give it in feature units.
 
 summary
 - Review the plan frequently.
 - Do not confuse estimates of scale with estimates of duration
 - Plan for different degrees of detail: release, iteration, today.
 - Use features rather than tasks for granular planning
 - Include uncertainty in your planning.
 - Features are prioritized.
 - Use actual values as the basis for estimation, changing the plan exactly with actual measurements.
 - Always take a buffer
 
 <iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=AAFFAA&fc1=000000&lc1=0000FF&t=nishiohirokaz-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4839924023" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
 
 *1351692402*Measuring Reading
 How long would it take you to do the task of creating and blogging an excerpt from a 300 page, once-read Japanese book on management, after a quick re-read?
 
 Estimate: 1 pomodoro for excerpts and 1 pomodoro for blogging (estimate in hours)
 
 1 Pomodoro: 100 pages
 2 Pomodoro eyes: 50 pages
 3 Pomodoro eyes: 100 pages done
 4 Pomodoro eyes: 50% of the unexpurgated writing
 5 Pomodoro's eye: I'm giggling at the Yin-Yang, so the measurements after this are meaningless. 1.5 hours.
 
 No matter how you look at it, WW cost about three times as much as the estimate.
 </body>

[Hatena Diary 2012-10-31 https://nishiohirokazu.hatenadiary.org/archive/2012/10/31]