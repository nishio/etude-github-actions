180308 Memo.
[Facebook https://www.facebook.com/nishiohirokazu/posts/10214781253701469]
	Why are smaller groups better?
 Why groups instead of one-on-one?
 Why informal is better?

Why [smaller groups] are better?
 The bigger it is, the harder it is to grasp the whole picture.
  As I write this, I'm thinking it might go against the event organizers' wishes.
   In a sparse relationship, understanding of the other person's situation does not occur.
   Knowledge exchange may take place, but it does not lead to the formation of social relational capital.
   You might be interested in this. Presentation of "I think you might be interested in this.
			A, you mentioned before that you were interested in X."

Why should it be private?
 [Gated Communities]
  Private is not a must, but barriers to entry are necessary
  [Tragedy of the commons]
  [Free Rider] Occurrence
 Non-gated communities are allowed to gain [name recognition].
  Promotional effect due to the size of the community
  Costs basically go out.
 It's the number of people that matters, not the public/private, it's just easier to have a large group if it's public.
 The more conspicuous but important one is the less conspicuous one.
 What I want to explain is this
		[Human Networking Algorithm]
		[Talent Enrichment Algorithm]

Why Parallel is better
 Why should you belong to more than one organization?
  Because it can guarantee the breadth of information distribution without making it a huge organization.
 Because value production through inter-organizational mediation can
  There's no value in relaying information that can be Googled.
  Through this activity and feedback, a sense of smell for the quality of information is developed.
 	experimental verification
   We should touch on the cycle first.
    Program does not work in one shot.
    It's not like a drama.
    Write it, look at it, run it or compile it, and see if the results are as expected. If the results are as expected, we move on, but if not, we first modify the program to eliminate the mismatch.

Why not one-to-one?
 This is explained from [the prisoner's dilemma], but maybe I don't need to explain that this time.
 One-on-one, we have to satisfy each other's needs, and it's hard.
 If there is more than one person, there are n-1 people who can fulfill the need, which is efficient
 But more is not always better, and why not?
  Effective communication requires a common vocabulary
 Need to understand each other's language and understanding of each other's understanding of things
 The larger the group, the more difficult it is to understand individual people, so there is a tradeoff.
 Therefore, it is important to have a "reasonable size," and I think that reasonable size is 30 people at the most.

The reason it is unofficial is to make it easier to destroy.
 Survival should not become an objective.
  Is this true?
  It's not good for bad organizations to survive.
  I wrote in yesterday's brainstorm that we shouldn't make maintaining the organization an objective, but I guess I need to rethink whether that's right or not.
  It is important to "keep a good organization alive," not to "keep a bad organization alive."
  First of all, it is important to "become a good organization," and survival should be considered after the fact.
  So what is "goodness"?
  Drucker, "Profit is not an end but a condition for survival."
  [Five Internal Diseases Prevalent in "Dead Companies" | Leadership, Education, Qualifications, and Skills | Toyo Keizai Online | The New Standard for Economic News http://toyokeizai.net/articles/amp/211206?display=b&_event=read-body]
 Organizations that can no longer provide value to their constituents are preferable to collapse.
  Drucker, The Function of Bankruptcy
 Not only that, but to make it easier to make
 The more procedures you have to go through to make it, the more tedious it becomes.
 Some entrance communities can be large or public.
 [double community].
  Many open source communities do.
  Not everyone can be a committer.

 Running away from harmful selfish players
  Share information on toxic players
		Uncle Sushi Example
		Harmless selfish players can be left alone; when using enrichment algorithms, simply leave them alone and create new ones
  	Harmless selfish players = players who only absorb information and do not transmit it.
   Enriched by the creation of new communities.
	Just as you create an anonymous function and discard it, you create an anonymous community and discard it.
	Do not make survival an objective
	I don't need to talk about the destruction of the prisoner's dilemma by placing an observer in the room this time.

Create small informal groups as a next action!
	And let's offer your value to the group's constituents.
 Give and take begins with giving.
  If you don't have a particular story, one idea is to hold a meeting to tell what you heard here to several people who are interested in the content of this lecture.
  Of course, you don't have to limit yourself to my lecture, you can share what you hear here in Manaviya.
 The next action is not to make it a one-off event. After six months or a year, do it again.
  Time will tell what is useful and what is not in what you have learned.
  Catchy words are useless.

Human resource enrichment algorithms provide incentives for attribution.
 Start with just one, increase gradually as you can afford it, it's hard if you try to do something big from the beginning.
 There are many invisible enriched communities in the world, and those who don't belong to them can't see it.
 Invisible closed communities cannot be looked for and belonged to, they are gradually enriched by being active in open communities

Systems include not only computerized systems, but also human systems
 Chemical plants, systems consisting of chemicals, reactors and pipes
 People who have an aptitude for understanding and hacking systems compared to the average human being.
 I didn't realize the human system was a system, now I realize it.
 Human systems are closed source, with no publicly available source code
 This is not a special case, we will unravel it through experimentation and verification.
 Understanding how knowledge and concepts are related to each other, just as we understand how functions and variables are intertwined in source code.
 Like efficient data structures,
  Metiator pattern as an example of how knowledge of the structure of a program can correspond to knowledge of the human system
  Reduce the amount of interaction by having an intermediary
		Example of a secretary

https://www.facebook.com/nishiohirokazu/posts/10214787611740416
