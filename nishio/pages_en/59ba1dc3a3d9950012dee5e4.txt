Tokyo Metropolitan University Special Lecture on Information and Communication 2017
[Tokyo Metropolitan University] Special Lecture on Information and Communication 2017
#tmutalks

Questions [tmutalks2017qa].

	incomplete
 	On Machines and People
   For example, if we take "the amount of information that can be accurately remembered" as the vertical axis, machines have already surpassed humans. Even the number of additions per second exceeds that of humans.
   When people in the world say, "Machines surpass humans!" the vertical axis is quite vague.
   Will there ever come a time when machines surpass humans in every capacity?"
   
   Research seems to be accelerating, but it's not being accelerated by AI. It is due to the fact that papers are now distributed on the Internet in PDF format instead of in "paper journals," that the process of reviewing the quality of papers by experts in the form of peer review used to be conducted before publication, but that it is now common to publish manuscripts on the Internet before peer review, and that very profitable IT companies have invested in powerful computing environments. The fact that very profitable IT companies invested in a powerful computing environment was a factor.
   Computers use humans.
    Whenever there is an earthquake, people on Twitter post "Earthquake! I think this can be interpreted as a program that does not have a sensor to detect earthquakes, but uses humans as a sensor to detect earthquakes.
   [comparative advantage].
 	When machines surpass humans.
  	https://www.facebook.com/nishiohirokazu/posts/10213429415906369

Nishio's Tweet

 Q: Can one create something beyond one's capacity? A: There is more than one "ability. The person who created the bicycle did not have "the ability to run faster than a person on a bicycle," so he "created something beyond his own ability to run," but it would not be beyond "his ability to think.
 I think the technique of warning people who got stuck in guessing during the Q&A session that they will be the first to guess in the next session is useful. The experience of having been warned and being able to ask a question will lower the hurdle for the next session.
 	[Prepare yourself with a warning].
 I am happy to learn what I want to learn, but I am afraid that I will lose my life if I do it all the time. I think that if I improve my skills of "learning things that are not in the textbooks," I will be fine even if I change my field in the future.


Komachi Sensei's Tweet
	Afternoon @nishio's talk has begun~. What is groupware? We started with a talk about software, the purpose of which is to augment the capabilities of a group of people through software.
 The mainstay of Cybozu Labs, where Mr. Nishio works, is groupware. Software that provides a "place" to facilitate communication. Search engines have enhanced the ability of humans to gather information. I hope people will recognize that machine learning supports human capabilities, rather than fearing that it will eliminate jobs.
 Provide a "place" for communication. How do we solve the problem of multiple topics mixed together? We can separate them by topic. However, it is difficult to decide on a topic in advance. We can create a place where people can say anything they want. But that would cause a flood of information. I don't know how to solve this problem.
 What does it mean to work? To receive compensation. What is the consideration? Customer value. The value you pay for is enhanced capabilities. We pay for groupware because it increases productivity and creativity. But productivity-enhancing methods are not just software. It is also useful to verbalize and systematize it, and to educate people about it. #tmutalks
 No matter how good the software is, it is useless unless people understand how to use it. It is a common trap for engineers to think that they can get people to use their software without writing manuals. Even in software development, education is important to get people to use the software. There is no such thing as "if you make a good product, people will understand it.
 James Young, "How to Create Ideas" Good ideas grow on their own. Good ideas inspire the people who see them, and those people will help you. Don't keep your ideas to yourself, but talk about them with others. It doesn't matter if it's not organized or not. Notice blind spots.
 When you enter a university, you gradually have to learn in the absence of textbooks. How do you learn in such a situation? Pay attention to the gap between your understanding and reality. The discrepancy is the blind spot. That is where you learn. In programming, you write something and run it, thinking it should work this way. An error is returned. That is the point to learn.
 Up until high school, it might seem normal to learn from someone who is knowledgeable one way or the other, but the truth is that few people are knowledgeable one way or the other. So how do we learn there? If we have different areas of expertise, we can exchange knowledge with each other. If you provide information that is valuable to them, they will teach you. Learn by providing value to the other person.
 You have to find out for yourself what to learn and after college. No one else can tell you what to learn. The first book I wrote was "Jython Programming". The version became obsolete in the middle of writing it. When you are young, you tend to be interested in concrete content, but abstract content is more useful for a long time.
 If you learn a specific methodology, you can only solve that problem. Learning an abstract methodology can be applied to other problems. How do I learn abstract methodology? Connect with your own experience. I know more about what I have experienced than anyone else in the world.
 Common mistakes in study groups. Afraid of making mistakes, they copy the textbook or paper in its entirety. Participants ask questions, but he/she has no choice but to answer, "This is what it said (not my fault). Worst presentation ever. Failure. It is important to say, "This is how I interpreted it. Even if it is wrong, it is possible to have a discussion. It is a success. This is a success.
 A story for engineers. It is a waste to just read and understand the manual. It is interesting to talk about how you read the manual (paper) and tried to implement it. Implementation is an experience. You can understand what you don't understand. The cycle of understanding, implementation, consideration, and correction of understanding (so-called PDCA) is repeated.
 The PDCA cycle is beneficial, but what to do at the beginning? The question is: How do I make a presentation that is not a copy of the original? How to make a presentation that is not a copy of the original? Instead of the largely unmeasurable task of "let's make a presentation," "write 50 sticky notes with stories" is a measurable task that can be performed in a gap of time. Extend your working memory by writing it down.
 Introduction to the KJ method. Cluster a large number of written sticky notes. Naming the clusters. Organizing your overall understanding through diagrams. Verbalization and systematization. However, a diagram (two-dimensional) is not suitable for communicating to others. To communicate to others, make it one dimensional. Communicate to others and receive feedback. This is how the cycle goes around.
