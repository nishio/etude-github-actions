Hatena2012-05-13
code:hatena
 <body>
 **1336875297* Reflective Transitional Closure of Alloy in Pictures
 f:id:nishiohirokazu:20120513111328j:image
 
 Generally speaking, I know there are a lot of things to get into, like the arity of the relationship is not always 2, but as a first step, maybe it would be easier to get people to get an idea of what it is like with a picture like this.
 
 *1336914770*Diary of my participation in Start Alloy
 <a href='http://atnd.org/events/27160'>Start Alloy : ATND</a>
 
 -I totally agree that "the process of trial and error is the most interesting".
 - Theorem proving, model checking, and formal specification description languages are all very different things.
 - You can specify multiplicity in field declarations, such as X one -> one Y
 - The predicate specified by run may have arguments. It works like an existential quantifier.
 - You can use square brackets at the pred definition.
 - Okay, so there's no need to introduce the whole order time in verifying "add, delete, undo".
 - Use assert like a regression test. Recommended to leave it for use.
 - You can use Execute all
 - Uncertainty about whether the code you wrote is correct -> hard to avoid. Try writing the same thing in a different way and verify that it is the same value and feel a little relieved
 - See the slides for the tutorial on the official Alloy website: Everything's a relation
 - Visualizer squares can be moved by dragging.
 - XML output by Visualizer can be opened.
 - r: A.r.C seems to be the correct way to get B from A->B->C.
 - Pair modeling was interesting. But pair-profiling with people I don't know for the first time is tiring. I wonder if we should have an in-house study group or an Alloy spa.
 </body>

[Hatena Diary 2012-05-13 https://nishiohirokazu.hatenadiary.org/archive/2012/05/13]