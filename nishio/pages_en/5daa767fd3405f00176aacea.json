Programming automation and associated changes in supply and demand
>Kishida, Naoki, October 18, 2014
>When we look at the jobs that will disappear by 2020, the reason is generally that they will be mechanized and automated, so we need to build business processes that incorporate that automation.
>Then, of course, a business system is needed from there, which is a little different from the previous business system.
>A system that is slightly different on the surface, that is, so different that it appears to the general public to be different, albeit slightly, must be quite different from the definition of requirements to the construction and operation of the system.
>Those who say that if we do that, we will not be able to automate construction or offshore, and that program jobs will be eliminated in Japan or elsewhere alongside jobs that will be eliminated through mechanization and automation, are just oblivious to their own contradiction.
>I don't think it is possible to build a business system using drones if only drone control is possible.

If you observe the actual "automation of programming and the resulting changes in supply and demand" that have occurred in the past in this matter, I think it is obvious that Kishidan's assertion that "it can't simply go away" is also obvious.

The changes that occurred when compilers, "programs that automate programming in machine language based on descriptions in high-level languages," were created:
	At first, people said, "Automatically generated code is useless because of its poor performance."
	With the evolution of compilers, automation became more cost-effective than writing programs directly in machine language by ordinary humans, and the market shrank.
	Some with high skills beyond compilers are making high [residual] profits in a shrinking market.
		Because of the high skill requirements, [barriers to entry] are also high.
	Most others relearned C, for example, and were able to program more productively by using a compiler.
		The C language lowered the barrier to entry, but existing knowledge of machine language was an advantage.
	Those who did not have the skills to stay and learn to move to a new market are probably dead.

It is not that something special is about to happen, it is just that what has happened many times in the history of the economy will happen again in the future.


Writing a program" is not an objective but a means to an end. The objective is to create value. It is just a matter of shifting the weight to "meta-programming," which is how to build a business model that creates value.
	Well, if there is an X=(A, B, C, D) with four components, and some of the components are lost and new components are added (C, D, E, F), whether we consider it "a slightly different X, X'" or "a different X, Y" is just a matter of labeling. It is just a matter of labeling and is completely unimportant.
		(2019年補足)
			This is saying, "Whether you call it programming or not is only a trivial matter."
			Related [Ship of Theseus].
	In this sense, "[deepening understanding]" has two directions. The direction in which you delve into the "how" of a particular environment increases the degree of adaptation to that environment, but it is lost when the environment is changed, so it is suitable for a "stay" strategy. On the other hand, the direction of increasing the level of abstraction by repeating "why" is advantageous in the long term when adopting a "move" strategy because it can be carried over when moving to another environment.
		Related: [digging into the why & how to achieve your goals].

Survival bias that taking a strategy is not the same as succeeding, and those who fail in either strategy are hard to observe.

[Takuhiro Sasao]: [Paradigm shift] work requires people who can [think meta]. Once a complete shift is made, people who are familiar with the old paradigm will no longer be needed, but the time required for a complete shift may be longer compared to life.

Facebook 2014-10-18 https://www.facebook.com/nishiohirokazu/posts/10204428799296579]
