The "Maximize Favorability" Approach
Summary by [gpt.icon](modified by [nishio.icon])
 An approach to optimize the combination of good and bad parts with real numbers.
 This approach is useful for image recognition and Go phase evaluation.
 In these areas, it is easier to express preferences than to describe procedures.
 There is also a "combination of parts that return a boolean value" approach, which is currently used as type inference in programming languages.
 The advantage of this approach is that the behavior of the parts can be clearly defined and that it is suitable for solving certain kinds of problems.


[gpt.icon]What would you like to see happen in this conversation?
I would like to generate material for a [nishio.icon] manuscript. Instead of expressing logic by combining components that return true/false values, I would like to explain a computational approach that optimizes by expressing the desirability of components in terms of real values.
In what applications or areas do you intend to use [gpt.icon]"a computational approach to optimize the real-valued representation of the desirability of parts"? What applications or areas do you intend to use this approach and what benefits do you hope to derive from it?
[nishio.icon]As for neural network systems, first we achieved remarkable results in the field of image recognition, then we appointed a professional chess player in reinforcement learning, and at this moment, the application with a huge language model is the topic.
Can you be more specific about how [gpt.icon]"a computational approach to optimize the real-valued representation of the desirability of a part" could be used in these areas? What problems do you think it solves and what benefits do you think it provides in each of these areas?
[nishio.icon]The approach of trying to create a complex structure by combining reliably working parts, for example, is to try to guarantee the correctness of the parts by unit testing. Theoretically, complex objects will work correctly if parts that work correctly are combined correctly. In practice, however, human error increases with complexity. Another problem was the need for humans to understand and be able to verbalize what they were trying to create. This was a major hurdle.
[gpt.icon]Okay, so what advantages do you think "a computational approach to optimize the real-valued representation of the desirability of components" brings to the optimization of component combinations? And in what areas do you expect it to be applied?
[nishio.icon] That approach requires that "favorability" be verbalized. However, it was easier to verbalize "favorability" than to verbalize "procedure" in many areas.
[gpt.icon]I see that it is easier to verbalize the desirability of a part than to describe the procedure in a "computational approach to optimize the desirability of a part by expressing it in terms of real values". Do you have any thoughts on areas or specific applications where this approach would be useful?
[nishio.icon]Especially image analysis. The human approach to making parts was a head start.
[gpt.icon]I see, so you are saying that "a computational approach to optimize the desirability of a part by expressing it in terms of real values" is effective in image analysis. What do you think are the specific advantages of this approach in image analysis? Also, what kind of progress do you expect to see in image analysis using this approach in the future?
[nishio.icon]Later came the application of Go by expressing the quality of a game by the winner or loser at the end of the game.
[gpt.icon]You say that the "computational approach to optimize the desirability of parts by expressing them as real values" is effective in Go. What do you think are the advantages of this approach in evaluating Go games? Also, what kind of progress do you expect in the evaluation of Go games using this approach in the future?
[nishio.icon]Next is the giant language model, I'm not sure if GPT3 was Masked LM, so I need to check. This should be enough for this stream. Another stream is quantum annealing.
[gpt.icon] Got it. So, how do you think "a computational approach to optimize the real-valued representation of the desirability of components" will be applied in the field of quantum annealing? What problems do you expect it to solve and what benefits do you expect it to bring?
[nishio.icon]Let's leave that aside and talk about another flow. There is a trend where goodness is defined by a combination of components that return true or false. Prolog in the old days, then SAT, and now it has seeped into programming languages as the backbone of type inference.
[gpt.icon]I see, so there is a flow defined by a combination of components that return true or false. What do you think are the benefits behind this approach becoming ingrained in programming languages? Also, do you have any thoughts on problems or applications that could be solved by this approach?
[nishio.icon]Summarize what I said in this chat in bullet-point style.
[gpt.icon]Sure! Here's a summary of what we discussed in bullet points:
 The "parts preferredness" approach to optimization involves expressing the goodness of parts as real numbers and optimizing their combinations.
 This approach has been effective in image recognition and the evaluation of Go positions.
 In these fields, it is easier to express preferredness than to describe a procedure.
 There is also an approach that defines flow using parts that return true or false, which is now used in programming languages as type inference.
 The benefits of this approach include a clear definition of part behavior and suitability for solving certain types of problems.
[nishio.icon]In Japanese
[gpt.icon]Yes, let me summarize.
 The "part desirability" approach optimizes the goodness of a part by expressing it in terms of real values, and is useful for image analysis and Go phase evaluation.
 In these areas, it is easier to verbalize "desirability" than procedures and to optimize the combination of parts.
 The "combination of parts that return a boolean value" approach is used in programming languages to clearly define the behavior of parts.
 The advantages of this approach include a clear definition of the behavior of the parts and their suitability for solving specific problems.
[nishio.icon] in a one-line title.
[gpt.icon] The "component selection approach for optimization" is useful for image analysis and Go phase evaluation, and is also used in programming languages, making it suitable for clearly defining component behavior and solving specific problems.
