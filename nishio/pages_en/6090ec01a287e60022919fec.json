Hatena2009-08-15
code:hatena
 <body>
 *1250296044* Programming Camp Diary Day 4
 Yesterday I was exhausted and had no diary, but I have recovered a lot. Also, I am much happier mentally when I have a good prospect of completing the project.
 
 - globals便利
 - ruby
 -- make parse will show bytecodes and such.
 -- Create IDs from strings with rb_intern
 -- ID2SYM to make it a symbol
 -- Function calls put receivers on the stack, arguments on the stack, selectors and number of arguments and so on, SEND_R arguments
 
 Python
 >|python|
 >>> import dis
 >>> def foo():
 ...     obj.method("args1")
 ... 
 >>> dis.dis(foo)
   2           0 LOAD_GLOBAL              0 (obj)
               3 LOAD_ATTR                1 (method)
               6 LOAD_CONST               1 ('args1')
               9 CALL_FUNCTION            1
              12 POP_TOP             
              13 LOAD_CONST               0 (None)
              16 RETURN_VALUE        
 ||<
 
 Ruby
 
 >||
 build$ cat ../ruby/test.rb
 obj.method("args1")
 build$ make parse
 ./miniruby -I../ruby/lib -I.ext/common -I./- -r../ruby/ext/purelib.rb  ../ruby/tool/parse.rb ../ruby/test.rb
 # ----------------------------------------------------------------------
 # target program: 
 # ----------------------------------------------------------------------
 obj.method("args1")
 # ----------------------------------------------------------------------
 # disasm result: 
 # ----------------------------------------------------------------------
 == disasm: <RubyVM::InstructionSequence:<main>@../ruby/test.rb>=========
 0000 trace            1                                               (   1)
 0002 putnil           
 0003 send             :obj, 0, nil, 24, <ic>
 0009 putstring        "args1"
 0011 send             :method, 1, nil, 0, <ic>
 0017 leave            
 # ----------------------------------------------------------------------
 ||<
 
 Python obtains an attribute named "method" from obj and puts it on the stack at the time of obj.method, and then calls function. On the other hand, Ruby specifies the method at the time of send. On the Ruby side, in this example, obj is interpreted as a call to a method called object#obj...
 
 <hr>
 
 In Ruby, global variables must be marked with $.
 
 >||
 build$ make parse
 ./miniruby -I../ruby/lib -I.ext/common -I./- -r../ruby/ext/purelib.rb  ../ruby/tool/parse.rb ../ruby/test.rb
 # ----------------------------------------------------------------------
 # target program: 
 # ----------------------------------------------------------------------
 $obj.method
 # ----------------------------------------------------------------------
 # disasm result: 
 # ----------------------------------------------------------------------
 == disasm: <RubyVM::InstructionSequence:<main>@../ruby/test.rb>=========
 0000 trace            1                                               (   1)
 0002 getglobal        $obj
 0004 send             :method, 0, nil, 0, <ic>
 0010 leave            
 # ----------------------------------------------------------------------
 ||<
 ready, able
 
 <hr>
 
 Prelude.rb is embedded in ruby as a C string. It is inserted before all scripts.
 
 <hr>
 
 <a href='http://midiator.rubyforge.org/'>MIDIator - a nice Ruby interface to your system's MIDI services.</a>
 autodetect失敗するなぁ。
 <a href='http://ja.wikipedia.org/wiki/Audio_MIDI_%E8%A8%AD%E5%AE%9A'>Audio MIDI 設定 - Wikipedia</a>
 I'm not sure.
 
 <hr>
 
 >||
 # ----------------------------------------------------------------------
 # target program: 
 # ----------------------------------------------------------------------
 def foo
   $obj.method
   "return_value"
 end
 # ----------------------------------------------------------------------
 # disasm result: 
 # ----------------------------------------------------------------------
 == disasm: <RubyVM::InstructionSequence:<main>@../ruby/test.rb>=========
 0000 trace            1                                               (   1)
 0002 putspecialobject 1
 0004 putspecialobject 2
 0006 putobject        :foo
 0008 putiseq          foo
 0010 send             :"core#define_method", 3, nil, 0, <ic>
 0016 leave            
 == disasm: <RubyVM::InstructionSequence:foo@../ruby/test.rb>============
 0000 trace            8                                               (   1)
 0002 trace            1                                               (   2)
 0004 getglobal        $obj
 0006 send             :method, 0, nil, 0, <ic>
 0012 pop              
 0013 trace            1                                               (   3)
 0015 putstring        "return_value"
 0017 trace            16                                              (   4)
 0019 leave                                                            (   3)
 # ----------------------------------------------------------------------
 ||<
 
 An example of how pop is necessary if you don't need the result after calling a function. First
 >|ruby|
 def foo
   $obj.method
 end
 ||<
 I thought, "Oh, it doesn't pop," but Ruby returns the value of the last expression it evaluates without explicitly returning.
 
 <hr>
 
 I was asked to discuss the topic "Language 50 years ago, language 50 years from now" at the BoF. At first, when we were talking about the language 50 years ago, I wasn't very excited and wondered what to do, but as we talked about the language 50 years from now, the dopamine rush kicked in and it became quite interesting.
 - Hardware will be very fast in 50 years. Earth Simulator will be in your pocket.
 -- No, I don't put it in my pocket. I have little chips stuck all over the place.
 - The network won't be very fast, either.
 -- but it doesn't reduce latency. Not everything can be faster to the blue ceiling.
 - If the hardware is going to be so small and fast, why not put it in your brain instead of your pocket?
 - The hardware is going to be very fast, so why not just do Monte Carlo?
 - Support users with collaborative filtering
 - visual language
 -- Why wasn't the visual language successful?
 -- I think you're missing a dimension to make it 2 dimensional.
 -- Lack of ability to present chips in components
 
 <hr>
 
 I want to make something, because it was interesting to hear about the latest type I heard yesterday, such as "If the machine is going to be so fast, why can't the language processing system do Monte Carlo all over the place," which I uttered while dripping with dopamine.
 </body>

[Hatena Diary 2009-08-15 https://nishiohirokazu.hatenadiary.org/archive/2009/08/15]