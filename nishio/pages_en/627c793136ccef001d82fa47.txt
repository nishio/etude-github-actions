What do you keep in mind to create a service that people will continue to use?
OLD TITLE: [Losing Interest Stops Hands].

>[shoya140 https://twitter.com/shoya140/status/1524358105479499776]: During the interview (interview) for the Junior Creator Program, a prospective creator asked a prospective mentor, "What do you keep in mind in order to create a service that people will continue to use, rather than a work that you just finished creating? What do you keep in mind in order to create a service that people will continue to use? I thought it was interesting that the mentors who were present at the interview answered the question from different perspectives.

>[shoya140 https://twitter.com/shoya140/status/1524358370685329409]: My response was "If you lose interest in a service, you stop maintaining it, so be a heavy user of the service you created, and create a service that you yourself will be a heavy user of. I was thinking of "being a heavy user of the service you created, and creating a service that you yourself would be a heavy user of".

>[shoya140 https://twitter.com/shoya140/status/1524358477094793218]: On the other hand, the article I read today made me think that it is also important to "create a system that allows development to continue even after you leave your hands. / Inertia" and "No vision": Why "Hidemaru," a software earner for 30 years, is still at the forefront | Coral Capital coralcap.co/2022/05/hidema...

>[shoya140 https://twitter.com/shoya140/status/1524358780082868226]: On second thought, maybe what I am doing at Alphaben is the latter (creating a company and sharing/delegating work). However, I keep thinking about a better way to do this, since there is more work to be done when you create a company or organization.

>[shoya140 https://twitter.com/shoya140/status/1524406191060881410]: Just to add, being accepted does not mean you have to continue developing/maintaining the project after the period. I think that making it can be the goal, especially for projects that can pass on the knowledge gained in the process of making it:)

>[nishio https://twitter.com/nishio/status/1524407920972427264]: interesting question so I'll think about it too. I don't know what kind of state of mind you answered it in, and there are all kinds of people here on Twitter, including the obvious ones. twitter.com/shoya140/statu..

>[nishio https://twitter.com/nishio/status/1524408596158894080]: First of all, as a matter of course, it is not the creator but the user who decides whether to "keep using" the product. Therefore, it is necessary to reach the users, and to do so, it is necessary to release the product. You may think it is obvious, but this means that we have to look at "how to release" properly.

>[nishio https://twitter.com/nishio/status/1524409939791577088]: For example, if you are thinking of creating a native iOS app, how do you get test users to try it? What kind of procedures do you need to go through for review at the time of release? You need to find out. There may be pages along the way that are only in English, and you may have to go through some tedious procedures.

>[nishio https://twitter.com/nishio/status/1524410752886468615]: I tend to ask in interviews, "Does it really need to be a native app, or could it be a web app?" The reason why I tend to ask such questions in interviews is because such technology selection is a trade-off between cost and return, and it is useful to verbalize how you estimate the magnitude of what you can gain and what you need.

>[nishio https://twitter.com/nishio/status/1524412435792154624]: Next, in order to "keep using" the service, it needs to "keep moving". For example, the "environment" surrounding software is constantly changing as iOS is updated, new iPhones are released, and screen size variations increase. In order to keep moving, the code needs to be modified to adapt to the changes.

>[nishio https://twitter.com/nishio/status/1524414083432214530]: If we use servers or APIs from other companies, we need to think about how much the running cost (maintenance cost) will be, and whether we can keep paying it or make it profitable. If you use servers or APIs from other companies, you need to consider how much the running cost (maintenance cost) will be.
>Making a service profitable is many times more difficult than simply creating a service. But it is not impossible.

>[nishio https://twitter.com/nishio/status/1524416322053976065]: People often make suggestions like "all the existing ones are paid for, so I'll make a free one", which may be pleasant from the user's point of view, but But from the creator's point of view, it means "I pay all the running costs. We are very fortunate to be able to do that.

>[nishio https://twitter.com/nishio/status/1524417155252424705]: we talked about two things: the cost of disclosure and the cost of maintenance. The third is knowledge. For example, let's say a program you just wrote runs for 3 years without maintenance, and then 3 years later it needs to be modified. Where is the source code? If you read the code, it's so dirty that you don't know where to tweak it to achieve your goal. You want to rewrite the whole thing...

>[nishio https://twitter.com/nishio/status/1524420733148966917]: By the way, if you ignore the old version and rewrite it from scratch, you will get "for some reason I can't do something that was done in the old version". In the end, you will have to debug at the same cost as when you created the old version, or decipher the old code at a cost.

>[nishio https://twitter.com/nishio/status/1524422825456463872]: Sometimes things need to be reworked regardless of the creator's intentions. For example, programming languages, frameworks and libraries are updated. When I was a university student, I was working on a visualization program that ran on JavaApplet. Now I would have made it in JavaScript and Canvas. I did not port it.

>[nishio https://twitter.com/nishio/status/1524423777383186432]: The discussion about running costs reminds me of something. I was young at the time, so I stuck to free. I was young at the time, so I stuck to free.

>[nishio https://twitter.com/nishio/status/1524425444518363136]: At the time, I felt bad about making my company pay server maintenance costs for a web service that was not yet ready to be monetized, so I ported it to the Google App Engine and ran it for free. I was running it on Google App Engine for free. Now I would proudly claim "It's a waste to stop a service that so many famous engineers are using, it's cheap if you consider it as a PR cost.

>[nishio https://twitter.com/nishio/status/1524426628159266817]: Well, there is no if in history. The service died, the domain expired, and the links from various media turned into porn sites... I think this bitter experience has become my life's lesson.

>[nishio https://twitter.com/nishio/status/1524429452310065153]: fourth, your priorities in life change. You won't always be interested in what you are interested in now, and you won't always be able to use your time the same way you do now.
>For example, when I entered college, I found something I was more interested in, and I was so absorbed in it that I didn't have time for it. Can you maintain the web service you created in high school at such a time?

>[nishio https://twitter.com/nishio/status/1524430138917605376]: Especially common is the "I feel these problems with my schoolwork right now, so I'm going to create a service" kind of proposal. I don't think it's essential to continue the service, so I don't evaluate it too negatively, but I still wonder if this is something that will be left alone after I finish school.

>[nishio https://twitter.com/nishio/status/1524435877186838530]: As a side note, if you implement a service that uses natural language and has content that won't become obsolete for 10 years or so, you can outsource the operation to the publisher and there will be almost no operating costs on my end. I recommend you to do this (no, I'm not talking about that).