My way of learning atcoder (~blue)
Previous: [My way of learning atcoder (~light blue)]
Next Article:[My way of learning atcoder (~PAST Advanced)]
[https://gyazo.com/8422dc9634d556b4a3f836342ce7133f]

[ABC187]
	[https://gyazo.com/4eb05d85a958e0d5a4a935295a4971c7]
	[https://gyazo.com/1addfccb6ec00f69ae9311012615ae82]
　At the current pace, it looks like we'll converge around the bottom half of the blue.

Reaffirming what [my atcoder learning method (~light blue)] wrote

AtCoder Problems Statistics
	[https://gyazo.com/943175555b7a894aac3879ef10229fa6]
	 Number of ACs increased by 70 questions
	[https://gyazo.com/836a507b1055f05754a01012ed8fbfcd]
	[https://gyazo.com/c7e8dc628151050177099bbb84344427]
　　Except for [PAST Past Question Practice 202012], basically only on Saturdays and Sundays, no change.

I wrote in my last article about the "verbalization of awareness".
　We're still actively working on it.
　Not only [name the transformation technique], but also the properties that the problem has started to be linked.
　　For example.
　　　[Constraints with 18 vertices]
　　　[Constraint with side 10^5]
　　Not many since we just started doing this.
　　The last issue focused on "deformation techniques."
　　>This time I was able to solve D of ARC106, and the reason why I was able to solve it was because I was able to take three techniques [matrix halving], [binomial theorem], and [reordering addition] out of my brain drawer and use them.
　　More and more of them were in the form of "A→B" like [if the side is 10^5, you can use Dijkstra].
　　The focus was on "transformation techniques," i.e., B
　　But in order to realize that "B is available," we must first read the problem statement and recognize that it is "A."
　　How I became aware of it: [Strengths and "Typical Strengths" of competitive programming - chokudai's blog http://chokudai.hatenablog.com/entry/2018/04/23/165232]
　　 In [Typical Power] I wrote
　　 >Recognizing a problem as "a combination of components smaller than the problem" allows us to view even a first-time problem as "a combination of known components".
    >When I was thinking of "[problem transformation]," I was recognizing the whole problem as a single component.
    >Not so, it is important to first divide and recognize the problem
   It was the right time to realize the concept of [problem division].
　　I'm building [conceptual handles] on the problem to increase [cognitive resolution] on the problem.

What I've newly started doing
　[AtCoder Failure List] 11/22-.
　[AtCoderEntrypoint] 12/13- 
　Started servicing ABC186 while waiting for it to start.


　[I've been at the intermediate level since the first time, and I wanted to move up to the advanced level, so I decided to do some past papers.
　> I'm going to take the Algorithm Exam, time-shifted just in time for the end of the exam. Looking back on the last time I took the exam, I felt pain because I couldn't refer to the questions for 2 weeks after taking the exam, I couldn't push the libraries I maintained, and I couldn't write anything I learned in Scrapbox related to the problems. I would rather learn by reading the explanations right after solving the problem. [Twitter https://twitter.com/nishio/status/1336242805115506688]
　　[PAST Past Practice 202012]
　　The result [of the 5th Algorithm Practical Skills Test] was also intermediate, so I think my next goal is to make it to advanced level.

	[attributed to least cost flow] organized

landing practice
　The last time I did [return training], it seemed that I was mainly solving problems around the green and light blue borders.
　When I look at the Recommendation now, I see a problem near the light blue and blue border.
　I thought about doing it, but ended up doing very little.

