Hatena2011-03-31
code:hatena
 <body>
 *1301568313*printf("%d", f) behavior when f is a float
 I was talking about how the type should specify not only the byte width but also how to encode it in binary, and wrote code to confirm it. I thought I could cut corners and do it with method B, but I'm having trouble because I got unexpected results. â†’Solution.
 
 >|cpp|
 #include<stdio.h>
 int main(){
   int i;
   float f = 1.0;
   /* Straightforward method A (PS: Don't do it!) */
   i = *(int*)(&f);
   printf("A %d\n", i);
   /* Cutthroat way B */
   printf("B %d\n", f);
 }
 ||<
 
 String it like this in Ruby, and say.
 >|ruby|
 irb> def pp(x) x.to_s(2).rjust(32, "0") end
 irb> pp 1065353216
 => "00111111100000000000000000000000"
 ||<
 
 >||
 At 0.500000
 A 1056964608 : 00111111000000000000000000000000
 B 8388608    : 00000000100000000000000000000000
 
 1.000000
 A 1065353216 : 00111111100000000000000000000000
 B 8388608    : 00000000100000000000000000000000
 
 2.00000000 time
 A 1073741824 : 01000000000000000000000000000000
 B 8388608    : 00000000100000000000000000000000
 ||<
 
 Why doesn't method B change the value? Well, if I use method A, it doesn't matter, but it's not neat to know why.
 
 <hr>
 Addendum before I get angry
 >||
 $ uname -a
 Darwin nishio.local 10.7.0 Darwin Kernel Version 10.7.0: Sat Jan 29 15:17:16 PST 2011; root:xnu-1504.9.37~1/RELEASE_I386 i386
 
 $ gcc -v
 Using built-in specs.
 Target: i686-apple-darwin10
 Configured with: /var/tmp/gcc/gcc-5659~1/src/configure --disable-checking --enable-werror --prefix=/usr --mandir=/share/man --enable-languages=c,objc,c++,obj-c++ --program-transform-name=/^[cg][^.-]*$/s/$/-4.2/ --with-slibdir=/usr/lib --build=i686-apple-darwin10 --program-prefix=i686-apple-darwin10- --host=x86_64-apple-darwin10 --target=i686-apple-darwin10 --with-gxx-include-dir=/include/c++/4.2.1
 Thread model: posix
 gcc version 4.2.1 (Apple Inc. build 5659)
 ||<
 
 <hr>
 solution
 >>
 nyaxt: I read Nishio-san's blog. I read his blog.
 nyaxt: I think it's ABI. x86 puts everything on the stack, but x64 passes registers, so floating point numbers must be in mmx registers (PS: s/MMX/SSE/ig below)
 
 nyaxt: I knew it! I checked the code in my hand and it is movss to xmm0 for B!
 
 nishio_: You mean that you put it in an MMX register and called printf with the intention of getting it from there, but printf says "it's %d, so let's get it from the stack" and returns a weird value?
 nyaxt: it should be taken from the register, not from the stack
 nishio_: you mean that you put the floating point in the MMX register to pass it, but printf takes it from another register and the value is weird?
 nyaxt: yes, yes!
 
 nyaxt: you can apply this kind of magic tricks
 <pre>
 #include<stdio.h>
 int main(){
   printf("A: %d %f %d %f \n", 1, 2.0, 3, 4.0);
   printf("A: %d %f %d %f \n", 1, 3, 2.0, 4.0);
 }
 </pre>
 nishio_: interesting
 nyaxt: the original story is by shinh, so http://shinh.skr.jp/slide/tcc64/000.html
 nishio_: I'll mention it.
 <<
 
 <hr>
 Solution 2 when I wrote such things as
 >>
 @herumi: No, you can't complain about what happens, because there is no straightforward or trivial way to do it, and you can use C99 %a for gcc. http://linuxjm.sourceforge.jp/html/LDP_man-pages/man3/printf.3.html
 <<
 
 >>
 @gusmachine: using union is the right thing to do, right? http://bit.ly/fUn8wb
 <<
 >|cpp|
 #include<stdio.h>
 union intfloat{
   int i;
   float f;
 };
 
 int main(){
   intfloat x;
   x.f = 1.0;
   printf("%f\n", x.f);
   printf("int %d\n", x.i); //-> 1065353216
 }
 ||<
 
 This is the correct answer.
 
 <hr>
 
 >>
 @kosaki55tea I don't think xmm is generally called MMX register.
 <<
 Yes, it says SSE register here too: <a href='http://homepage1.nifty.com/herumi/prog/prog00.html'>about x86 CPU</a>.
 
 *1301581470*Minimum VM
 If you have a copy of "Fundamentals of Language Design" of WEB-DB Press vol. 60 at hand, please refer to p. 28. The "while counting down," as shown here, is explained in C in the manuscript, but I really wanted to touch on machine language and so on. I really wanted to touch on machine language and so on, but due to lack of space and time, I haven't been able to do so.
 So, I thought that raw machine language would be a lot of work because it would have to explain a lot of things, so I made a minimal virtual machine to realize while.
 
 >|python|
 # -*- encoding: utf-8 -*-
 """
 mini-VM Minimal VM for explanation
 What is the minimum? Does it need to be minimal?
 Does it have to be Turing-complete?
 
 jump pos : change pc to pos
 if_eq a1 v1 pos : jump pos if mem[a1] == v1
 print a1 : print mem[a1
 set a1 v1 : set mem[a1] to v1
 sub v1 : subtract v1 from mem[0
 """
 
 memory = [0] * 10
 code = [
     ("set", 0, 10), # A = 10
     ("if_eq", 0, 5), # 1: if A == 0
     ("sub", 1), # A = A - 1
     ("print", 0), # print A
     ("jump", 1),
 ]
 
 def eval(code):
     cur = 0
     while cur < len(code):
         line = code[cur]
         cur += 1
         op = line[0]
         if op == "set":
             memory[line[1]] = line[2]
         elif op == "print":
             print memory[line[1]]
         elif op == "if_eq":
             if memory[0] == line[1]:
                 cur = line[2]
         elif op == "sub":
             memory[0] -= line[1]
         elif op == "jump":
             cur = line[1]
 
 eval(code)
 ||<
 
 Also, in Python bytecode, it looks like this. I guess it's a little different in that the boolean values are packed on the stack.
 >||
 >>> def foo():
 ...     x = 10
 ...     while x > 0:
 ...             print x
 ...             x -= 1
 ... 
 >>> dis.dis(foo) # delete where not needed
   2           0 LOAD_CONST               1 (10)
               3 STORE_FAST               0 (x)
 
   3           6 SETUP_LOOP              33 (to 42)
         >>    9 LOAD_FAST                0 (x)
              12 LOAD_CONST               2 (0)
              15 COMPARE_OP               4 (>)
              18 JUMP_IF_FALSE           19 (to 40)
              21 POP_TOP             
 
   4          22 LOAD_FAST                0 (x)
              25 PRINT_ITEM          
              26 PRINT_NEWLINE       
 
   5          27 LOAD_FAST                0 (x)
              30 LOAD_CONST               3 (1)
              33 INPLACE_SUBTRACT    
              34 STORE_FAST               0 (x)
              37 JUMP_ABSOLUTE            9
         >>   40 POP_TOP             
              41 POP_BLOCK           
 ||<
 
 So now I can make if, while, and for, but when I want to make a function, I can't use the current "jump to fixed destination". I thought of making call and return functions, but the problem is that the program counter is not in the memory area of this VM, and I should have put the values necessary for such management in mems.
 
 <hr>
 If you're going to write in Python and show a disassembled version, why not just use native? I realized that it was a good idea, so I tried it.
 
 >|cpp|
 #include<stdio.h>
 int main(){
   __asm__("#set x value");
   int x = 10;
   __asm__("#start loop");
   while(x > 0){
     __asm__("#print x");
     printf("%d\n", x);
     __asm__("#decrement x");
     x--;
     __asm__("#end of loop body");
   }
   __asm__("#end of loop");
 }
 ||<
 
 >||
         #set x value
         movl    $10, -4(%rbp)
         #start loop
         jmp     L2
 L3:
         #print x
         movl    -4(%rbp), %esi
         leaq    LC0(%rip), %rdi
         movl    $0, %eax
         call    _printf
         #decrement x
         decl    -4(%rbp)
         #end of loop body
 L2:
         cmpl    $0, -4(%rbp)
         jg      L3
         #end of loop
 ||<
 
 Suddenly flying down? Hmmm... Well, I feel that if the explanation is written properly, even people with no prior knowledge can read it.
 </body>
 <comments>
 <comment>
 <username>kosaki</username>
 <body>I'm guessing you're not pushing it onto the stack, because the %f is in the floating register, but you're going to the general purpose register because it's %d, or something along those lines</body>.
 <timestamp>1301569002</timestamp>
 </comment>
 </comments>

[Hatena Diary 2011-03-31 https://nishiohirokazu.hatenadiary.org/archive/2011/03/31]