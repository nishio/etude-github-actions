Hatena2013-07-07
code:hatena
 <body>
 *1373185098*String Parsing Part 3: History of Regular Expressions
 In the first session, we learned why it is necessary to cut out parts of specific patterns from strings, and in the second session, we learned that as patterns become more complex, the code to implement them becomes very complex, and "regular expressions," which allow computers to create such complex code instead of humans writing it.
 
 Here is a light history of how these regular expressions came to be. [1]
 
 (Note: This is a write-up.)
 
 ** McCullopitz's neural net
 In 1943, Warren McCulloch and Walter Pitts published a study that modeled the behavior of nerve cells (neurons) and how multiple nerves could behave as a network. [2] This research led to later neural networks. [3]
 
 In this paper they invented a unique notation to represent complex neuronal connectivity relationships.
 
 [f:id:nishiohirokazu:20130707171727p:image]
 
 (Footnote [1] This story is based on the contents of "Detailed Regular Expressions" p. 83 - p. 88)
 
 (Footnote [2] McCulloch, Warren S., & Pitts, Walter H. (1943), "A Logical Calculus of the Ideas Immanent in Nervous Activity," Bulletin of Mathematical Biophysics (Chicago: University of Chicago Press) 5: 115-133. "Neurons output a binary value of 1/0 depending on whether they are excited or not," "there are excitatory and inhibitory inputs," "excitation occurs when the excitatory input exceeds a threshold value," etc. The models of neurons that are still commonly used are the ones they came up with. For this reason, this type of neuron is called a McCulloch-Pitts type neuron.
 
 (Footnote [3]: Many people nowadays use the term "neural net" to refer to a "perceptron with backpropagation," but be careful not to confuse the two, as the perceptron was born in 1962 and backpropagation in 1986, much later. You need to be careful not to confuse them).
 
 
 ** Unification by kleene
 
 It was not only research on neural nets. It was also a time when formal linguistics, the study of language in a well-defined form, and automata theory, the study of modeling computers, were also active. In each field, various notations were invented to express similar things.
 
 Stephen Kleene organized this and invented terms such as regular set, regular language, and regular expression. In other words, Stephen Kleene is the direct inventor of the term "regular expression.
 
 It is from him that we refer to the asterisk (*) meaning "zero or more repetitions" as "kleene closure" or "kleene star."
 
 (TODO: Consideration needed. I started the story with neural nets because of Jeffrey E. Friedl's explanation, but shouldn't more space be devoted to formal linguistics and automata theory?)
 
 (TODO: Robert L. Constable at http://www.sciencedirect.com/science/bookseries/0049237X/101 "The Role of Finite Automata in the Development of Modern Computing Theory* Original Research Article" Pages 61-83 to find a description of what Kleene was trying to unify.)
 
 (Kleene, Stephen C. (1956). "Representation of Events in Nerve Nets and Finite Automata". In Shannon, Claude E.; McCarthy, John. Automata Studies. Princeton University Press. pp. 3&#8211;42)
 
 ** Application to string search
 
 - 1968 Ken Thompson: "Regular Expression Search Algorithm"
 
 - egrep Alfred Aho (when was he born?)
 
 
 
 (Footnote: Ken Thompson's accomplishments include creating the B language, a predecessor to C, in 1969; as of 2013 he is working on the Go language at Google.)
 (Footnote: Alfred Aho's achievements include the creation of a language that can handle regular expressions called AWK in 1977. The language was named after the initials of Alfred Aho, Peter Weinberger Brian Kernighan, K of K&R.)
 (The complexity of regular(-like) expressions http://dl.acm.org/citation.cfm?id=1881467)
 
 ** Standardization (this could be removed)
 
 - 1993 Standardization of regular expressions by POSIX (Portable Operating System Interface) (ISO/IEC 9945-2:1993)
 
 ** Development of Perl and the emergence of PCRE
 
 - Perl The first general-purpose scripting language that can use regular expressions
 
 (Footnote: Perl has been leading the development of regular expressions, but with the Parl 6 Rules, it is abandoning most of its compatibility and moving to a new engine, and it will be interesting to see how this will affect other languages in the future)
 (TODO: There may be disagreement regarding "first". Depends on definition of "generic.")
 
 - 1997 Philip Hazel: PCRE (Perl Compatible Regular Expressions) â†’ de facto
 
 ** Ruby and Oniguruma
 
 (This is a work in progress.)
 </body>

[Hatena Diary 2013-07-07 https://nishiohirokazu.hatenadiary.org/archive/2013/07/07]