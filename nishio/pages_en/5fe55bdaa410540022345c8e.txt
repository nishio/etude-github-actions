Doubling → Bifurcation search
When [bisection search] is performed on [doubling] results, it is simpler and faster to make the code tightly coupled than to think of them as separate parts.

code:python 
 # find x s.t. f(x) = y
 x = 0
 for i in range(30 - 1, -1, -1):
     dy = fs[i]
     if y >= dy:
         y -= dy
         x += 2 ** i

[PAST2M]
 code:python 
  for i in range(30 - 1, -1, -1):
      up = db_ups[i][cur % D]
      if countdown >= up:
          countdown -= up
          cur = db_next[i][cur % D]
          ret += 2 ** i

relevance
　Doubling implementations of [Least Common Ancestor] perform a binary search on the doubling results.
　　When I verified with AOJ, it was a TLE unless I used this bisecting search method.
