Hatena2008-09-22
code:hatena
 <body>
 *1222049375*Diary of the last day of the young people's meeting
 If you want an FPGA, I heard you can buy a $189 starter kit from a place called avnet.
 
 Firefox book given by Mozilla to "the person with the median number on paper".
 >>
 > suu-g # my guess : almost half e, almost half pi
 <<
 Oh shoot, it's definitely possible. I should have answered about 3. I answered 7.
 
 result
 There is only one e. There is no pi. The median was 82! The closest to the average was 9999 because someone wrote 1000000!　The closest to the average was 9999 because someone wrote 1000000!
 
 *1222078263* I left.
 18:47
 Whew. I'm back. I'm feeling very full, but my body is still tired. It would have been easier if I had just gone to bed, but then I wouldn't have been able to watch yesterday's Vim v.s. Emacs battle, so I guess physical strength is important to keep watching and listening to interesting things. I think I need to think about getting a little fitter.
 
 
 Also, to compare something to something else and discuss which is better, you need to have some knowledge of both. I thought that it is just a believer to criticize the other when you know only one of them... I know Emacs to the extent that I can use keyboard macros, and I think that I am claiming "Emacs is better than Vim" when in reality I am not able to use macros in Vim, and the reality of that is "keyboard editors with macros are useful!" But in reality, they are just saying, "An editor with macros is convenient! I will use Vim for the time being.
 
 *1222094878* Explanation and apology for the example survey.
 The example survey that caused a lot of animosity, but a very good story was told in the comments section.
 
 http://q.hatena.ne.jp/1221708568#c131208
 >>
 When we talked about what programming should be, I remember him saying, "We're not smart enough (to know the answer.)"
 <<
 
 I agree with you too.
 
 I wonder if one of the reasons this survey was so antagonistic was that the wording of the questions was misleading, as if the questioner thought he or she knew the essence of the question. In fact, although I may vaguely think that this is more essential than that, I am not confident enough to tell people that this is the essence. So it is very interesting to hear various people's opinions in this way:
 <a href='http://q.hatena.ne.jp/1222018850'>What do you think is [the essence of what programming is]? (Reference)http://q.hatena.ne.jp/1221708568 - Human Power Search Hatena</a>
 
 -----
 
 I think one of the reasons for the antipathy is the lack of elaboration in the problem statement and the question. For example, in the second sentence of this statement, "freshman undergraduates with programming experience" is a mistake for "freshman undergraduates with limited programming experience.
 >>
 I have a question for those who are familiar with programming. I am supposed to teach programming to first year undergraduates with programming experience at a university.
 <<
 However, I realized that there was a bigger mistake in the first sentence. It should have read, "This question is for people who are familiar with programming languages," not "This question is for people who are familiar with programming."
 For example, if you ask me, "If someone who has worked exclusively in C++ for 10 years is an expert in programming," I would answer, "I think so. Even if he/she cannot answer the question about functional languages, I think he/she has enough experience to be called an "expert". On the other hand, if you ask, "Are you familiar with programming languages? Knowing only one language does not mean that you are an expert in that language.
 Because of the incorrect beginning of the question, some of you may have opened the question thinking, "Oh, this is the right question for me," and then were disappointed because the actual question is completely different. We apologize for that.
 
 The question text also lacks a lot of polish. For example, the correct answer is "In Scheme, functions are first-class objects," but it might have been better to use a question such as "In Scheme, functions can be passed as function arguments. For those who are used to object-oriented languages such as C++ or Java, the question "Is it an object? The question is not a question for those who are used to object-oriented languages such as C++ and Java.
 A Google search for "first-class object" will bring up the statement "Scheme procedures are first-class objects," and a search for "first-class object" will bring up Wikipedia's explanation. However, whether you know the term "first-class object" or not is not what we wanted to ask in this question, so it was a mistake to use the terminology carelessly.
 
 The remaining false options were also made too appropriately.
 For example, the choice of different operators for integers and real numbers, which I wrote with OCaml in mind, is often mentioned because OCaml's strictness on types is very important when talking about the differences between different languages. However, even if you know that OCaml has such a specification, it does not prove that Scheme does not have such a specification, and many people seemed to be troubled here.
 
 I wrote "indent to represent a block" in Python, and the same for Haskell and ABC. I wrote "#define for macro definitions" in the image of C. Begin to end" is like Pascal, though the period is superfluous. All of these "choices that replace the name of the language with Scheme in sentences describing features of other languages" have the same problem.
 
 I apologize to anyone who has been bothered by the appropriate choices in this area.
 
 -----
 
 I know some of you were offended by other comments such as "noise" or "I thought it was supposed to be easy". I apologize. Whatever the reason, I think it is not good that I made a comment that offended people. However, if you could understand that I did not mean to insult you, it might make you feel a little less uncomfortable. I am sorry, but please allow me to make my excuses.
 
 First of all, it all started when a friend of mine asked me, "Which is easier, Haskell or Python?" Python is a procedural language like many popular languages, while Haskell is a pure functional language. Naturally, I thought Python was easier, but I thought it was not good to answer "Of course it's Python" without showing proof, so I gave him Hatena points and told him to do a survey on Hatena Human Resource Search. Here are the results.
 
 http://q.hatena.ne.jp/1221581192
 
 It is almost half Python and half Haskell. Why did we get this result? Is it because many people answered appropriately? If this is the case, it would give a wrong impression. So, I decided to submit this survey.
 
 http://q.hatena.ne.jp/1221584268
 I've been asked to teach someone with a few months of programming experience one of the following languages. Which of the following languages do you think is best suited?" The question asked, "Which of the following languages do you think would be best suited for teaching a person with a few months of programming experience? The results were, in order, Python in first place and Scheme in second. However, third place went to Coq!
 http://en.wikipedia.org/wiki/Coq
 Coq is such a minor language that there is no Japanese article on Wikipedia yet, and it is not very beginner-friendly. I figured that there must be some noise stirring things up, and since Coq was the top choice, there must be bots that automatically answer, or users who answer randomly to questions they don't understand just for the points, so how do I get rid of that noise? How to get rid of the noise?
 
 Then I came up with the idea of "preparing a question that cannot be answered by 'people who randomly answer questions they do not understand' for the first question, and cross-tabulating the correct answers to that question. I tried that in the example survey. The reason I chose the question, "Which of the following would be appropriate for teaching first-year undergraduate students? The term "the nature of programming," which was the subject of the discussion, was not meant to be profound. And as I mentioned above, I wrote "people who are familiar with programming" when I should have written "people who are familiar with programming languages.
 
 As a result, the question about "the essence of programming" to "those who are familiar with programming" has been narrowed down to "correctly answering a question about Scheme. This is a situation that is understandably antagonistic.
 On the other hand, I had not yet realized my mistake and thought I had explicitly targeted the questions to "people who are familiar with programming languages," that is, people who learn a new language every year or two and have more than a decade of programming experience. When I opened the questionnaire, I was shocked to find that the percentage of correct answers was only 6% for questions that I thought could be answered by my intended target audience. I then made statements such as "I thought the questions were easy" and "19 out of 20 were noise.
 
 It all happened because of my cutting corners, mistakes and misunderstandings. I am truly sorry to anyone who was offended by this one incident.
 
 *1222105766*Verilog Study Diary
 for now
 http://cas.eedept.kobe-u.ac.jp/~arai/Verilog/chap5.html
 http://japanese.sugawara-systems.com/tutorial.htmを流し読みしてみた.
 
 I have seen so many languages that are trying to move away from hardware, so this tight coupling is interesting.
 
 This is also begin..end...I found a description that Ada is based on...always foo; but it's not...
 >||
 always begin
     foo;
 end
 ||<
 means the same as the relationship between if(foo) bar; and if(foo){bar;} in C. I wonder if both originated from Ada.
 
 Also interesting is that there are three types of assignments. You don't have to execute instructions one by one, so you can do assignments in parallel at the same time: C-like sequential assignments and simultaneous assignments.
 And the third assignment is no longer an assignment but rather a declaration of a join. Just write the assignment once, and as soon as the value on the right side changes, it is immediately assigned to the left side. It's like "wired together.
 I got the vibe, but I might stumble when I actually try to write it. I want to try.
 
 There are sometimes instructions sandwiched between assignment statements that delay processing!
 
 You can use 3-bit integers, 5-bit integers, and so on. 3'bx10 is 3 bits, and the most significant bit is indefinite, but the last two bits are 1 and 0, apparently.
 
 Comparison operators are normal, too. I have everything I need to make the "most-limited AI" that I wanted to make. Now it depends on how many states can be read in parallel and how many times faster it can be done by CPU depending on the hardware limitation. I think it is a good idea to write the code for now.
 </body>
 <comments>
 <comment>
 <username>t-tanaka</username>
 <body>Please see yo-kun's comment. The problem is that people who know many programming languages but happen not to know Scheme are not able to solve it in any way, even if they use the elimination method, etc. <BR><BR>There are many other languages where functions are first class objects, such as JavaScript and Pnuts. Therefore, if someone who knows JavaScript and other languages in detail but not Scheme tries to solve the problem by process of elimination, he or she will say, "This is JavaScript, so it's different," and will not be able to answer correctly. After all, they think that "the language specification of Scheme is suitable for implementation as a queue machine, so parallelization is easy," which does not apply to any language they know, is the correct answer, and they give a wrong answer. <br><br><br>"begin~end" is Pascal, etc., though the period is superfluous. <BR><BR>It is not superfluous. The period eliminates Ruby, VB, etc. <BR><BR>By the way, "Scheme statements end with a semicolon" is a choice with which language in mind? You don't mean Java or C, do you? </body>
 <timestamp>1222099269</timestamp>
 </comment>
 <comment>
 <username>yo-kun</username>
 <body><br>> However, I noticed a bigger mistake in the first sentence. <br>>I should have written <br>"This is a question for people who are familiar with programming languages" instead of "This is a question for people who are familiar with programming". <br><br>For example, if you ask me, "If you've been working exclusively in C++ for 10 years, are you familiar with programming?"<br>I would answer, "I think I am familiar. <br><br>My main argument is exactly this. <BR><BR>The first question is to determine if you are "familiar with programming". <br>I think that if the answer is "yes," then those who pride themselves on being knowledgeable about programming, having worked exclusively in C++ for 10 years, will misunderstand<br>that "nishiohirokazu thinks that being able to solve this problem is a condition for being knowledgeable about programming"<br>. <BR><BR>And since it is clearly stated "to judge", it could be taken to mean "a necessary condition" or "a minimum condition" depending on the case. <br><br>In such a situation, it is impossible to have a proper discussion with someone who understands or misunderstands that "someone who is familiar with a program = someone who is familiar with a programming language". <BR><BR>If a person who takes pride in being familiar with programming "language" cannot solve this problem, it is probably "too self-conscious" or "a big chance" as Mr. practicalscheme says in his comment, but for a person who has been working with C++ for 10 years, it is not a problem. However, for those who have been using C++ for 10 years, it is just like Mr. r24's comment, "Scheme is the same level as Brainf*ck. For those who have been using C++ for 10 years, I think it is "Scheme is the same level as Brainf*ck, a language that can do this and that, and it's interesting" or "Well, it's not a practical language. <br><br><br>These are the two sides of the coin. <br><br>Whichever side you stand on, the other side's arguments sound abusive and sterile. </body>
 <timestamp>1222103388</timestamp>
 </comment>
 <comment>
 <username>pekochu</username>
 <BODY>I read the comment section of the survey about the matter with great intellectual curiosity. <BR>I know it was a little rough and tough, but thanks for the good opportunity! <br>SICP, I thought I would read it again. </body>
 <timestamp>1222107297</timestamp>
 </comment>
 <comment>
 <username>hogege</username>
 <body>In the context of the question at question:1221708568,<br>I am the one who read that "programming" is different from "programming language". <BR><BR>After seeing the series of exchanges in the comments section at question:1221708568 and this entry,<BR>my question is simply out of interest. <BR><BR>The question is<BR>"I assume I am teaching programming to first-year undergraduates."<BR>"I want to teach them the essence of what programming is."<BR><BR>Is "programming" as used here<BR>"programming language"? <br><br>Are you referring to "programming" as used here<br>or "programming language"? <BR><BR>Or do you mean "programming" (not a programming language)? <BR><BR>I myself have not had any systematic education, so I was wondering if there are any books on this subject that I could look up in bookstores or other places if I could learn <BR>"programming" (not a programming language) in a systematic way at a university. <br><br>I was thinking of going to a bookstore or something like that. <br><br>#I wonder if people who understood "programming = programming language" and people who misunderstood it like I did had a different take on the question in Q2? </body>
 <timestamp>1222108483</timestamp>
 </comment>
 <comment>
 <username>shiro</username>
 <BODY>I agree that the wording of Mr. Nishio's question was misleading, but I then think that the difference between "programming" and "programming language" is not something that should be emphasized in this issue. This is because the question was clearly directed to the position of "teaching programming". And not in on-the-job training, but in a general course for students. <BR><BR>A "programming language" is the largest and most essential tool in "programming" (even if there is a system for graphically connecting blocks to "program", that system is a "programming language"). ) In discussing which tool to choose, knowing at least the pros and cons of each of the candidate tools is a "qualification to step into the discussion ring. (Note: It is not necessary to know a lot about languages if we are discussing "programming". If we are discussing "teaching programming," that is the issue here.) <BR><BR>You can teach woodworking with either a Japanese saw or a Western saw, but you have to know both when considering which one to choose for a technology teacher. Knowing both, you know that "pulling and cutting" is a technique specific to Japanese saws, but "the direction of the grain influences the direction of future bends" is the common essence of woodworking. If you teach these two things with equal weight to students who know only Japanese saws, they will learn only "pulling and cutting" which will make their immediate work easier, and they may forget about the direction of the grain which will affect them in two years time. Wouldn't that be bad? <BR><BR>I'm not saying that you should be familiar with every language. I think that if you don't know at least enough about the languages listed as options to be able to separate "language-specific techniques" from "universal techniques," you won't be able to discuss which one is best to teach. I don't think useful results will come from discussing "which sport to teach in physical education class" between people who only know soccer, rugby, and tennis. </body>
 <timestamp>1222112744</timestamp>
 </comment>
 <comment>
 <username>web10</username>
 <body>>This question is clearly directed at the "teaching programming" position. <BR>First of all, I think it is impossible to try to achieve accuracy by ignoring the fact that anyone can "answer" the Hatena survey before such a thing. <br>The first and last questions are for BOTs and people who answer without thinking, so there should be dummy questions, and since people who are not familiar with programming will also answer, there should be a question that says "If you don't know programming, click here" instead of "Please don't answer". <br>The reason for the low percentage of correct answers in this survey is that the survey was designed to allow "people who don't know programming" to choose a question. <br>The survey was designed to allow "people who don't know programming" to select the questions. <br>http://q.hatena.ne.jp/1222138124</body>
 <timestamp>1222138423</timestamp>
 </comment>
 <comment>
 <username>shiro</username>
 <body> Ah, yes. I only vaguely remembered "the end of the statement is a semicolon" too, so I checked. http://www.adaic.org/standards/05rm/html/RM-5-1.html (The definitions of simple_statement and compound_statement don't include the semicolon, but if you look at the definitions of the individual statements If you look at the definitions of the individual statements, you will find it.) <br>The Declaration as well as the Statement ends with a semicolon, but this does not contradict the statement that the statement ends with a semicolon. </body>
 <timestamp>1222138569</timestamp>
 </comment>
 <comment>
 <username>nishiohirokazu</username>
 <body>I understand what you are saying, shiro, but I think you should have emphasized the difference between "programming" and "programming language". <BR>If the question text can be rewritten now, I would like to add a note now. <BR>Because the fact that I made the difference between "programming" and "programming language" ambiguous in the question did not convey my intention to ask "a person who knows the characteristics of various programming languages" about "a language suitable for teaching programming to students". It is. <BR><BR>Another problem is that, as hogege mentioned, it is difficult to know "whether you want to teach programming to students or programming languages". <BR><BR>People are different creatures, so what you write that you think will be understood may not be understood. <BR><BR>In fact, I believe that the fact that shiro's question was clearly directed at the position of "teaching programming" was not conveyed, and that is the reason why many people were offended this time. </body>
 <timestamp>1222158438</timestamp>
 </comment>
 <comment>
 <username>nishiohirokazu</username>
 <body>hogege-san<br>I think the "SICP" (Structure and Interpretation of Computer Programs) that pekochu mentioned is often used as "a book that allows you to learn programming systematically". It is a textbook that has been used at MIT for many years, and unfortunately(?) The code is written in Scheme. <BR><BR>I just felt that "teaching programming or teaching programming languages" is a very deep question. I don't think it makes much sense to teach programming languages (classification and history) without teaching programming. However, if you don't teach some, I think there is a danger that students will assume that programming is like that, that the language they are using has function X and not function Y. I think it would be better to teach them that another language has function X and not function Y. </body>
 <timestamp>1222159944</timestamp>
 </comment>
 <comment>
 <username>kajuntk</username>
 <BODY>I'm going to write this in two parts: impressions and opinions. <BR>I'm taking advantage of the flight to get access to the site. <BR><BR>Thank you very much! <BR><BR>I think you're missing the point of this whole mess by making it all so easily settled. <BR><BR>You are looking for attribution of the cause of offence to the text and content, but I think that is also more primitive than the superficial things you are apologizing for above. <BR>While Nishio is the cause of the uproar that created the opportunity for bashing, I don't think it's anything to be too concerned about, since the people who were bashing were just "taking advantage of the problem for bashing purposes. <br>Because it is impossible to write a sentence in Japanese that will not offend everyone, even if you apologize for it, people will see an opportunity to replace reason A with reason B and bash you again. <BR>I don't think it's constructive to respond to every one of those. <br>Because the goal is bashing, there is no way to prevent it. <BR>That's what I was talking about on the 21st on a topic concerning another person. <BR><BR><BR>Suggestion<BR>In this case, since it was found that this topic is not appropriate as a population for the Hatena survey, what should we do to make the survey more accurate? <br><br>I think we should be talking about something more constructive, like how we can make the survey more accurate. <br>After all, we still don't know what we want to know, do we? </body>
 <timestamp>1222160746</timestamp>
 </comment>
 <comment>
 <username>yo-kun</username>
 <BODY>>The people who were beating the issue to be frank were just <taking advantage of the issue for bashing purposes><BR><BR>I was in the position of trying to figure out why people were getting angry, and I am not at all defending criticism using offensive language, but<BR>I "totally" agree with you on this one. I disagree. </body>
 <timestamp>1222162049</timestamp>
 </comment>
 <comment>
 <username>kajuntk</username>
 <body>><br>Yo-kun,<br>I'm not asking you to agree with my opinion, and that's why I'm dividing it into opinion and feedback<br><br>If you want to continue, please go to my blog, not here.
 <timestamp>1222163443</timestamp>
 </comment>
 <comment>
 <username>shiro</username>
 <body>As you may know, Nishio, I remember that Abelson and Sussman used Scheme at SICP because they wanted to "teach universal concepts about programming without being bothered by trivial techniques specific to programming languages, and with Scheme we don't have to spend time teaching the language itself. Scheme allows us to spend less time teaching the language itself. For the same reason, I see that Sussman also uses Scheme as a modeling and verification tool in his mechanical engineering textbook (SICM). <BR><BR>From SICP's Preface:<BR>"In teaching our material we use a dialect of the programming language Lisp. We never formally teach the We never formally teach the language, because we don't have to. we just use it, and students pick it up in a few days. ... All of the formal properties can be covered in an hour, like the rules of chess. After a short time we forget about syntactic details of the language (because there are none) and get on with the real issues -- figuring out what we want to compute, how we will decompose problems into manageable parts, and how we will "<br><br>By the way, Sussman's thoughts on "how programming should be taught" are also very clearly stated in Preface. You don't have to agree with it, but if you are going to say anything about which programming language to teach, you need to hold it as the basis of the prior proven curriculum anyway. <br><br>;; By the way, I'm looking at SCIP online right now and the Perlis quote in the dedication struck a chord with me. <br>;; http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-3.html</body>
 <timestamp>1222163814</timestamp>
 </comment>
 <comment>
 <username>hogege</username>
 <body>>I think the "SICP" (Structure and Interpretation of Computer Programs) that pekochu mentioned is often used as a "book that allows you to learn programming in a systematic way"<br>. <br>Thank you. <br>I ordered it immediately and will read it carefully</body>.
 <timestamp>1222170068</timestamp>
 </comment>
 <comment>
 <username>web10</username>
 <body>The results of the survey I took again seem to have been compiled, so I have summarized them below. <br>"Hatena survey accuracy increases from 6% to 70% depending on how you use it."<br>http://d.hatena.ne.jp/web10/20080923</body>
 <timestamp>1222175505</timestamp>
 </comment>
 <comment>
 <username>web10</username>
 <body>I think you will find that it is not the content of the question that creates the noise, but the "how to do it". </body>
 <timestamp>1222177245</timestamp>
 </comment>
 <comment>
 <username>t-tanaka</username>
 <BODY>shiro<BR>>I see, there is an Ada. <BR>I see, there is an Ada. <br>I was uninformed and didn't realize it. </body>
 <timestamp>1222216081</timestamp>
 </comment>
 <comment>
 <username>shou</username>
 <body>>There are many other languages in which functions are first class objects, such as JavaScript and Pnuts<br>Anyone who knows that there are "many" would erase this by process of elimination, idiot. </body>
 <timestamp>1222230112</timestamp>
 </comment>
 <comment>
 <username>yabuki</username>
 <BODY>Speaking of language,<BR><BR>if there are no sentences before or after,<BR>"In Scheme, functions are first class objects." than<br>"In Scheme, functions are first class objects." <br> would be better. </body>
 <timestamp>1222267805</timestamp>
 </comment>
 <comment>
 <username>standard_one</username>
 <body>In the first place, you are lacking in insight when you think that the concept of programming is confined to computers. </body>
 <timestamp>1222316458</timestamp>
 </comment>
 <comment>
 <username>rero</username>
 <body>I can't think of a specific example only for queue machines, so could you please tell me? <BR><BR>>>"begin~end" is Pascal, etc., though the period is superfluous. <br>>>It is not superfluous. The period eliminates Ruby, VB, etc. <br><br>Even in Pascal, is it only in program blocks that the end is followed by . is only added to blocks of programs, right? <br>I don't think it can be attached to a function or a block of compound statements.... </body>
 <timestamp>1222494694</timestamp>
 </comment>
 <comment>
 <username>enica</username>
 <body>* I heard that Yasukazu Nishio took this opportunity to create a great survey system *</body>.
 <timestamp>1222826810</timestamp>
 </comment>
 </comments>

[Hatena Diary 2008-09-22 https://nishiohirokazu.hatenadiary.org/archive/2008/09/22]