Typical ideas for coming up with solutions in competitive programming
[Typical ideas for coming up with solutions in competitive programming | Algorithmic Logic https://algo-logic.info/how-to-think-cp/]
There is quite a bit of overlap with what was being verbalized to develop [the ability to return].

　Think in terms of input constraints
　[small constraint problem].
　[Constraints with N around 8]
　[Constraints with N around 10~20]
　[Constraints with N around 30~40]
　	[N が 50前後の制約] O(N^4) OK
　[Constraints with N around 300~500]
　[Constraints with N around 1000]
　Take it apart and think about it.
　　[Note the small constant].
　[Fix one variable]
　　[fixes middle of 3 things]
　[行列の半分]
　[divide into X and Y].
　[Note the invariants of the operation].
　[Note the evenness].
　　[Even-odd cases]
　[not in order of operation].
　[時間軸反転]
　[Undoable operation].
　[Cumulative product from left to right]
　[addition of equal sequences focuses on the difference].
　[Composition of interval inversion is XOR].
　[Grundy数]
　[余事象を引く]
　[Binary search for k-th number]
　[XOR is addition without carry-over].
　[XOR can be split by digit].
　[45度回転]
 [difference minimized is median].
　[Discussion with representative graphs].
　[Tree is a bipartite graph].
　[Diameter of tree]
　[Maximization with bisection search]
　[greed from those with fewer options].
　[two-part graph of two-dimensional coordinates].
 [order into a directed graph].
　[Extreme values of convex functions are tridiagonal searches].
　[If monotonic increase, then the shakudori method].
　[The equi-proportion sequence focuses on the remainder].
　[N-decimal numbers are noted in the remainder].
　[bracketed rows are ascending and descending].

We will review the problems mentioned from [Typical ideas for coming up with solutions in competitive programming].
	[keyence2020_d]
	[abc152_f]
	[agc026_c]
	[arc060_a]
	[JOI2008HO_C]
	[ABC034D]
	[ABC138E]
	[ABC023D]