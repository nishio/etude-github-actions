Will/Can/Must and Agile
In situations where [uncertainty] is high, the method of planning Must in detail in advance is unlikely to work. Therefore, the level of abstraction of Must should be raised, and the details should be decided by the individual. Individuals can then self-determine concrete plans based on their own Will and Can, and respond to change at high speed.
An organization's Objective in [OKR] is a "Must at a high level of abstraction.


>[tokoroten https://twitter.com/tokoroten/status/1389631273581174787]: the three circles in the [Will/Can/Must] example and the [Agile Software Development Manifesto] seem identical to me!
> Must is the only way to do it on a large scale and mock it up on a large scale.
> Will and Can, you can pivot and experiment with smaller
> I guess that's what it's all about. ...... That's all it's about. ......
	[https://gyazo.com/3b0e43503854b840333a9975a55566a7]

>[perigsk https://twitter.com/perigsk/status/1389632704598052866]: if you don't mind, I would like to know which book contains the first figure!

>[tokoroten https://twitter.com/tokoroten/status/1389633041052495872]: will can must be found in various books and on the web, so I don't have a book recommendation for this, but this diagram is from the following book from the following book.
	[I thought only about the team.] --How [Cybozu] became a company where "100 people, 100 different ways" of working are possible.

>[tokoroten https://twitter.com/tokoroten/status/1389635335491969027]: In other words, why are traditional companies dysfunctional and why do we need to DX? The reason why we have to do DX is because the speed of change in society is increasing and Must has become dysfunctional and Must-based business execution is no longer possible.

>[nishio https://twitter.com/nishio/status/1389640154046820352]: what do you mean by "Must is dysfunctional"?

>[tokoroten https://twitter.com/tokoroten/status/1389640918723006464]: Increased speed of change in society due to rapid progress of software companies -> Increased uncertainty -> Business based on pre-planning (Must) is no longer agile Agility must be gained by taking control of software that is highly changeable.

>[nishio https://twitter.com/nishio/status/1389641765586554884]: How do Can and Will work when a project based on prior planning (Must) cannot maintain agility?

>[tokoroten https://twitter.com/tokoroten/status/1389642230760046594]: pay the cost for low-cost search with failure
> Without Can, it will be outsourced and cannot be done at low cost.
> Without Will, the pain caused by failure is unbearable.

>[nishio https://twitter.com/nishio/status/1389644173389692929]: I see. In other words, if you look at it from the perspective of an "individual working on a task," the "Must do" is given to you by the company or your boss, you become able to do it, and then you do it. If you look at an individual who is working on a project, the "must do" is given to him by the company or his boss, he becomes able to do it, and then he executes it.

>[tokoroten https://twitter.com/tokoroten/status/1389645007540289538]: The way you wrote that makes it sound like the field is running amok, so I'd say that you should explore with design thinking, or use agile development to reconcile, or transfer authority to the field based on the assumption of uncertainty. I think it is a way of saying that we transfer authority to the field based on the premise of "uncertainty".

>[nishio https://twitter.com/nishio/status/1389645777509654529]: I call the "plan" of "responding to change rather than following a plan" Must, which is a "highly detailed Must", micromanagement. If we give only a more "highly abstract Must" "organizational OKRs" and transfer the decision of details to individuals, we can make fast trial-and-error based on individual Will and Can.

>[nishio https://twitter.com/nishio/status/1389646181773443075]: "transferring detailed planning authority to the field"

>[tokoroten https://twitter.com/tokoroten/status/1389647292353761282]: Okay, I guess I was mapping Must too much to "plan" in the Agile Manifesto!
> So is saying that a high level of abstraction Must (that's not a Must, it's an Objective ......) is all that's needed.

>[tokoroten https://twitter.com/tokoroten/status/1389648400472178689]: with Will and Can, you can create an individual Must from a department Objective.
> Must no longer need to be given from the outside
> Right to change the details of the plan
> 
> I see, one of the values of OKR is this.

>[nishio https://twitter.com/nishio/status/1389648875166736384]: I didn't get the "Must is dysfunctional" thing at first, but if you're trying to verbalize Must in detail beforehand, in a situation where it's highly uncertain. It is easy to see how it becomes dysfunctional. I guess that uncertainty requires a higher level of abstraction of Must, which brings us closer to the Objective.

>[nishio https://twitter.com/nishio/status/1389649791341060097]: My Must at Cybozu is "to contribute to the creation of a society full of teamwork from a medium- to long-term perspective". That's about the level of abstraction. I'm not sure about new hires, though, since I'm assuming that they are in the research department and have developed trust that they will do something useful without detailed instructions through their activities over the years.