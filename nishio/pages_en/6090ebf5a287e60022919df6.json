Hatena2008-03-01
code:hatena
 <body>
 *1204329205* Haskell Hackathon today!
 Off to make Haskell in 12 hours, too reckless.
 When I woke up, the type inference was immediately made.
 http://d.hatena.ne.jp/yukoba/20080301/p1
 
 The chat room is
 http://www.lingr.com/room/haskell_hackathon_2008
 The password is haskell_hackathon_2008.
 
 *1204339978*Haskell Hackathon
 - You are reading this.
 -- http://media.itc.u-tokyo.ac.jp/onoue/pub/jssst01.pdf
 
 - I'm porting this to Python.
 -- http://web.archive.org/web/20050420002559/www.cs.berkeley.edu/~nikitab/courses/cs263/hm.pl
 - (scalar grep { &occursintype($type, $_); } @$nongen) is len(1 for t in nongen if occursintype(type, t)) if written in Python? (if written in a perverted way).
 -- just branching based on whether the length is 0 or not, so any(occursintype(type, t) for t in nongen) is OK
 
 - Lunch Pizza
 - befunge
 -- Zu: http://mono.kmc.gr.jp/~yhara/w/?ZuLanguage
 --- I thought you were talking about this.
 - Painting problems on the torus
 - I forget what I was writing.
 
 - There are many parts of the design that I want to work on, but refactoring and porting at the same time would make it difficult in case of bugs, so I implemented the design without making too many major modifications first.
 
 - @15:40
 >|python|
 >>> infer(FunApp(Ident(":"), Ident("5")))
 (: 5) : [t5=((List [t4=Int]) -> (List [t4=Int]))]
 ||<
 - In other words, the type of ((:) 5) is [Int] -> [Int]; the reason the result is different from Haskell's (: 5) is that Haskell's : is a binary operator.
 
 - @15:59
 >|python|
 (\n -> ((: n) ((: 5) []))) : ([t6=Int] -> [t10=(List [t4=Int])])
 ||<
 - In other words, if you create a function that adds an argument to a list of integers and returns it, the inference is that the argument must be an integer.
 >|haskell|
 Prelude> :t \n -> n:5:[]
 \n -> n:5:[] :: (Num a) => a -> [a]
 ||<
 
 The handwritten syntax tree is as follows
 >|python|
     ast = Lambda(
         Ident("n"),
         FunApp(
             FunApp(
                 Ident(":"),
                 Ident("n")),
             FunApp(
                 FunApp(Ident(":"), Ident("5")),
                 Ident("[]"))))
 
     infer(ast)
 ||<
 It's getting to be a pain in the ass to handwrite syntax trees.
 
 - @16:24
 - I used the code from the last time I created a Scheme in Python to ease the hand-writing of the syntax tree.
 >||
 >>> parse("(\ n -> ((: n) ((: 5) [])))")
 ['\\', 'n', '->', [[':', 'n'], [[':', '5'], '[]']]]
 [[':', 'n'], [[':', '5'], '[]']]
 [':', 'n']
 :
 n
 [[':', '5'], '[]']
 [':', '5']
 :
 5
 []
 (\n -> ((: n) ((: 5) [])))
 >>> infer(_)
 (\n -> ((: n) ((: 5) []))) : (Int -> (List Int))
 ||<
 
 - Also, it was depressing to see the resolved type variable displayed and "([t5=Int] -> [t9=(List [t4=Int])])", so I added an option to switch the type variable. (Int -> (List Int))" is now displayed.
 
 - The function application always has one argument, but that's too much trouble when writing, so I made it cary.
 
 >||
 >>> parse("(f 1 2 3 4 5)")
 (((((f 1) 2) 3) 4) 5)
 ||<
 
 - @21:30
 >||
 >>> infer(parse("(let (f = (\ x -> x)) in (pair (f 3) (f true)))"))
 (let (f = (\x -> x)) in ((pair (f 3)) (f true))) : (Pair Int Bool)
 ||<
 
 - I don't know what the delay pattern is - IT Warnings http://d.hatena.ne.jp/amachang/20061207/1165482858
 -- I didn't know you studied Haskell this long ago!
 - amachang "that tilde what".
 - I now understand that "a year ago I was a stranger."
 
 *1204370064*[Perl][Python] array copy in square brackets
 http://d.hatena.ne.jp/nishiohirokazu/20080219/1203435874
 
 This is about whether it is a deep copy or a shallow copy, and since it is a shallow copy, if you write it in Python, it will be a deep copy.
 
 >|perl|
 # perl
 [ map { &func($foo, $_, $bar) } @{$baz->{quux}} ]
 ||<
 
 school (e.g. of ikebana)
 
 >|python|
 # python
 [func(foo, x, bar) for x in baz.quux]
 ||<
 
 So it is equivalent to
 
 *1204381915*ge
 
 I forgot my bag.
 
 *1204383176*Lost last train.
 
 I'm so depressed. I wonder if there are any cabs in Kiyosumi-Shirakawa?
 
 *1204385640*taxi
 
 From Kiyosumi-Shirakawa, it's a little over 2,000 yen.
 
 *1204388355*Haskell Hackathon Summary
 - It was interesting.
 - Compared to the SchemeHackathon, where three people implemented Scheme, the number of people increased, the maintenance time increased, the difficulty of the problems increased, and the achievement per unit time decreased. Also, everyone started at a different position, so it did not feel like a race.
 - I haven't solved prime factorization competitively in five or six years. It's fun.
 - It's been a few years since I last used C++, and I've forgotten a lot of it, so I might do TopCoder or something to rehabilitate myself.
 - Please don't give me any more schedules that end at 11:00 a.m., or any other time.
 - Maybe 6 hours (11-17) instead of 12 hours would have been better? The idea was.
 - Maybe 13-19 (join us for dinner and then go out to eat afterwards).
 
 *1204393259* 3:00 pm.
 I have an appointment tomorrow at 3:00, but I can't sleep orz.
 </body>
 <comments>
 <comment>
 <username>hayamiz</username>
 <body>Dojikko moe</body>.
 <timestamp>1204387272</timestamp>
 </comment>
 </comments>

[Hatena Diary 2008-03-01 https://nishiohirokazu.hatenadiary.org/archive/2008/03/01]