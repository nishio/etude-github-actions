Common Interface Trap
	There are several different
 Think about [commonizing] these operations
 	Think about putting [a common interface] on.
  Because [the cost of learning] each separately is a waste.
 Different plurals have different areas of expertise.
 Ideally, both sides can take advantage of each other's [strengths], but often both sides only have [common areas] and [lose] [strengths].
[https://gyazo.com/ab259ca763419224b870fdc26f48f9c4]

If A has a function that B does not
	Route 1: Unsupported routes
 	Implementation is easy
  It's the unfortunate thing I wrote above.
	Route 2: Route to error
 	For example, a design that has an interface but causes an error when executed
  In the end, the user must understand "what is available on which backend".
	Line 3: The line that you do your best to implement
		Example: The [machine learning] library Scikit-Learn provides a [common interface] for different learning models.
 		For model m, method `m.predict_proba` returns the result of probability estimation
  	This method is also grown for SVMs that do not have the capability of probability estimation
	 	Running SVM 5 times [logistic regression] with 4/5 data: [probability estimation with SVM].
		Very labor intensive.
  Not always possible to implement.
  	In that case, it is attributed to route 2.

[Trap] in [Common Interface]
#Software Design
#Design