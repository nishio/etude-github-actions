Hatena2011-02-07
code:hatena
 <body>
 *1297067116* How to make a list with N same values in it.
 Twitterより転載:
 >>
 atsuoishimoto: . @t2y http://htn.to/qWhHgD [0 for i in xrange(len(seqs))] I sometimes see such a way of writing, but I think the correct answer is [0]*len(seqs).
 <<
 
 It's a very correct tweak, but I think it's slightly unkind, so I'll take the liberty of adding to it.
 
 For example, it is [0] * N to make a "list with N zeros in it".
 
 >|python|
 >>> N = 5
 >>> [0] * N
 [0, 0, 0, 0, 0]
 ||<
 
 This writing method can be used to create a "list containing N of the same thing", not just 0.
 
 >|python|
 >>> ['a'] * N
 ['a', 'a', 'a', 'a', 'a']
 ||<
 
 So what if I want to create a "list with N empty lists"? Yes, in that case, of course, you can write the same thing.
 >|python|
 >>> [[]] * N
 [[], [], [], [], []]
 ||<
 
 But do we properly understand that this is "a list containing N identical 'empty lists'"?
 
 >|python|
 >>> lists = [[]] * N
 >>> lists[0] # listsの0番目は空のリストだ
 []
 >>> lists[0].append(1) # adding 1 to this
 >>> lists[0] # changes to [1]. Yeah, of course.
 [1]
 >>> lists # And what about lists?
 [[1], [1], [1], [1], [1]]
 ||<
 
 This is of course what happens because LISTS was a list that contained five "same empty lists". But, when you want to make a "list of lists," you don't usually want to do this. You want a list that contains five separate empty lists. So here it is.
 
 >|python|
 >>> [[] for i in range(N)]
 [[], [], [], [], []]
 ||<
 
 This would look the same as the list created by the first method, but each empty list is a different empty list.
 
 >|python|
 >>> lists = [[] for i in range(N)]
 >>> lists[0].append(1)
 >>> lists
 [[1], [], [], [], []]
 ||<
 
 So, for example, if you want to create a two-dimensional array with zero elements, here is what you would do.
 
 >|python|
 >>> from pprint import pprint
 >>> pprint([[0] * N for i in range(N)])
 [[0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0]]
 ||<
 
 Perhaps the first person who was plugged in didn't understand that there needs to be a distinction between the use of "same thing" or "different thing of the same value".
 
 *1297082406* Timing of evaluation of default arguments
 Twitterより転載
 >>
 shimizukawa: I know, I know, I want to remember: behavior when arg=[] for default value of function argument RT @nishio: @atsuoishimoto I thought it was correct but unkind, so I added this: how to make a list that contains N same values http://bit.ly/ eW2oaF
 <<
 
 Yes, yes, then write that down too!
 
 I think one of the advantages of Python is that you can read bytecode with dis, so if you have any doubts, you should all dis anyway!
 
 >|python|
 >>> import dis
 >>> def bar():
 ...     def foo(x=1, y=2, z=[]):
 ...         pass
 ... 
 >>> dis.dis(bar)
   2           0 LOAD_CONST               1 (1)
               3 LOAD_CONST               2 (2)
               6 BUILD_LIST               0
               9 LOAD_CONST               3 (<code object foo at 0x10046ccd8, file "<stdin>", line 2>)
              12 MAKE_FUNCTION            3
              15 STORE_FAST               0 (foo)
              18 LOAD_CONST               0 (None)
              21 RETURN_VALUE        
 ||<
 
 For the uninitiated, a simple explanation
 
 >||
 LOAD_CONST (1) # Prepare 1
 LOAD_CONST (2) # Prepare 2
 BUILD_LIST # Make a list.
 LOAD_CONST (<code object>) # 関数の中身を用意して
 MAKE_FUNCTION 3 # Create a function with 3 values as default arguments
 STORE_FAST (foo) # name that function foo
 LOAD_CONST (None) # Noneを用意して
 RETURN_VALUE # Return it
 ||<
 
 You can see that BUILD_LIST is running to create a default value [] before defining the function. This means that the entity of the default value is one-to-one with the entity of the function, so the following behavior occurs.
 
 
 >|python|
 >>> def foo(x=[]):
 ...     x.append(1)
 ...     print x
 ... 
 >>> foo()
 [1]
 >>> foo()
 [1, 1]
 ||<
 
 A practical example would be a case where you have a function that specifies the time of day as an argument, and you want to use the current time if you omit the argument.
 
 >|python|
 >>> from datetime import datetime
 >>> def foo(when=datetime.now()):
 ...     print when
 ... 
 >>> foo()
 2011-02-07 20:42:43.578936 # It worked even if I omitted arguments
 >>> foo(datetime.now())
 2011-02-07 20:42:51.446415 # It worked fine even if I specified arguments.
 # I thought, "All right, it's working fine...
 >>> foo()
 2011-02-07 20:42:43.578936 # Same time is returned when argument is omitted...
 ||<
 
 In such a case, I think the best way to deal with it is to set the optional value of the argument to None and write "the current time when None is set".
 
 >|python|
 >>> def foo(when=None):
 ...     if not when: when = datetime.now()
 ...     print when
 ... 
 >>> foo()
 2011-02-07 20:43:36.233154
 >>> foo()
 2011-02-07 20:43:37.539578 # It is working properly
 ||<
 </body>
 <comments>
 <comment>
 <username>ujihisa</username>
 <body>http://ujihisa.blogspot.com/2009/06/default-parameter-dynamic-define.html<br><br>これを思い出しつつ、仮引数で再帰関数定義をpythonでもやってみましたが、<br><br><br>def fib(n, x = 0 if n == 0 else 1 if n == 1 else fib(n-2) + fib(n-1)):<br>  return x<br><br>print fib(10)<br><br><br>NameError: name 'n' is not defined<br>ざんねん</body>
 <timestamp>1297125437</timestamp>
 </comment>
 </comments>

[Hatena Diary 2011-02-07 https://nishiohirokazu.hatenadiary.org/archive/2011/02/07]