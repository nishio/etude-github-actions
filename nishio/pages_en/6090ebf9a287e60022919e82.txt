Hatena2008-07-25
code:hatena
 <body>
 *1216946964*Cool water
 When I filled the bath with hot water and went in, I didn't have the water heater on and it was cold water (><).
 
 
 The stimulation startled my nerves and my stomach ached.
 
 *1216965787*ANOBAR
 http://anobar.jp/
 
 f:id:nishiohirokazu:20080725145130j:image
 
 I took some photos, but it might be easier to understand what it is like if you watch the official video.
 http://www.ustream.tv/swf/4/viewer.9.swf?&loc=/&cid=174211
 Perhaps it was because the display was FED, but the display was clear when text was played. Also, I had imagined an electric version of the news in the Shinkansen, but it had a higher resolution (640 x 96) and was in full color. Since shooting games were also running, there seemed to be little trouble in terms of display performance. I was able to see the menu and the weather map on the video, and it was much better than I imagined before I saw the real thing. But I have high expectations that it won't stop there.
 
 I also heard that it runs Windows Embedded and can be customized in various ways, runs Flash 9, and can view Twitter and Wikipedia. I heard that you can usually play comments under the TV, and when mail arrives, it interrupts and displays the incoming mail. It would be very informative to watch NHK's history programs with Wikipedia's first part displayed by recognizing the TV's voice and extracting the keywords or by morphological analysis of the actual situation.
 
 
 Specs are here: http://anobar.jp/#/contents/spec/
 
 
 It looks like they will be looking for monitors in a little while!
 <img src="http://gyazo.com/af313c320da3dd8aba1e5939a46e5a95.png">
 
 *1216987891*[c]How to display floating point numbers
 How can I get the floating point numbers to print correctly, I'm having trouble getting the third printf to print 1. Since there is a value that is not 1, is there any way to print it out? In this case, I can use %.17lf as in the second case, but that is not usable in situations where I don't know how many zeros are at the beginning of the decimal part. Hmmm.
 
 >|c|
 #include <stdio.h>
 #include <math.h>
 int main(){
   double p = 1.0 / 6.0;
   double sum = 0.0;
   int i;
   for(i=0; i<6; i++){
     sum += p;
   }
 
   printf("%lf\n", sum); // -> 1.000000
   printf("%.17lf\n", sum); // -> 0.99999999999999989
   printf("%g\n", sum); // -> 1
   sum -= 1;
   printf("%lf\n", sum); // -> -0.000000
   printf("%g\n", sum); // -> -1.11022e-16
 }
 ||<
 
 I had no choice but to try to create a function to display the mantissa part as it is, and nyaxt made it for me quickly. Thanks nyaxt!
 http://websvn.nyaxtstep.com/viewvc.cgi/sandpit/c/ieee754/ieee754.c?view=markup
 
 I'm just now tinkering with the display method to make it more beginner friendly and have discovered a bug. Please be patient.
 
 
 Mwah, I don't understand.
 >||
   // mantissa -> char*
   char smant[52];
   uint64_t m = mantissa - 1;
   printf("m: %lld\n", m);
   for(j=0; j<52; j++){
     m *= 10;
     smant[j] = '0' + (m >> 52);
     //printf("%lld\n",  (m >> 52));
     //printf("%lld\n",  m);
     m &= MANTISSA_MASK;
   }
   printf("smant: %s\n", smant);
 -----
 m: 0
 smant: 00000000000000000000000000000000000000000000000000000011111111110000000000000000000000000000000000000000000000000000
 ||<
 What's this one in the middle of the road?
 
 
 Ah, I get it. It's a char array, but it doesn't end with 0 âŒ˜, so when I tried to display it as a string, it was displaying extraneous stuff too. Fixed it.
 
 
 I'll change "printf" to "sprintf". I'm not sure if sprintf is supposed to "assume that a sufficient amount of string space has been allocated" or not.
 
 
 I was wondering why strcmp returns 0 when it matches, but it's the same as cmp.
 
 *1217003398*[c]Display different floating point numbers differently
 I was trying to explain floating point arithmetic and was astonished to find that C's printf %g prints both 1.0 and the number 1.0 / 6.0 added together 6 times (not 1.0) as "1". It is not educational for different values to be displayed in the same way.
 So I made a sprintf specifically for double. The goal is to make sure that doubles with different bit representations do not look the same. The best way to see what kind of results you get is to look at the test cases.
 
 >|cpp|
   // Zero
   TEST(0.0, "+0.0");
   TEST(-0.0, "-0.0");
   // Infinity
   TEST(1.0 / 0.0, "+Inf");
   TEST(-1.0 / 0.0, "-Inf");
   // Not a Number
   TEST(0.0 / 0.0, "+NaN(mantissa=2251799813685248)");
   // Normalized Number
   TEST(1.0, "1(+1.0 * 2^0)");
   TEST(4.25, "4.25(+1.0625 * 2^2)");
   TEST(1.1, "1.1(+1.100000000000000088817841970012523233890533447265625 * 2^0)");
 
   double very_small = 1.0;
   for(i=0; i<16; i++){
     very_small /= (1ULL << 63);
   }
   TEST(very_small, "3.64556e-304(+1.0 * 2^-1008)");
   very_small /= (1ULL << 14);
   TEST(very_small, "2.22507e-308(+1.0 * 2^-1022)");
   very_small /= 2;
   TEST(very_small, "1.11254e-308(+0.5 * 2^-1022)"); // Denormalized number
 
   double sum = 0.0;
   for(i=0; i<6; i++){
     sum += 1.0 / 6.0;
   }
   TEST(sum, "1(+1.9999999999999997779553950749686919152736663818359375 * 2^-1)");
 ||<
 
 It shows that 1.1 is a number that cannot be expressed exactly (because 1/5 is a circular fraction in binary) and that adding 1.0 / 6.0 six times is not enough to equal 1.0. Also, NaN (Not a Number) expresses that there can be multiple NaNs with different signs and mantissa (mantissa). I am not sure why it is 2251799813685248, or what the value would be in other environments or situations.
 
 >|cpp|
 #include <stdio.h>
 #include <math.h>
 #include <stdint.h>
 #include <assert.h>
 
 void sprint_double(char* result, double f)
 {
   uint64_t i = *(uint64_t*)&f;
   int flag = i >> 63;
   int exp = i >> 52 & 0x7FF;
   uint64_t MANTISSA_MASK = 0xFFFFFFFFFFFFFULL;
   uint64_t mantissa = i & MANTISSA_MASK;
   int j;
 #ifdef DEBUG
   // double -> bits
   char digits[64];
   for(j=0; j<64; j++){
     digits[63 - j] = '0' + (i >> j & 1);
   }
   for(j=0; j<64; j++){
     printf("%c", digits[j]);
     if(j == 0 || j == 11){
       printf(",");
     }
   }
   printf("\n");
   printf("flag: %d, exp: %d, mantissa: %llu\n", flag, exp, mantissa);
 #endif
 
   char sign = (flag == 0) ? '+' : '-';
 
   if(exp == 0x7ff){
     if(mantissa){
       sprintf(result, "%cNaN(mantissa=%lld)", sign, mantissa);
     }else{
       sprintf(result, "%cInf", sign);
     }
     return;
   }
 
   char int_part = '1';
   if(exp == 0){
     if(mantissa == 0){
       sprintf(result, "%c0.0", sign);
       return;
     }else{
       // denormalized number
       int_part = '0';
       exp++;
     }
   }
 
 
   // mantissa -> char*
   char smant[52 + 1];
   smant[52] = '\0';
   uint64_t m = mantissa;
   for(j=0; j<52; j++){
     m *= 10;
     smant[j] = '0' + (m >> 52);
     m &= MANTISSA_MASK;
     if(m == 0){
       smant[j + 1] = '\0';
       break;
     }
   }
 
   exp = exp - 1023;
   printf("%g(%c%c.%s * 2^%d)\n", f, sign, int_part, smant, exp);
   sprintf(result, "%g(%c%c.%s * 2^%d)", f, sign, int_part, smant, exp);
 }
 
 int main(){
   int i;
   char buf[1024];
   #define TEST(f, s) sprint_double(buf, f); assert(strcmp(buf, s) == 0);
   // Zero
   TEST(0.0, "+0.0");
   TEST(-0.0, "-0.0");
   // Infinity
   TEST(1.0 / 0.0, "+Inf");
   TEST(-1.0 / 0.0, "-Inf");
   // Not a Number
   TEST(0.0 / 0.0, "+NaN(mantissa=2251799813685248)");
   // Normalized Number
   TEST(1.0, "1(+1.0 * 2^0)");
   TEST(2.0, "2(+1.0 * 2^1)");
   TEST(4.0, "4(+1.0 * 2^2)");
   TEST(0.5, "0.5(+1.0 * 2^-1)");
   TEST(0.25, "0.25(+1.0 * 2^-2)");
   TEST(1.25, "1.25(+1.25 * 2^0)");
   TEST(4.25, "4.25(+1.0625 * 2^2)");
   TEST(100.125, "100.125(+1.564453125 * 2^6)");
   TEST(1.1, "1.1(+1.100000000000000088817841970012523233890533447265625 * 2^0)");
 
   double very_small = 1.0;
   for(i=0; i<16; i++){
     very_small /= (1ULL << 63);
   }
   TEST(very_small, "3.64556e-304(+1.0 * 2^-1008)");
   very_small /= (1ULL << 14);
   TEST(very_small, "2.22507e-308(+1.0 * 2^-1022)");
   very_small /= 2;
   TEST(very_small, "1.11254e-308(+0.5 * 2^-1022)"); // Denormalized number
 
   double sum = 0.0;
   for(i=0; i<6; i++){
     sum += 1.0 / 6.0;
   }
   TEST(sum, "1(+1.9999999999999997779553950749686919152736663818359375 * 2^-1)");
 }
 ||<
 
 
 References
 -List of format specifiers
 --http://www.k-cube.co.jp/wakaba/server/format.html
 -Manpage of PRINTF
 --http://www.linux.or.jp/JM/html/LDP_man-pages/man3/printf.3.html
 -A story about getting stuck in floating point arithmetic - bk blog
 --http://0xcc.net/blog/archives/000164.html
 --- Oh, it's so deep! (gkbr
 -IEEE 754 - Wikipedia
 --http://ja.wikipedia.org/wiki/IEEE_754
 -IEEE 754-1985 - Wikipedia, the free encyclopedia
 --http://en.wikipedia.org/wiki/IEEE_754-1985
 -Manpage of STRCMP
 --http://www.linux.or.jp/JM/html/LDP_man-pages/man3/strcmp.3.html
 -About Floating-Point Arithmetic
 --http://docs.sun.com/source/806-4847/ncg_goldberg.html
 -Normalized number - Wikipedia
 --http://ja.wikipedia.org/wiki/%E9%9D%9E%E6%AD%A3%E8%A6%8F%E5%8C%96%E6%95%B0
 
 -----
 PS
 printf("%.20e", ...) is sufficient for practical use.
 
 *1217006818*Wow!
 I've been doing C since my freshman year of college and it's already 2:30!
 What time is the Google Code Jam tomorrow?
 I haven't even studied for TOEIC. Aww.
 
 Google Code Jam starts at 10:00 a.m. I can't sleep for 8 hours. But I'm not sure that the second one on Sunday at 18:00 won't clash with TOEIC. I'll have to get up tomorrow!
 
 I took a bath. I reserved two cups of rice. Tomorrow is the Sumida River Fireworks Festival, where many people will gather to watch gunpowder explode by my house, so I have to move early or else I'll be stuck in the crowd.
 </body>
 <comments>
 <comment>
 <username>jj1bdx</username>
 <body>>> TEST(0.0 / 0.0, "+NaN(mantissa=2251799813685248)");<br>On my FreeBSD/i386 7.0-RELEASE environment, strcmp fails for only one statement above. <br>CPU: Genuine <br>CPU: Genuine Intel(R) CPU L2400 @ 1.66GHz (1662.51-MHz 686-class CPU)<br> Origin = "GenuineIntel" Id = 0x6e8 Stepping = 8<br>gcc was tried with 4.2.1 and 3.4.6 and it was the same. cc -DEBUG -O0 -g </body>
 <timestamp>1217028078</timestamp>
 </comment>
 <comment>
 <username>nishiohirokazu</username>
 <body>I see, it seems that NaN's mantissa still depends on the environment. Thank you. </body>
 <timestamp>1217032563</timestamp>
 </comment>
 </comments>

[Hatena Diary 2008-07-25 https://nishiohirokazu.hatenadiary.org/archive/2008/07/25]