Hatena2010-04-14
code:hatena
 <body>
 *1271221123* What I learned from reading Drucker.
 I've been reading Drucker lately, and I realized that some of the things I thought of in the <a href='http://d.hatena.ne.jp/aureliano/'>Meets Huckleberry</a> guy's entry were rehashes of what Drucker had said. I realized that some of the things that I had previously thought were rehash of what Drucker had said.
 
 So I went to his blog to see which entry it was, and found that he was the author of the <a href="http://www.amazon.co.jp/gp/product/4478012032?ie=UTF8&tag=nishiohirokaz-22&linkCode=as2 &camp=247&creative=7399&creativeASIN=4478012032">If a female high school baseball manager reads Drucker's Management</a>. I see.
 
 *1271226875*LISP for Newcomers [Revised and Enlarged Edition].
 <a href="http://www.amazon.co.jp/gp/product/4798119415?ie=UTF8&tag=nishiohirokaz-22&linkCode=as2&camp=247&creative=7399& creativeASIN=4798119415">LISP for Newcomers [Expanded and Revised Edition]</a>.
 
 'It's more natural to write it this way, so let's make a promise that it can be written that way (I can always make a promise!)' (p.60) or
 Or, "I brought up the agonizing terms and concepts of temporary notepaper, of bondage, because I was compelled to understand the mechanisms that ensure a natural modularity for humans" (p. 64).
 It is wrong to emphasize only recursive calls and say that they are a feature of Lisp" (p.91) "Beautiful does not always equal practical value" (p.107), and so on.
 
 I thought that this book might be the first programmer's thought book that a person who is trying to learn programming for the first time should read to avoid falling into the dark side by being exposed to the wrong textbook.
 
 There are all kinds of wrong textbooks out there.
 - It is correct to write: "This is the way it is written. That's the rule. Why? It's not "Why? It's the right thing to do! Programming languages are God-given truths! And.
 - It is essential to understand the concept of "(difficult term or katakana word here)! You should also understand that concept! I am great for understanding this and that and that!" And.
 - "It's beautiful to write like this! Beauty is important! Beauty trumps everything!" And...
 
 Programming languages are just a bunch of promises that are improved little by little over time, but there are books that mislead people into believing that they are eternal and unchanging truths. If you can't point out the flaws in your language, you can't be considered an expert on the language, but there are books out there that create blind faith in the language. Naturally, this kind of book blocks the question, "Is this correct? Furthermore, the idea that the first language one comes into contact with is sacred, inviolable, and flawless naturally leads to sterile religious conflicts with other languages.
 
 And then there are concepts. It is still important to understand concepts because there is code that cannot be written without knowing them, but that does not mean memorizing lengthy katakana words or reciting unintelligible definitional sentences. It's just to make it easier to refer to "what a programming language does behind the scenes to make it behave naturally for humans" by putting labels on "what it does behind the scenes. And yet, there are books out there that mislead people into thinking that the more labels you learn, the better you are. In other words, there are object-oriented manuals out there that say "I'm great" by memorizing labels, even though the author doesn't understand them at all. If a serious person reads such a book, he or she may feel depressed because he or she thinks it is his or her fault for not understanding even though he or she cannot understand because the explanation is not good.
 
 Then there is aesthetics. Aesthetics are necessary. Ugly codes cause all kinds of problems. So it is right to seek beauty. The problem is that beauty cannot be measured objectively. It is a subjective measure, so it is easy to fall into self-righteousness. You cannot answer your own question, "Isn't this code that I am writing, which I believe to be beautiful, actually not beautiful? The mind that seeks beauty tends to be driven by maximization. It is tempting to aim for "perfection. However, there are few cases in which it is reasonable to pay the "high cost of perfection" in social activities. The trade-off between the cost of beauty and the benefit of beauty is the "optimal" point, which is "not perfect, but just beautiful enough. We must not make that mistake.
 
 I thought of these things as I read the book.
 
 *1271227693* Three programmer's aphorisms.
 I read <a href='http://d.hatena.ne.jp/nishiohirokazu/20100414/1271226875'>LISP for First-Timers [Revised and Expanded Edition]</a> and was freaked out, so I added it.
 
 My top 3 programmer's sayings are as follows (in no particular order)
 - Premature optimization is the root of all evil --- Donald Knuth
 - Laziness: a disposition to go to great lengths to reduce overall effort --- Larry Wall
 - Beauty and practical value do not always go hand in hand --- Ikuo Takeuchi
 It can all be applied to something other than programming.
 </body>
 <comments>
 <comment>
 <username>bellonieta</username>
 <body>My favorite is "Programming Accelerates --- Ikuo Takeuchi". </body>
 <timestamp>1271230404</timestamp>
 </comment>
 </comments>

[Hatena Diary 2010-04-14 https://nishiohirokazu.hatenadiary.org/archive/2010/04/14]