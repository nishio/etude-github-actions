attempting two tasks simultaneously, accomplishing neither
I don't remember the specifics, but it's my true story [nishio.icon].
"I've got an idea, if we implement X first, we can use it for both Objective A and Objective B, killing two birds with one stone!"
→Some time after we started implementing X
'Hey, this part of the implementation, for objective A it has to be Y, but for objective B it has to be Z. What do I do?'

If the problem is so simple that you can see in advance what to design and how to design it, then "what looks like a common part" is really a common part, so you can implement it first.
On the other hand, when challenging a problem that is difficult for me and that I cannot foresee, "compatibility of objective A and B" is more complex than "objective A alone" or "objective B alone," which increases the frequency of errors in preliminary design.
When this effect is included, it is difficult to say whether or not commonization is efficient. The gain or loss depends on the project situation and the competence of the person designing the project.

I found something I wrote a long time ago.
　[Objectives become multidimensional].
　[Multiple ends to a single means.]
　[trade-off between DRY and loosely coupled].
　[Common Interface Trap]
On the other hand.
　[A good idea solves several problems at once].
　　I'm troubled by some of the stories that

relevance
　[framework harvesting].

[mitoujr2021.icon]
