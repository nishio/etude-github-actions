Hatena2011-09-14
code:hatena
 <body>
 *1315962462*Brief introduction to pdb, the standard Python debugger.
 A lighthearted explanation of pdb, which was already in the standard library in 2004, but people say, "It would be nice if scripting languages could do step execution, etc." Pity pdb, pitty pdb!
 
 First, write a script as appropriate.
 
 >||
 ~$ cat t.py
 for i in range(10):
     sum += i
 
 print sum
 ||<
 
 Execution will result in an error.
 
 >||
 ~$ python t.py
 Traceback (most recent call last):
   File "t.py", line 2, in <module>
     sum += i
 TypeError: unsupported operand type(s) for +=: 'builtin_function_or_method' and 'int'
 ||<
 
 Wah, why did I get an error (stick)?
 
 Then, we add "-m pdb" and step through the steps.
 >||
 ~$ python -m pdb t.py
 > /Users/nishio/t.py(1)<module>()
 -> for i in range(10):
 (Pdb) 
 ||<
 
 This (Pdb) is a prompt, and like gdb, you can step through it with n and set breakpoints with b. You can also run Python scripts interactively. (See <a href='http://www.python.jp/Zope/articles/tips/pdb-howto-2'>Using pdb -- Commands</a>)
 
 >||
 (Pdb) 2 * 3
 6
 (Pdb) n
 > /Users/nishio/t.py(2)<module>()
 -> sum += i
 (Pdb) p i
 0
 ||<
 
 If an exception is jumped, it looks like this: sum += i. It's an error, so let's check the value with p sum. Oh, it's supposed to be the built-in function sum, I made a mistake.
 
 >||
 (Pdb) n
 TypeError: "unsupported operand type(s) for +=: 'builtin_function_or_method' and 'int'"
 > /Users/nishio/t.py(2)<module>()
 -> sum += i
 (Pdb) p sum
 <built-in function sum>
 ||<
 
 If you cont here, it will enter "post mortem debugging" (autopsy mode) and re-run from the beginning of the script.
 >||
 (Pdb) cont
 Traceback (most recent call last):
   File "/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/pdb.py", line 1285, in main
     pdb._runscript(mainpyfile)
   File "/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/pdb.py", line 1204, in _runscript
     self.run(statement)
   File "/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/bdb.py", line 368, in run
     exec cmd in globals, locals
   File "<string>", line 1, in <module>
   File "t.py", line 2, in <module>
     sum += i
 TypeError: unsupported operand type(s) for +=: 'builtin_function_or_method' and 'int'
 Uncaught exception. Entering post mortem debugging
 Running 'cont' or 'step' will restart the program
 > /Users/nishio/t.py(2)<module>()
 -> sum += i
 (Pdb) s
 Post mortem debugger finished. The t.py will be restarted
 ||<
 
 Let's initialize sum to 0, which we forgot to initialize earlier, and execute it again. Yes, it was executed correctly and the expected result (45) was output. We are happy and satisfied.
 >||
 > /Users/nishio/t.py(1)<module>()
 -> for i in range(10):
 (Pdb) sum = 0
 (Pdb) cont
 45
 The program finished and will be restarted
 ||<
 
 I have introduced pdb lightly, but personally, I am not used to using it because I often create small, well-tested components and build them up in a bottom-up fashion.
 
 - <a href='http://www.python.jp/doc/2.4/lib/module-pdb.html'>9. Pythonデバッガ</a>
 - <a href='http://www.python.jp/Zope/articles/tips/pdb-howto-1'>pdb の使い方 -- 導入編</a>
 - <a href='http://www.python.jp/Zope/articles/tips/pdb-howto-2'>How to use pdb -- commands section</a>
 - <a href='http://docs.python.org/library/pdb.html'>26.2. pdb &#8212; The Python Debugger &#8212; Python v2.7.2 documentation</a>
 - http://pypi.python.org/pypi/pdbpp/ More colorful. thanks @rokujyouhitoma!
 </body>

[Hatena Diary 2011-09-14 https://nishiohirokazu.hatenadiary.org/archive/2011/09/14]