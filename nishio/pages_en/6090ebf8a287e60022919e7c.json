Hatena2008-07-18
code:hatena
 <body>
 *1216346661*長崎
 http://ja.doukaku.org/wiki/index.php/1000speakers:6
 >>
 The venue for this year's event was lent to us free of charge as part of Nagasaki Prefecture's support for the engineering community.
 <<
 
 Heh, I see. Nagasaki + +
 
 *1216356809*Google Code Jam 2008 Qualification Round A
 (to be written later)
 
 >|python|
 UPPER_BOUND = 10000 
 num_test = int(fi.readline())
 print num_test
 for test_id in range(num_test):
     num_engine = int(fi.readline())
     engines = [fi.readline() for i in range(num_engine)]
     num_query = int(fi.readline())
     
     # start DP
     scores = [0] * num_engine
     for i in range(num_query):
         q = fi.readline()
         if q in engines:
             # switch
             target = engines.index(q)
             target_score = scores[target]
             for i in range(num_engine):
                 if i == target:
                     scores[i] = UPPER_BOUND
                 else:
                     scores[i] = min(scores[i], target_score + 1)
         else:
             # no need to switch engine
             pass
      result = min(scores)
     p("Case #%d: %s" % (test_id + 1, result))
 ||<
 
 *1216356929*Google Code Jam 2008 Qualification Round B
 (to be written later)
 >|python|
 UPPER_BOUND = 10000 
 num_test = int(fi.readline())
 for test_id in range(num_test):
 
     tatime = int(fi.readline())
     na, nb = map(int, fi.readline().split())
     event_table = []
     # event_table (time, arrive/depart as -1/+1, A/B as 0/1)
     # order and depart==+1 is important to handle synchronous events
     #print "a to b"
     for i in range(na):
         line = fi.readline().split()
         #print line
         dept, arrv = map(toMin, line)
         event_table.append((dept, +1, 0))
         event_table.append((arrv + tatime, -1, 1))
 
     #print "b to a"
     for i in range(nb):
         line = fi.readline().split()
         #print line
         dept, arrv = map(toMin, line)
         event_table.append((dept, +1, 1))
         event_table.append((arrv + tatime, -1, 0))
 
     event_table.sort()
     result = [0, 0]
     trains = [0, 0]
     for (t, diff, pos) in event_table:
         #print (t, diff, pos), trains, result
         trains[pos] -= diff
         if trains[pos] < 0:
             trains[pos] += 1
             result[pos] += 1
 
     p("Case #%d: %d %d" % (test_id + 1, result[0], result[1]))
 ||<
 
 *1216387303*Sleepy
 I was going to write an explanation of what "Dynamic Programming (DP)" is, which often appears in explanations of this kind of problems, but I decided not to because it became too tedious.
 
 *1216397280*Books for Love
 <img src="http://gyazo.com/c295c6d855af3a358b2ee772485c39e0.png">
 
 When I was told that a search for Cybozu Labs and a date course would result in a ramen restaurant, I searched for my name and a date, and it was revealed that I had published a book on love without my knowledge!
 </body>

[Hatena Diary 2008-07-18 https://nishiohirokazu.hatenadiary.org/archive/2008/07/18]