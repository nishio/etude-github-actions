Hatena2012-12-06
code:hatena
 <body>
 *1354727324*出題編
 akasata sa akasatama akasatamaya akasata akasatama akasatama akasata bc akasata akasata akasata bc akasata akasata akasata bc akasata akasata akasata akasata bc akasata akasata akasata bc akasata akasata akasata bc akasata akasata akasata akasata akasata akasata akasata akasata akasata akasata akasata akasata akasata bc maya
 
 *1354778001*I implemented an additive quasi-homomorphic cipher.
 At yesterday's in-house study session, Mr. Mitsunari introduced the "<a href='http://www.aist.go.jp/aist_j/press_release/pr2011/pr20111101/pr20111101.html'>AIST: Search technology for compound database by secret computation</a <a href=''>"<a href=''>AIST: Compound Database Searching Technique Using Secret Computation</a>"" was introduced at an in-house study session yesterday, and it looked interesting, so I implemented it.
 
 https://github.com/nishio/homomorphic_encryption/blob/master/henc.py
 
 *1354792274*Solution (hint 1)
 <a href='http://d.hatena.ne.jp/nishiohirokazu/20121206/1354727324'>出題編</a>
 
 I think I'll write one tip a day.
 
 I think the first thing I do when I see a cipher problem like this is to look at the frequency of occurrence of each letter. Like Edgar Allan Poe's Golden Beetle. <a href='http://ja.wikipedia.org/wiki/%E9%BB%84%E9%87%91%E8%99%AB'>Golden bug - Wikipedia</a>
 
 In Python, you can easily count the frequency with Counter.
 
 >|python|
 >>> data = u "akasatasa akasatamaya akasata akasatama 0awa akasatasama sawa akasatasaya akasaka bc akasaka akasaka well akasaka akasama 7 akasata sama akasata sasa akasata sama 0 akasatasa a4bawa maraa a6ma6sa7 akasata akasata 7 akasata as akasata-sa b aya bc maya"
 >>> from collections import Counter
 >>> Counter(data)
 Counter({u'\u3055': 25, u'\u3042': 24, u'\u304b': 16, u'\u306f': 13, u'\u307e': 12, u'\u305f': 11, u'\u308f': 6, u'\u3089': 5, u'\u3084': 4, u'b': 4, u'7': 4, u'c': 2, u'0': 2, u'6': 2, u'\u306a': 1, u'4': 1})
 ||<
 
 Since we're at it, let's print them in order of number.
 
 >|python|
 >>> for k, v in _.most_common(): print k, v
 25.
 A 24
 Ka 16.
 is 13
 12.
 11
 Wa 6
 et al. 5
 and 4
 b 4
 7 4
 c 2
 0 2
 6 2
 Name 1
 4 1
 ||<
 </body>

[Hatena Diary 2012-12-06 https://nishiohirokazu.hatenadiary.org/archive/2012/12/06]