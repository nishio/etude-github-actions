Hatena2010-02-18
code:hatena
 <body>
 *1266519476* on Dominion's pull-out deck
 I learned that buying coins in Dominion was strong, so I bought a lot of coins and was bumped off by the pull-out deck, so I tested how many coins I could buy in each case of a village and a blacksmith shop to see how likely I would be to pull them off.
 
 凡例
 >||
 2 4 1710
 ||<
 This reads as a 17.1% chance of pulling off the village when the village has 2 cards, the blacksmith has 4 cards, and the remaining 10 cards are coins or victory point cards.
 
 It's not really interesting to look at all the output, so I just picked up how to allocate the most when the total number of village and blacksmith cards is constant:.
 >||
 3 4 2030
 4 4 3689
 5 4 4852
 6 4 5438
 6 5 5997
 7 5 6714
 8 6 7455
 9 6 7758
 10 6 8045
 11 6 8236
 11 7 8445
 12 7 8629
 ||<
 In other words, the blacksmith has the best chance of buying half a village plus one or two pieces. And even if you are reckless enough to buy 12 pieces of village, the probability of pulling out is only 86%.
 
 I wonder if mixing the storage units would increase the odds?
 
 Source code below
 >|python|
 from copy import copy
 from random import shuffle
 
 VILL = 1
 SMITH = 2
 OTHER = 0
 NUM_TRIAL = 10000
 
 def draw(hand, deck, num):
     hand += deck[:num]
     deck = deck[num:]
     return hand, deck
 
 def test(num_vill, num_smith, num_other=10):
     initial_deck = [VILL] * num_vill + [SMITH] * num_smith + [OTHER] * num_other
     num_success = 0
     for _trial in range(NUM_TRIAL):
         deck = copy(initial_deck)
         shuffle(deck)
         hand, deck = draw([], deck, 5)
         action = 1
         while action and deck:
             if VILL in hand:
                 hand.remove(VILL)
                 hand, deck = draw(hand, deck, 1)
                 action += 1
             elif SMITH in hand:
                 hand.remove(SMITH)
                 hand, deck = draw(hand, deck, 3)
                 action -= 1
             else:
                 break
         if not deck:
             num_success += 1
 
     return num_success
         
 for num_both in range(20):
     for num_smith in range(4, num_both + 1):
         num_vill = num_both - num_smith
         print num_vill , num_smith, test(num_vill, num_smith)
 ||<
 </body>

[Hatena Diary 2010-02-18 https://nishiohirokazu.hatenadiary.org/archive/2010/02/18]