{
  "id": "6090ec0ba287e6002291a274",
  "title": "Hatena2012-11-07",
  "created": 1352214000,
  "updated": 1352214000,
  "lines": [
    {
      "id": "6090ec2faff09e00003dd39e",
      "text": "Hatena2012-11-07",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd39f",
      "text": "code:hatena",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3a0",
      "text": " <body>",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3a1",
      "text": " *1352287410*git(VCS)の未来について",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3a2",
      "text": " gitが素晴らしいとか自由度が高すぎてわかりにくいとかUIが酷いとか色々議論になっているけど、ちょっと歴史を振り返ってみると",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3a3",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3a4",
      "text": " - 1990 CVS",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3a5",
      "text": " - 2000 Subversion",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3a6",
      "text": " - 2003 SVK = Subverionをラップして分散バージョン管理に対応",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3a7",
      "text": " - 2005 Git",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3a8",
      "text": " - 2008 GitHub = Gitをラップして「ワークフローを限定してわかりやすく」",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3a9",
      "text": " - 2010 gitflow = Gitをラップして「ワークフローを限定してわかりやすく」",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3aa",
      "text": " - 2012 今ここ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3ab",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3ac",
      "text": " と進んできているんだからきっと2020年頃には GitHubやgitflowのような「ワークフローを限定してわかりやすくしたバージョン管理」がメジャーになってますよ。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3ad",
      "text": " 近いうちに、かつて「svnは小学生までだよね、これからはSVKだよ」と言われたように「Gitを生で使うなんて小学生までだよね」と言われるようになり、",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3ae",
      "text": " 次に、かつて「SVKは中学生までだよね、これからは(git, hg, bzr)だよ」と言われたように、Gitをラップしたものはダサい、新しい世代のツールがよい(ただしまだどれがメジャーになるか誰もわからない)と言われるようになり、",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3af",
      "text": " そして「メジャーであるから」という理由でGitのバイラルサイクルが回るようになったのと同じように、その新しい世代のツールのどれかがキャズムを超えてアーリーアダプター以外も使うようになり、",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3b0",
      "text": " そしてまた「使いづらい」という不満が噴出するようになるわけです。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3b1",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3b2",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3b3",
      "text": " そういう意味で、プロジェクトのワークフローにあわせてgitにコマンドを追加する<a href='http://developer.cybozu.co.jp/tech/?p=919'>git hazama</a>のアプローチはすごく正しいとおもうのです。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3b4",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3b5",
      "text": " *1352295805*レバレッジメモ：継続的デリバリー12章",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3b6",
      "text": " 社内読書会のために<a href=\"http://www.amazon.co.jp/gp/product/4048707876/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4048707876&linkCode=as2&tag=nishiohirokaz-22\">継続的デリバリー 信頼できるソフトウェアリリースのためのビルド・テスト・デプロイメントの自動化</a>の12章を予習したのでレバレッジメモ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3b7",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3b8",
      "text": " ** 12章：データを管理する",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3b9",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3ba",
      "text": " データのライフサイクルはアプリよりも長い。規模も大きい。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3bb",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3bc",
      "text": " データの構造を変更する必要性は必ず出てくる。混乱を最小限に収めるには？",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3bd",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3be",
      "text": " ** 12.2 データベースのスクリプト処理",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3bf",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3c0",
      "text": " 継続的デリバリーの最も重要な点は「環境を再現し、その上でアプリを走らせる作業」を自動化するところだ。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3c1",
      "text": " DBの初期化やマイグレーションは全てスクリプトにしてバージョン管理する必要がある。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3c2",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3c3",
      "text": " DB更新の最もシンプルな方法は「消して作りなおす」だ。それができるならさっさとそれでやればいい。しかし多くの場合は消してはいけないデータがたくさんある。どうするか？",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3c4",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3c5",
      "text": " ** 12.3 インクリメンタルな変更",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3c6",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3c7",
      "text": " インクリメンタルなDBの変更のためには、マイグレーションスクリプトにテーブルのバージョンを入れる。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3c8",
      "text": " 失敗したら戻せるように、ロールフォワードとロールバックの両方のスクリプトを作る。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3c9",
      "text": " こうすればあるバージョンのテーブルから別のバージョンのテーブルへどうすれば変換できるかが機械的に判断できる。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3ca",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3cb",
      "text": " データを捨てるような変更をする際は、ロールバックで元に戻せるようにデータをテンポラリなテーブルにコピーしておく。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3cc",
      "text": " しばらくして問題無いと判断できてからテンポラリテーブルを消せば良い。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3cd",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3ce",
      "text": " ** 12.3.2 オーケストレイトされた変更を管理する",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3cf",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3d0",
      "text": " 複数のアプリがDBを共有している場合は、なるべく実運用環境に近い環境でテストするべき。DBに加えた変更が予期しない他のアプリに影響を及ぼす可能性があるから。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3d1",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3d2",
      "text": " ** コラム 技術的負債",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3d3",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3d4",
      "text": " 技術的負債は利子を産む。負債を溜めすぎると利子の返済(動かし続けるための保守)しかできない状態になり、新しい機能の追加ができなくなる。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3d5",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3d6",
      "text": " 大半のプロジェクトでは負債まみれになる。毎回変更後にリファクタするぐらいの方がよい。未来から借り入れるなら返済計画を立てること。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3d7",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3d8",
      "text": " ** 12.4 DBのロールバックとゼロダウンタイムリリース",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3d9",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3da",
      "text": " 本番環境には二つの制約がある。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3db",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3dc",
      "text": " - アップグレードを取り消した際に、アップグレード後のトランザクションで追加されたデータを失ってはいけない",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3dd",
      "text": " - SLAを守るために、ダウンタイムを最小限にしなければならない",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3de",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3df",
      "text": " 解決策は3つある",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3e0",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3e1",
      "text": " - トランザクションをコピーしておく",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3e2",
      "text": " - ブルーグリーンデプロイ：新旧両方のバージョンを稼働しておく",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3e3",
      "text": " - DBマイグレーションをアプリのデプロイと切り離す",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3e4",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3e5",
      "text": " 1つ目は、トランザクションをどこかのレイヤーで記録しておくことで、後で復元できるようにする方法。DBのテーブルのレイヤーでコピーするのに限らない、操作ログやイベントログやトランザクションログから復元できるならそれでOK。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3e6",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3e7",
      "text": " 2つ目は、旧システムと新システムを並行して走らせる方法。新システムが失敗で旧システムに戻したとしても、新システムの中のデータは失われない。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3e8",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3e9",
      "text": " 3つ目は、DBスキーマ変更時にはアプリを新バージョンのDBスキーマと旧バージョンのDBスキーマのどちらでも動くように設計する方法。これによってアプリの更新のタイミングとDBスキーマの更新のタイミングを切り離すことができる。アプリを旧バージョンに戻したとしてもDBは新しいままなのでデータが失われない。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3ea",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3eb",
      "text": " P.414で紹介されているDBアクセスに抽象化レイヤーを挟む方法もアプリをDBスキーマの変更から守るために使える方法だ。と著者は言ってるけどDBスキーマ変えるのはだいたいアプリが何かその値を読み書きしたいからだよね。DBスキーマ変更のたびに抽象化レイヤーのメンテコストが掛かるじゃん。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3ec",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3ed",
      "text": " ** 12.5 テストデータを管理する",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3ee",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3ef",
      "text": " テストデータの管理には2つの問題がある。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3f0",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3f1",
      "text": " - テストのパフォーマンス",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3f2",
      "text": " - テストの分離",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3f3",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3f4",
      "text": " パフォーマンスのためには実データを使うな。実データはテストの目的に比べて大きすぎる。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3f5",
      "text": " DBアクセスを抽象化レイヤーで切り離し、テストダブルで置き換えられるようにする。もしくはSQLiteなどのインメモリDBに差し替えられるように設計する。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3f6",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3f7",
      "text": " テストの分離のためには、テスト用のデータがそのテストからしか見えないことが重要。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3f8",
      "text": " それを保証するために筆者は「トランザクションを開始してから操作を行い、テスト終了後にロールバック」という方法を使っている。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3f9",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3fa",
      "text": " 筆者はテストがお互いに影響し合わないことを「テストがアトミックである」と表現しているけども、データベースやトランザクションの話をしている文脈でACIDのAでないものをアトミックとか呼ぶのは誤解を招くので良くないと思う。筆者が気に入っているテクニック「トランザクションの中での操作は他から見えない」はアトミシティじゃなくてアイソレーションじゃん。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3fb",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3fc",
      "text": " 「Xをして、それからYをして…」というストーリーを作って、それにそったテストをしたくなる。個々のテストごとの初期化コストなどが必要なくなるし魅力的に見えるが、テストが密結合になるので将来的にメンテコストが跳ね上がる。将来的に何かが変更されてストーリーテストがコケた時に、どこがどういう挙動をしていてどこを直すべきなのか調査が必要になる。結局各ステップごとのテストをやるのと変わらない。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3fd",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3fe",
      "text": " ** 12.6.1 コミットステージでのテストにおけるデータ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd3ff",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd400",
      "text": " テストと実装が密結合過ぎると、テストが実装の変更の妨げになる。本当はリファクタ時のミスからの防波堤でなければならない。実装の些細な変更でテストを大幅に変更する必要が出るなら、そのテストは「ふるまいの仕様」としての役割を果たせていない。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd401",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd402",
      "text": " テストと実装の密結合は、データに凝りすぎた結果であることが多い。最小限のデータを使ってふるまいを確かめる。データの作り方に注意し、可能な限りテストヘルパーやフィクスチャを使う。こうすればデータ構造が変わってもフィクスチャの修正だけで済む。テストを全部直すはめになったりしない。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd403",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd404",
      "text": " 「各テストに固有のデータ」を最小化することを目標にする。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd405",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd406",
      "text": " ** 12.6.2 受け入れテストにおけるデータ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd407",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd408",
      "text": " テストに固有でないデータはダンプで保存してバージョン管理する。マイグレーションのテストにも使える。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd409",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd40a",
      "text": " ** 12.6.3 キャパシティテストにおけるデータ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd40b",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd40c",
      "text": " P.299 インタラクションテンプレートを使って記録したものを再利用",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd40d",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd40e",
      "text": " ** 12.6.4 その他のステージにおけるデータ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd40f",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd410",
      "text": " 重要なコンセプトは「ふるまいの指定」を再利用すること。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd411",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd412",
      "text": " 本番データのダンプは大きすぎる。目的に合わせて適切なサイズのいろんなダンプを用意しておく。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd413",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd414",
      "text": " ** 12.7 まとめ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd415",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd416",
      "text": " - 重要なのはDB作成やマイグレーションを完全に自動化すること。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd417",
      "text": " - 本番データのダンプは大きすぎる。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd418",
      "text": " - DBをバージョン管理する。マイグレーションを自動化する。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd419",
      "text": " - スキーマの前方・後方互換性に気をつけて、DBのデプロイに関する問題をアプリのデプロイに関する問題と切り離す。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd41a",
      "text": " - テストが共有するデータは最小限にする。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd41b",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd41c",
      "text": " もちろん個別の事情に合わせて変化させる必要があるが、まずはこれが大原則である。",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd41d",
      "text": " ",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd41e",
      "text": " <iframe src=\"http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=AAFFAA&fc1=000000&lc1=0000FF&t=nishiohirokaz-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4048707876\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd41f",
      "text": " </body>",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd420",
      "text": " <comments>",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd421",
      "text": " <comment>",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd422",
      "text": " <username>pochi-mk</username>",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd423",
      "text": " <body>RCSとかSCCSは歴史以前の扱いですかwww (まあどうでもいい話ですが...)</body>",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd424",
      "text": " <timestamp>1352291397</timestamp>",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd425",
      "text": " </comment>",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd426",
      "text": " <comment>",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd427",
      "text": " <username>nishiohirokazu</username>",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd428",
      "text": " <body>必要以上に詳細な歴史を書いても刺さる読者が減るだけですから…。3個ってのは適度なサイズだと思いますよ。</body>",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd429",
      "text": " <timestamp>1352296164</timestamp>",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd42a",
      "text": " </comment>",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd42b",
      "text": " <comment>",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd42c",
      "text": " <username>DQNEO</username>",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd42d",
      "text": " <body>SVKはアーリーアダプター以外には使われなかったんじゃないでしょうか。<br>SVKがキャズムを越えなかったから今のGit全盛期があるのではないかと。<br>（本論の趣旨と関係なかもしれませんが・・)</body>",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd42e",
      "text": " <timestamp>1352981271</timestamp>",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd42f",
      "text": " </comment>",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd430",
      "text": " </comments>",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd431",
      "text": "",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd432",
      "text": "[はてなダイアリー 2012-11-07 https://nishiohirokazu.hatenadiary.org/archive/2012/11/07]",
      "created": 1352214000,
      "updated": 1352214000,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}