{
  "id": "5b72e9aa0f6a3d0014969401",
  "title": "グループ編成はメソッド抽出に似ている",
  "created": 1534257582,
  "updated": 1555483953,
  "lines": [
    {
      "id": "5b72e9aa0f6a3d0014969401",
      "text": "グループ編成はメソッド抽出に似ている",
      "userId": "582e63d27c56960011aff09e",
      "created": 1534257582,
      "updated": 1555480842
    },
    {
      "id": "5cb6cd1faff09e00008c2ef6",
      "text": "[/intellitech-en/(5.2.5.4) Group organization is similar to method extraction]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555483935,
      "updated": 1555483953
    },
    {
      "id": "5cb6cd1baff09e00008c2ef4",
      "text": "---",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555483932,
      "updated": 1555483935
    },
    {
      "id": "5cb6bcc8aff09e00008c2ed0",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555479753,
      "updated": 1555479753
    },
    {
      "id": "5cb6bcc9aff09e00008c2ed1",
      "text": "プログラマはしばしばrefactoringと呼ばれる作業を行う。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555479753,
      "updated": 1555479772
    },
    {
      "id": "5cb6bcdeaff09e00008c2ed5",
      "text": "refactoringは、プログラムの振る舞いを変えずに、ソースコードの構造を変える作業だ。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555479774,
      "updated": 1555479796
    },
    {
      "id": "5cb6bcf3aff09e00008c2ed6",
      "text": "なぜそれをするのか。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555479796,
      "updated": 1555479813
    },
    {
      "id": "5cb6bd05aff09e00008c2ed7",
      "text": "それはリファクタリングによって「理解のしやすさ」が改善するからだ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555479813,
      "updated": 1555479830
    },
    {
      "id": "5cb6bd57aff09e00008c2edc",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555479895,
      "updated": 1555479895
    },
    {
      "id": "5cb6bd16aff09e00008c2ed8",
      "text": "ソースコードは「多すぎる情報」であって、それを人間が扱うためには認知的なコストを下げる必要がある、プログラミング言語はそのためのツールをたくさん生み出してきた。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555479830,
      "updated": 1555479849
    },
    {
      "id": "5cb6bd29aff09e00008c2eda",
      "text": "モジュールやインターフェースもそう。ここで紹介するメソッドやその前身である関数もそうだ。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555479849,
      "updated": 1555480282
    },
    {
      "id": "5cb6bed9aff09e00008c2edd",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555480282,
      "updated": 1555480282
    },
    {
      "id": "5cb6bee1aff09e00008c2ede",
      "text": "プログラミング経験のない人のために簡単に説明すると、ここでいう\"method\"は手段という意味ではない。コンピュータに対する命令の塊である。メソッドは名前を持っている。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555480289,
      "updated": 1555480338
    },
    {
      "id": "5cb6bf11aff09e00008c2edf",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555480338,
      "updated": 1555480338
    },
    {
      "id": "5cb6bf11aff09e00008c2ee0",
      "text": "メソッド抽出はリファクタリングの一種である。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555480338,
      "updated": 1555480379
    },
    {
      "id": "5cb6bf3baff09e00008c2ee1",
      "text": "ソースコードの一部の関連している行を新しいメソッドに括りだす。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555480379,
      "updated": 1555480395
    },
    {
      "id": "5cb6bf4baff09e00008c2ee2",
      "text": "そしてそのメソッドに処理の内容を表現する「名前」を付ける。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555480395,
      "updated": 1555480409
    },
    {
      "id": "5cb6bf59aff09e00008c2ee4",
      "text": "これはグループ編成と表札付けに似ている。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555480409,
      "updated": 1555480414
    },
    {
      "id": "5cb6bd32aff09e00008c2edb",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555479859,
      "updated": 1555479859
    },
    {
      "id": "5cb6bd26aff09e00008c2ed9",
      "text": "このアナロジーを使うと",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555479846,
      "updated": 1555480445
    },
    {
      "id": "5cb6bf7eaff09e00008c2ee9",
      "text": "「この行は条件分岐だから集めよう」はNG。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555480446,
      "updated": 1555480470
    },
    {
      "id": "5cb6bf74aff09e00008c2ee6",
      "text": "「この行には同じ名前の変数が出てくるからまとめよう」もNG。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555480437,
      "updated": 1555480511
    },
    {
      "id": "5cb6bfbfaff09e00008c2eea",
      "text": "プログラムの行が互いに関連しあってひとかたまりの機能を表現している時にそれを括り出すのが正しい。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555480511,
      "updated": 1555480548
    },
    {
      "id": "5cb6bfe3aff09e00008c2eeb",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555480548,
      "updated": 1555480725
    },
    {
      "id": "5cb6bfe3aff09e00008c2eec",
      "text": "どこをどう括り出すかに正解はない。だが、良い単位で括りだし、良い名前をつけると、その後のプログラミングが楽になる。括り出して名前をつけることによって、考えるための「取って」ができる。何行ものソースコードが一つのメソッド名に圧縮される。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555480548,
      "updated": 1555480654
    },
    {
      "id": "5cb6bf75aff09e00008c2ee7",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555480437,
      "updated": 1555480437
    },
    {
      "id": "5cb6c055aff09e00008c2eed",
      "text": "そうやってコードをどんどん圧縮して行くことによって、",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555480661,
      "updated": 1555480674
    },
    {
      "id": "5cb6c061aff09e00008c2eef",
      "text": "人間は大規模なプログラムを作ることが可能になったのだ。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555480674,
      "updated": 1555480689
    },
    {
      "id": "5cb6c055aff09e00008c2eee",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555480661,
      "updated": 1555480731
    },
    {
      "id": "5cb6c09baff09e00008c2ef3",
      "text": "-----",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555480731,
      "updated": 1555480733
    },
    {
      "id": "5cb6c072aff09e00008c2ef1",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555480690,
      "updated": 1555480690
    },
    {
      "id": "5cb6bf75aff09e00008c2ee8",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1555480437,
      "updated": 1555480437
    },
    {
      "id": "5bbd8ac7aff09e0000cd0354",
      "text": "[グループ編成]は[メソッド抽出]である",
      "userId": "582e63d27c56960011aff09e",
      "created": 1539148488,
      "updated": 1539148496
    },
    {
      "id": "5bbd8aceaff09e0000cd0355",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1539148494,
      "updated": 1539148494
    },
    {
      "id": "5b72e9bfaff09e000000885d",
      "text": "[エンジニアの知的生産術 加筆案]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1534257599,
      "updated": 1534257619
    },
    {
      "id": "5b72e9fbaff09e000000885f",
      "text": "#エンジニアの知的生産術_加筆案",
      "userId": "582e63d27c56960011aff09e",
      "created": 1534257659,
      "updated": 1644914378
    },
    {
      "id": "5b72ea60aff09e0000008864",
      "text": "P.160の「[グループ編成には発想の転換が必要]」の次あたりに入れるとよいかも",
      "userId": "582e63d27c56960011aff09e",
      "created": 1534257761,
      "updated": 1539148505
    },
    {
      "id": "5b7387cdaff09e000032ad5f",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1534298072,
      "updated": 1534298072
    },
    {
      "id": "5b72e9c5aff09e000000885e",
      "text": " プログラムを書いていてプログラマ向けに「KJ法での[グループ編成]と[表札付け]」を解説する上ですごく良い例を思いついた。プログラムを書いてからそれを関数にくくりだすとき、「互いに関係しているコード」を関数の形でくくりだし、その関数に処理の内容を表現する「名前」を付ける。それこそグループ編成と表札付けだ。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1534257606,
      "updated": 1534257749
    },
    {
      "id": "5b72ea67aff09e0000008866",
      "text": " \t「関数にくくりだす」と「メソッド抽出」のどちらが伝わりやすいのだろう。JavaやC#ではリファクタリング機能で範囲を選択してメソッド抽出するよね。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1534257768,
      "updated": 1534257831
    },
    {
      "id": "5b72ea2baff09e0000008863",
      "text": " そう考えると「似ているものを集める」が間違いなのもわかる。コードの中のif文を「これはif文だ」って言って集めて「if文」って名前の関数にしても意味がないよね。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1534257707,
      "updated": 1534257729
    },
    {
      "id": "5b72e9fbaff09e0000008860",
      "text": " 複数行のコードを関数にくくりだして「名前を付ける」ことによって、その一連の処理を1つの関数名に「圧縮する」ことができる。同じ処理をプログラムの複数個所で使う場合に、その名前を使って関数を呼び出して使うことができる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1534257659,
      "updated": 1534257931
    },
    {
      "id": "5b72eaffaff09e0000008867",
      "text": " 名前がつくことによって考えるための「取っ手」ができる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1534257920,
      "updated": 1534257951
    },
    {
      "id": "5b72eb1eaff09e0000008869",
      "text": " よい名前を付けることが重要。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1534257951,
      "updated": 1534257953
    },
    {
      "id": "5b72eb21aff09e000000886a",
      "text": " そうやって末端のコードをどんどん圧縮して行くことによって、一人の人間ではすべてを脳内に展開できないような大規模なソースコードのプログラムを作ることが可能になったわけだ。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1534257953,
      "updated": 1534257954
    },
    {
      "id": "5b72ea08aff09e0000008861",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1534257672,
      "updated": 1534257672
    }
  ]
}