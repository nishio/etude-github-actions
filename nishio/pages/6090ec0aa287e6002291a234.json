{
  "id": "6090ec0aa287e6002291a234",
  "title": "Hatena2012-05-24",
  "created": 1337785200,
  "updated": 1337785200,
  "lines": [
    {
      "id": "6090ec2eaff09e00003dc157",
      "text": "Hatena2012-05-24",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc158",
      "text": "code:hatena",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc159",
      "text": " <body>",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc15a",
      "text": " *1337854752*Numpyで行列をちょっと太らせる",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc15b",
      "text": " シンボル列の間の遷移確率を計算するとか何とかで、種数 * 種数の行列が必要になるんだけども、でも事前に種数をカウントするのは嫌で新しいシンボルにであった時に行列を太らせたいな、と思ったのです。最初は正方行列を2つ取って、斜めにくっつけた行列を返す関数があるんじゃないかと探してみたのだけど、見つけられなかったのでc_とr_で貼り付けました。",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc15c",
      "text": " ",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc15d",
      "text": " >|python|",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc15e",
      "text": " def enlarge(mat):",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc15f",
      "text": "     \"\"\"",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc160",
      "text": "     widen matrix",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc161",
      "text": "     >>> x = np.array([[1, 2], [3, 4]])",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc162",
      "text": "     >>> x",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc163",
      "text": "     array([[1, 2],",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc164",
      "text": "            [3, 4]])",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc165",
      "text": "     >>> enlarge(x)",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc166",
      "text": "     array([[ 1.,  2.,  0.],",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc167",
      "text": "            [ 3.,  4.,  0.],",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc168",
      "text": "            [ 0.,  0.,  1.]])",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc169",
      "text": "     \"\"\"",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc16a",
      "text": "     N, M = mat.shape",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc16b",
      "text": "     assert N == M",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc16c",
      "text": "     result = np.r_[np.c_[mat, np.zeros(N)], np.zeros((1, N + 1))]",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc16d",
      "text": "     result[N, N] = 1.0",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc16e",
      "text": "     return result",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc16f",
      "text": " ||<",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc170",
      "text": " ",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc171",
      "text": " 追記: 中谷さん案(id:n_shuyo)の方が圧倒的に速い。N = 5 で僕の実装が120 us、中谷さんの実装が8.34 us。N = 100 で僕の実装が178 us、中谷さんの実装が27.9 us。",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc172",
      "text": " ",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc173",
      "text": " >|python|",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc174",
      "text": " result = numpy.zeros((N+1, N+1)) ",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc175",
      "text": " result[0:N,0:N] = mat ",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc176",
      "text": " result[N,N] = 1 ",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc177",
      "text": " ||<",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc178",
      "text": " ",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc179",
      "text": " *1337870131*SlideshareとSpeakerDeckを比較してみた",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc17a",
      "text": " SpeakerDeckがいいという噂を聞いたので試してみたが…いやダメだろこれ。確かにビューワーはSpeakerDeckの方が快適だ。だけど、どのサービスにスライドをアップロードするのかを決めるのは、スライドを見る人じゃなくてアップロードする人だよね。アップロードした人が自分のアップロードしたスライドを見た時にどう見えるのか比較してみよう。",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc17b",
      "text": " ",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc17c",
      "text": " SpeakerDeck",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc17d",
      "text": " [f:id:nishiohirokazu:20120524233523p:image]",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc17e",
      "text": " ",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc17f",
      "text": " Slideshare",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc180",
      "text": " [f:id:nishiohirokazu:20120524233522p:image]",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc181",
      "text": " ",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc182",
      "text": " SpeakerDeck…僕のスライドの一覧にby NISHIO Hirokazuって表示することに何の意味があるんだ。そしてSlideshareにはそれぞれのスライドの見られた回数やコメントの数、ダウンロードされた回数が表示されているがSpeakerDeckには表示されていない。ふーむ。スライドをアップロードする人は、一体どういうモチベーションでその行動を取っているんだい？他の人に見てもらうためじゃないの？なんでその情報が表示されていないの？",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc183",
      "text": " ",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc184",
      "text": " SpeakerDeckはサービスのデザイン(外見ではなくユーザに何を提供するかの設計)が根本的にイケてないように見える。SpeakerDeckが改善されるのが早いか、SlideshareがSpeakerDeck風のビューワーを作るのが早いか、どっちだろうね。まあ、僕は当分Slideshareを使い続けることにするよ。",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc185",
      "text": " </body>",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc186",
      "text": "",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc187",
      "text": "[はてなダイアリー 2012-05-24 https://nishiohirokazu.hatenadiary.org/archive/2012/05/24]",
      "created": 1337785200,
      "updated": 1337785200,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}