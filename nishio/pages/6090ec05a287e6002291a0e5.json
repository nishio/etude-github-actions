{
  "id": "6090ec05a287e6002291a0e5",
  "title": "Hatena2010-07-29",
  "created": 1280329200,
  "updated": 1280329200,
  "lines": [
    {
      "id": "6090ec29aff09e00003d6cba",
      "text": "Hatena2010-07-29",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cbb",
      "text": "code:hatena",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cbc",
      "text": " <body>",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cbd",
      "text": " *1280363864*LISP！",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cbe",
      "text": " http://journal.mycom.co.jp/news/2010/07/27/007/index.html via @maeda",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cbf",
      "text": " >>",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cc0",
      "text": " 「LISP」は、「ひだまりスケッチ」シリーズのゆの役や『WORKING!!』の種島ぽぷら役などでおなじみの人気声優・阿澄佳奈を中心に、『おねがいマイメロディ』で夢野歌役を演じた片岡あづさ、現役女子大生声優として注目される原紗友里の3人が集結。\"キミとセツゾク\"をコンセプトに、かつてない\"毎日ファンとコミュニケーションする声優ユニット\"として活動する。",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cc1",
      "text": " <<",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cc2",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cc3",
      "text": " ラノベに進出したと思ったら次は声優ユニット化？！ LISPはんぱねぇ！",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cc4",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cc5",
      "text": " しかしやっぱり「コミュニケーション」はうりなのね。REPLですか",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cc6",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cc7",
      "text": " <iframe src=\"http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=AAFFAA&fc1=000000&lc1=0000FF&t=nishiohirokaz-22&o=9&p=8&l=as1&m=amazon&f=ifr&md=1X69VDGQCMF7Z30FM082&asins=475772828X\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cc8",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cc9",
      "text": " *1280368858*抜粋翻訳 PEP3137: Immutable Bytes and Mutable Buffer",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cca",
      "text": " ** 導入",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ccb",
      "text": " Python 3.0a1で変更可能なバイト列型を公開して以来、変更不可能なバイト列型を表現する方法を追加せよとの圧力が強まった。",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ccc",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ccd",
      "text": " (中略)",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cce",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ccf",
      "text": " 古いPyStringの実装を使い、ロケールサポートとユニコードとの間の暗黙の型変換を取り除いて変更不可能なバイト列型とし、新しいPyBytesの実装を変更可能なバイト列型としてとっておく。",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cd0",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cd1",
      "text": " ** 長所",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cd2",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cd3",
      "text": " 変更不可能なバイト列型をもつことの一つの長所は、コードオブジェクトがそれを使うことができることだ。また、バイト列型をキーとするハッシュテーブルを効率的に作成できるようになる。これはHTTPやSMTPのような、バイト列に基づいてテキストを表現するプロトコルのパースに便利である。",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cd4",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cd5",
      "text": " バイナリデータ(やエンコードされたテキスト)を扱うPython2.x用のコードの移植は、この新しいデザインでの方が、元の変更可能なバイト列を用いる3.0でのデザインよりも楽である。単にstrをbytesに置き換え、'...'リテラルをb'...'リテラルに置き換えるだけである。",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cd6",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cd7",
      "text": " ** 名前",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cd8",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cd9",
      "text": " 下記のPythonレベルの型名を提案する",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cda",
      "text": " - ``bytes`` は変更不可能なバイトの配列 (PyString)",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cdb",
      "text": " - ``bytearray`` は変更可能なバイトの配列 (PyBytes)",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cdc",
      "text": " - ``memoryview`` は別のオブジェクトのバイトビュー (PyMemory)",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cdd",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cde",
      "text": " ``buffer`` と呼ばれていた古い型はPEP 3118で導入された新しい型 ``memoryview`` に似すぎているので削除される。",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cdf",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ce0",
      "text": " ** 要約",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ce1",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ce2",
      "text": " >||",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ce3",
      "text": "     +--------------+-------------+------------+--------------------------+",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ce4",
      "text": "     | C name       | 2.x    repr | 3.0a1 repr | 3.0a2               repr |",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ce5",
      "text": "     +--------------+-------------+------------+--------------------------+",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ce6",
      "text": "     | PyUnicode    | unicode u'' | str     '' | str                   '' |",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ce7",
      "text": "     | PyString     | str      '' | str8   s'' | bytes                b'' |",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ce8",
      "text": "     | PyBytes      | N/A         | bytes  b'' | bytearray bytearray(b'') |",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ce9",
      "text": "     | PyBuffer     | buffer      | buffer     | N/A                      |",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cea",
      "text": "     | PyMemoryView | N/A         | memoryview | memoryview         <...> |",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ceb",
      "text": "     +--------------+-------------+------------+--------------------------+",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cec",
      "text": " ||<",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ced",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cee",
      "text": " *1280415366*抜粋翻訳 PEP227: Statically Nested Scopes",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cef",
      "text": " **概要",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cf0",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cf1",
      "text": " このPEPは Python 2.2 への静的にネストしたスコープ(レキシカルスコープ)の追加と、Python 2.1へのソースレベルでのオプションについて記述する。また、 Python 2.1はこの機能がenableされた場合に意味が変わるような構造について警告をする。",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cf2",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cf3",
      "text": " 従来の言語仕様(2.0以前)では、変数名を解決するのに用いる名前空間をちょうど3つ定義していた。ローカル、グローバル、そしてビルトインの名前空間である。ネストしたスコープの追加によって、未束縛のローカル変数名をそれを包む関数の名前空間で解決することが出来るようになる。",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cf4",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cf5",
      "text": " この変更によるもっとも分かりやすい結果は、無名関数(や他のネストした関数)が、それを取り囲む名前空間で定義された変数を参照できるようになることである。現在、無名関数では(訳注:外で定義された変数を)無名関数の名前空間に明示的に束縛するためにデフォルト引数を頻繁に使わなければいけない。",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cf6",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cf7",
      "text": " **導入",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cf8",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cf9",
      "text": " この提案は、Pythonの関数の中の自由変数を解決する方法を変更する。新しい名前解決の動作は Python 2.2 から効果を発揮する。この動作は Python 2.1 でもモジュールに\"from __future__ import nested_scopes\"と付けることで利用可能である。(PEP 236を参照)",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cfa",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cfb",
      "text": " Python 2.0の仕様はそれぞれの名前を解決するのに、ちょうど3つの名前空間だけを定めていた。ローカル名前空間、グローバル名前空間、そしてビルトイン名前空間である。",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cfc",
      "text": " この定義により、もしある関数Aが別の関数Bの中で定義されている場合、Bの中で束縛されている名前はAの中からは見ることができない。この提案はこのルールを変更し、Bの中で束縛された名前がAの中でも見えるようにしよう(ただしAがBの束縛を隠してしまうような名前束縛を含まない場合に限る)というものである。",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cfd",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cfe",
      "text": " この仕様はAlgol系の言語で普遍的なレキシカルスコープのルールを導入する。レキシカルスコープとすでにサポートされているファーストクラスの関数の組み合わせは、Schemeを連想させる。",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cff",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d00",
      "text": " 変更されるスコープのルールには2つの問題があった。ラムダ式(と一般にネストした関数)の限られた機能、そしてネストしたレキシカルスコープをサポートしている他の言語に慣れた新規ユーザが頻繁に混乱すること、例えば再帰的な関数はモジュールレベルでしか定義できないことなど、である。",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d01",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d02",
      "text": " ラムダ式は一つの式だけを評価する名前のない関数を作る。これはよくコールバック関数として用いられる。下記の例(Python 2.0のルールを使って書かれている)では、ラムダの本体の中で使われている名前はすべて、明示的にラムダのデフォルト引数として渡さなければならない。",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d03",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d04",
      "text": " >|python|",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d05",
      "text": "   from Tkinter import *",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d06",
      "text": "   root = Tk()",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d07",
      "text": "   Button(root, text=\"Click here\",",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d08",
      "text": "          command=lambda root=root: root.test.configure(text=\"...\"))",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d09",
      "text": " ||<",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d0a",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d0b",
      "text": " このアプローチはめんどくさい。特にいくつもの名前がラムダの中で使われる場合には。",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d0c",
      "text": " デフォルト引数の長いリストはコードの目的を分かりにくくする。提案する方法では、ぶっきらぼうに言えば、デフォルト引数のアプローチを自動的に実装することでこの問題を解決する。この\"root=root\"という引数は削除できる。",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d0d",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d0e",
      "text": " 新しい名前解決の動作は Python 2.0 と異なる振る舞いが原因でいくつかの問題を起こす。ある場合にはプログラムのコンパイルができなくなり、またある場合では以前はグローバルの名前空間で解決されていた名前が外側の関数のローカルの名前空間で解決されるようになる。Python 2.1では、異なる挙動をする文すべてについて警告が発せられる。",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d0f",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d10",
      "text": " *1280416318*Rubyのスコープが面白かった件",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d11",
      "text": " >|ruby|",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d12",
      "text": " $ irb",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d13",
      "text": " >> $o_o = o_o =-~ ( \"o_o\" =~ /o_o/ )",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d14",
      "text": " => 1",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d15",
      "text": " >> def o_o (o_o) $o_o + o_o end",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d16",
      "text": " => nil",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d17",
      "text": " >> o_o",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d18",
      "text": " => 1",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d19",
      "text": " >> o_o o_o",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d1a",
      "text": " => 2",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d1b",
      "text": " >> o_o o_o o_o",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d1c",
      "text": " => 3",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d1d",
      "text": " >> o_o o_o o_o o_o",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d1e",
      "text": " => 4",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d1f",
      "text": " ||<",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d20",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d21",
      "text": " 個人的には関数と非関数で名前空間が分かれてるのか！と驚いたのだけど、でもまあメソッドとプロパティの名前空間が分かれてるって考えるとそれほど驚きでもないのかも知れない。むしろf f f が f (f f) と解釈されることも驚きなんだけど。",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d22",
      "text": " ",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d23",
      "text": " なお最初は $o_o = o_o = 1 と書いていて「この1が顔文字だけれ作れればなぁ」って言っていたら id:hzkr 氏に作ってもらえました。感謝♪",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d24",
      "text": " </body>",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d25",
      "text": "",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d26",
      "text": "[はてなダイアリー 2010-07-29 https://nishiohirokazu.hatenadiary.org/archive/2010/07/29]",
      "created": 1280329200,
      "updated": 1280329200,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}