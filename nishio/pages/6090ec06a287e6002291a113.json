{
  "id": "6090ec06a287e6002291a113",
  "title": "Hatena2010-10-18",
  "created": 1287327600,
  "updated": 1287327600,
  "lines": [
    {
      "id": "6090ec29aff09e00003d780a",
      "text": "Hatena2010-10-18",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d780b",
      "text": "code:hatena",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d780c",
      "text": " <body>",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d780d",
      "text": " *1287404332*C++の設計と進化(D&E) レバレッジメモ 1",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d780e",
      "text": " どこにどの話題が書かれていたかすぐに探せるようにレバレッジメモを作ろうとしたがさすがに一気に作るのは無理だった…C++の話になる前に力尽きた。ふー、これでやっと1/4くらいかー。次回はC++の章からやる。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d780f",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7810",
      "text": " <hr>",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7811",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7812",
      "text": " ** ~第0章",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7813",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7814",
      "text": " ある人はD&Eを単なる歴史書と呼んだが…C++がなぜこのようにあるのかを理解することはプログラマがそれを使いこなすことを助ける。道具に対する深い理解は専門的な熟練工にはべからざるものである。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7815",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7816",
      "text": " Simulaの最も初期の段階からコンテナは押し付けがましかった。Objectのようなクラスから派生していないと格納できなかった。intなどの基本型は入れられなかった。取り出すときにはObject型になってしまいキャストが必要だった。配列はユーザ定義型を格納できず、参照のみを格納できる。Smalltalk, Java, C#も同様の問題を抱えている。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7817",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7818",
      "text": " STLのコンテナはとても不恰好に見えたが、コンテナが満たすべき性質のリストに1つを除いて合格した。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7819",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d781a",
      "text": " どんなコンテナも要素の列として捉えられる。コンテナはその最初の要素がどこにあるかと、最後の要素がどこにあるかを知っている。要素を指すオブジェクトのことをイテレータと呼ぶ。イテレータを使ってちょうどポインタの*のように指す値を取得することができ、++のように次の要素を指すようにできる。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d781b",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d781c",
      "text": " STL以前、C++がサポートするパラダイムは次の3つだった「手続き的プログラミング」「データ抽象」「オブジェクト指向」、テンプレートはデータ抽象をサポートするものだと思っていた。STLでしばらく遊んでから4つ目を加えた「総称的プログラミング」",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d781d",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d781e",
      "text": " 「テンプレートの分割コンパイルはとても困難だから実装者に負わせるべきでない」「テンプレートの分割コンパイルはデータ隠蔽原理に基づく正しいコードの組織化に必須である」",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d781f",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7820",
      "text": " JavaはC++に置き換わることはなかった。「2年以内にC++を殺す」と1996年になんども聞いた",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7821",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7822",
      "text": " Javaが「純粋なオブジェクト指向」というプログラミングの見方を広めたことは多くのC++プログラマに不必要なコードを書くように仕向けてしまった",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7823",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7824",
      "text": " 新しい言語はいつだって単純さを売りにし、その後実世界のアプリケーション向けにサイズも複雑性も増す。C++もJavaもこのシナリオから逃れられなかった --- Schemeもだね",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7825",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7826",
      "text": " プログラミング言語に関する従来の本はその言語の構造や使い方を説明している。しかし「なぜそんな構造なのか？」や「どういう経緯でそうなったのか？」という疑問をもつ人も多い。本書はこの2つの疑問に答える本だ。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7827",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7828",
      "text": " 1979年5月 C with Classes開発開始→10月最初の実装を使用開始",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7829",
      "text": " 1982年 最初の外部発表",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d782a",
      "text": " 1983年 8月、C++実装開始→12月C++と命名",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d782b",
      "text": " 1985年 最初の外部リリース",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d782c",
      "text": " 1989年 Cfront 2.0リリース",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d782d",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d782e",
      "text": " ALGOL68の最初の実用実装が世に出たのは1977",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d782f",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7830",
      "text": " プログラミング言語とは何か、～の目的は何か、",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7831",
      "text": " 「機械に命令する道具」「プログラマがコミュニケーションするための道具」「アプリの高レベルの設計を表現する道具」「アルゴリズムを記述する道具」「実験のための道具」「装置を制御する方法」の全部。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7832",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7833",
      "text": " 言語の設計はユーザへの奉仕が第一である。ありとあらゆる分野から役に立ちそうなものを無節操に取り入れる。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7834",
      "text": " 成功する言語は一定の原理原則に基づいて設計されるのではなく現実の中で成長するものである。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7835",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7836",
      "text": " ** 第1章",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7837",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7838",
      "text": " Simulaでは複数のクラスがコルーチンとして動くので並行性を簡単に表現できる。またクラス階層という概念を使ってアプリケーションレベルの概念の同類関係～変種関係を表現できる。ただし私はそれほど多用しなかった。並行性の方が重要。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7839",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d783a",
      "text": " Simulaのタイプシステムの表現力と、タイプエラーを補足するコンパイラの能力に感心。愚かなエラーや設計ミスを指摘してくれる。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d783b",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d783c",
      "text": " Simulaで書いたプログラムは一つの大きなプログラムではなく小さなプログラムの集まりなのだ。だから書くことも、理解することも、デバッグすることも容易。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d783d",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d783e",
      "text": " Simulaの実装系はスケールしなかった。クラスが多くなるとリンクに膨大な時間がかかる。あと実行時間の80%がGC。仕方が無いのでBCPLで書き直した。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d783f",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7840",
      "text": " 大規模なプログラムを書くために適したツールは",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7841",
      "text": " - プログラムの組織化能力(クラス、クラス階層、並行性、タイプチェック)",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7842",
      "text": " - 高速なプログラムを作る能力。単一の言語に束縛されないために複数の言語で書かれたユニットを容易にリンクできる能力 --- ！！",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7843",
      "text": " - 実装系による性能差が大きくないこと、異色が容易であるためにはランタイムサポートが複雑すぎてはいけない",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7844",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7845",
      "text": " Cの構文はAlgol68の一般的な概念を特殊化したものと考えたほうがわかりやすい。理想の言語はAlgol68にSimulaのクラスを加えたものだ、と書いたこともある。しかし実用のためにはCの方がAlgol68よりずっといい。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7846",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7847",
      "text": " ** 第2章 C with Classes",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7848",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7849",
      "text": " 並行性とSimulaふうのシミュレーション機能がC with Classes(以下CwC)の主な目的だった、しかし言語仕様に並行性に関する予約語を入れることはやめた。継承と特殊なメンバ変数の定義方法を組み合わせることで並行性をサポートするライブラリを作れるようにした。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d784a",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d784b",
      "text": " C++は現在でも特殊なアプリのための特殊な機能 -- 複素数、文字列、行列… --などを言語自体で実装していない。ライブラリでサポートされるから。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d784c",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d784d",
      "text": " CwCはプログラムの構造をより良くすることが設計の第一目的だった。ただし構造が改善されたことによってランタイムのパフォーマンス、コードサイズ、データサイズがCより悪化しないように気をつけた。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d784e",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d784f",
      "text": " Cが元々もっている危険な醜い要素を取り去ることはいけないことだ。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7850",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7851",
      "text": " 当時も今も私はプログラムを書くための唯一正しい方法はありえないから、言語を設計するものもプログラマに一つのスタイルを強制してはならない、と信じている。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7852",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7853",
      "text": " 効果が実証されている多様なスタイルや技法を言語がサポートし、よくありがちな罠や落とし穴からプログラマを守る。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7854",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7855",
      "text": " 1980年にあった機能: クラス、派生クラス(w/o 仮想関数)、public/private、cstr/dstr、call/return関数(その後廃止)、friendクラス、タイプチェックと関数の引数の変換  1981年:インライン関数、デフォルト引数、代入演算子のオーバーロード",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7856",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7857",
      "text": " Cの使えるマシンではCwCが使えた。Cの方言とみなされていた。クラスは抽象データタイプ機能と呼ばれていた(Stroustrup 1980 \"Classes: An Abstract Data Type Facility for the C Language\") オブジェクト指向という言葉が使われたのは仮想関数が導入された1983年",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7858",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7859",
      "text": " ** 2.3 クラス",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d785a",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d785b",
      "text": " クラスはユーザが定義したデータタイプ(以下UDT)。クラスのメンバはそのクラスタイプの変数(つまりそのクラスのオブジェクト)の表現のされ方を定義する。さらにそのオブジェクトに対する操作(関数)を定義し、アクセス方法を指定する。メンバ関数は普通クラスの外で定義する",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d785c",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d785d",
      "text": " CwC, C++ではclassはtypeである。classがユーザ定義のtypeを意味するなら、なぜtypeと呼ばないのか？新しい用語を発明するのが嫌いだし、Simulaのclassのままで誰も困らないと判断したから。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d785e",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d785f",
      "text": " Simulaのポインタと違って、CwCのポインタはUDTとbuilt-in typeの両方を指せる。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7860",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7861",
      "text": " Simulaはクラスタイプのローカル変数やグローバル変数を扱えなかった。new演算子を使って空きメモリに置く。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7862",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7863",
      "text": " CwCではインライン化できるのはメンバ関数のみ、インライン化の方法は関数の本体をクラス宣言の中に置く。多用するとゴタゴタするのでプログラマがインラインを乱用しなくなるという良い副作用。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7864",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7865",
      "text": " 従来からのC/Fortran、UNIX/DOSの梨花を使って分割コンパイルができること",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7866",
      "text": " 他の言語で書かれたプログラム部品のリンクが容易かつ効率的であること",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7867",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7868",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7869",
      "text": " CwCのオブジェクトは単なるCの構造体だった。CwCの最初の実装にはthisがなかった。すぐ加えた。ないと連結リストの操作などができない。SimulaのTHISのC++版。なぜリファレンスではなくポインタか？なぜselfではないのか？thisを導入したときにはまだリファレンスはなかったし、SmalltalkじゃなくてSimulaから主に用語を借りている。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d786a",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d786b",
      "text": " Cで関数の宣言をf()と書くとどんな引数を何個でも取り型チェックをしない、という意味。CwCではf(void)で引数を取らない関数を宣言したが、ユーザはf()で引数を取らないようにしろと要求した。Cからの離反。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d786c",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d786d",
      "text": " Cの宣言の問題点は\"*\"が前置なのに\"[]\"と\"()\"が後置であることだ。そこで後置のポインタ宣言\"->\"を提案した。 int v[10]->; ポインタの配列 int p->[10] 配列を指すポインタ。実装に失敗したので流産した。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d786e",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d786f",
      "text": " 私の意見としてはシンタクスに熱心になりすぎてタイプをおろそかにする人が多すぎる。C++の設計に置ける重要な問題は常にタイプと曖昧性とアクセス制御であり、シンタクスではない。言語のシンタクスは言語のセマンティクスに従うべきであり、それを抜きにして形だけを議論していると個人の好みを巡る議論に退化する。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7870",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7871",
      "text": " C++のderived classはSimulaのprefixed classやSmalltalkのsubclassからの借り物。CwCには仮想関数がない。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7872",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7873",
      "text": " 仮想関数抜きの多態性: タイプフィールドを使って明示的にキャスト。マクロを使えばテンプレートなしにコンテナクラスを実現できる。最終的にはこういうテクニックがテンプレートへと成熟した。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7874",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7875",
      "text": " CwCの最初のバージョンでも保護の仕組みはベースクラスとメンバの両方に適用された。ベースクラスのpublic/privateの議論は実装の継承かインターフェイスの継承かという議論より約5年古い: ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7876",
      "text": " [Snyder, 1986] \"Encapsulation and inheritance in object-oriented programming languages\"",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7877",
      "text": " [Liskov, 1987] \"Data Abstraction and Hierarchy,\"",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7878",
      "text": " 実装だけを継承するならprivate継承、public継承ならインターフェイスも継承する。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7879",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d787a",
      "text": " new演算子をnewと呼んだのはSimulaに同名の演算子があったから。newはアロケーション関数を呼び出してメモリ領域を確保し、次にコンストラクタを呼び出してその領域を初期化する。この二つの仕事を合わせたものを今ではinstantiateとか、単にオブジェクトの生成という。つまり物理メモリの上にオブジェクトという論理的なものを作るのだ。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d787b",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d787c",
      "text": " CwCにはメンバ関数が呼び出される前に呼ばれるcall()と帰る前に呼ばれるreturn()を持っていた --- ！！AOPだ！",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d787d",
      "text": " CLOSには同様に:beforeメソッドと:afterメソッドがあった。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d787e",
      "text": " ",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d787f",
      "text": " CwCにはデフォルト引数があった。C++に一般的な関数オーバーロードが導入されるまでずっと存在した。",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7880",
      "text": " </body>",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7881",
      "text": "",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7882",
      "text": "[はてなダイアリー 2010-10-18 https://nishiohirokazu.hatenadiary.org/archive/2010/10/18]",
      "created": 1287327600,
      "updated": 1287327600,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}