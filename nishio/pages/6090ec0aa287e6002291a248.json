{
  "id": "6090ec0aa287e6002291a248",
  "title": "Hatena2012-06-28",
  "created": 1340809200,
  "updated": 1340809200,
  "lines": [
    {
      "id": "6090ec2eaff09e00003dc6e2",
      "text": "Hatena2012-06-28",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6e3",
      "text": "code:hatena",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6e4",
      "text": " <body>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6e5",
      "text": " *1340811463*java-jaで例外処理の話をしてきました",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6e6",
      "text": " ブログを書くまでがjava-jaですが、もう眠いのでとりあえず1行だけ書いて、あとは徐々に書き足す。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6e7",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6e8",
      "text": " 会場を無料提供してくれたグリーさん、ありがとうございます！",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6e9",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6ea",
      "text": " 誰かが検査例外の話をするだろうと思って書かなかったら結局誰も言及しなかった、Javaのコミュニティなのに。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6eb",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6ec",
      "text": " っていうか聴衆が100人もいると、もしかしてそもそも「検査例外ってなに？」って人もいたんじゃないか？「検査例外がOCPを壊す」とか「Liskovの置換原則のLiskov」とか通じてるんだろうか？とりあえず直和型が通じてないことだけはひしひしと感じた。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6ed",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6ee",
      "text": " Twitterの自分の発言を転載しておく。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6ef",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6f0",
      "text": " >>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6f1",
      "text": " ちなみにZen of Pythonでも「エラーを握りつぶすな」と書いてあります",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6f2",
      "text": " <<",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6f3",
      "text": " <a href='http://d.hatena.ne.jp/nishiohirokazu/20120317/1331989155'>禅 of Python: 20の格言</a>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6f4",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6f5",
      "text": " >>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6f6",
      "text": " 「例外はそもそも何のため」ってところ、ざっくり省いたんだけどもそういうところのほうがニーズあったかね？？",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6f7",
      "text": " <<",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6f8",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6f9",
      "text": " >>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6fa",
      "text": " 「C#1.0のusingにやっと追いついた」",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6fb",
      "text": " <<",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6fc",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6fd",
      "text": " >>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6fe",
      "text": " 達人プログラマー「すべての例外ハンドラを除去してもこのプログラムは動作できるか？」",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc6ff",
      "text": " <<",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc700",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc701",
      "text": " >>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc702",
      "text": " 過剰防衛はDRYでないだけで、防衛が足りないことに比べれば害は少ないのでは。常に真な条件を除去できないコンパイラがタコなだけじゃないか（待て",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc703",
      "text": " <<",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc704",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc705",
      "text": " >>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc706",
      "text": " 「例外は呼び出す側が契約条件を満たしたが呼び出された側が契約を履行できなかった時に投げるもの」 by t_wada なるほどたしかにその視点はすっきりしているな",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc707",
      "text": " <<",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc708",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc709",
      "text": " >>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc70a",
      "text": " 「チェック例外の代償はOCPに反すること」はClean codeの中で言われてるのか。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc70b",
      "text": " <<",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc70c",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc70d",
      "text": " >>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc70e",
      "text": " 「バウンダリに関する問題。UI、ネットワークIO、粒度の大きいシステム間通信・モジュール間結合、こういう部分が単体テストでは拾いにくいバグの温床なのでそれにセンシティブなログ管理があってしかるべきでは」",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc70f",
      "text": " <<",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc710",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc711",
      "text": " →具体的には、ログレベル・ネームスペースの他にもう一軸足す。よむべき：<a href='http://d.hatena.ne.jp/taichitaichi/20090220/1235124140'>ログは、もっと立体的であるべきか。 - 設計と実装の狭間で。</a>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc712",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc713",
      "text": " >>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc714",
      "text": " tanakh「関数がnullを返すかどうかわからないし」太一「Javadoc読めばよい」tanakh「人間が書いたドキュメントとか信じられない」",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc715",
      "text": " <<",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc716",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc717",
      "text": " >>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc718",
      "text": " 「ドキュメント読めよ」は正論だが、現実の問題を見るとドキュメント読んでないことに起因しているバグが実在するわけで「ドキュメントを読まないエンジニアがいる」という現象は不可避。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc719",
      "text": " <<",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc71a",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc71b",
      "text": " >>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc71c",
      "text": "  Eitherを超簡単に説明すると、整数型を返す関数がエラーを投げうるときに、それを「『整数またはエラー』型を返す関数だ」って考えるみたいなー→Eitherの説明を書いているうちにunwindの説明を求められるなどｗｗｗ→HaskellからJavaへの同時通訳とか無理だからｗｗ→直和型って言われて分からない人にMaybeが説明なしでわかるとも思えないので補足すると「『Just整数またはNothing』という型を……とか書いてたら同時通訳のためのマイクを渡されたでござる",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc71d",
      "text": " <<",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc71e",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc71f",
      "text": " Javaで、あるクラスの値(仮にIntとする)を返す関数があったら、返り値がもしかしたらnullかもしれない。「当然その関数がnullを返しうるかどうかJavadocで確認して、適切にnullチェックをするif文をかいてから使うべき」が太一派で「ドキュメントは信頼出来ない。Intって型にIntとして使えないnullが入ってるのがそもそもおかしい。『Just IntまたはNothing(nullみたいなもの)』っていう新たな型を作って関数の返り値をその型にすれば、Nothingを間違えてIntとして使うミスは発生し得ない」が田中派、この『Just IntまたはNothing』って型が『Maybe Int』だ。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc720",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc721",
      "text": " ちなみに「間違う方法があれば必ず誰かが間違う。nullチェックを忘れる人は必ず出現する。エラーは忘れることのできない方法で通知する必要がある。現状大部分の言語はMaybeを持ってなくて例外を持ってるから例外を使って通知するのがよい」が西尾派です。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc722",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc723",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc724",
      "text": " さらに言えば「ハッシュから値を取り出す時に、キーが存在するかチェックする方法もデフォルト値を指定して取得する方法も用意してあるにもかかわらず、それらを使わずにアクセスしてくるのはプログラマが『そのキーが存在する』という信念を持っている状態だ。そのキーが存在しないならそれは誤った信念なので速やかに例外を投げて過ちに気づかせるべきである。nullとかnilとかundefinedを返してんじゃねえよ」も西尾派です。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc725",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc726",
      "text": " 太一の「例外は使わせない」って話に僕は「例外を積極的に使うべき」って反論したんだけども、結局のところ彼の主張は「多人数でコードを書く際に、全員が例外について深く知って正しい設計で例外を使うことを要求するのはコストが高いし必要でもない」だったので、まあその「多人数で」って条件をつけるなら賛成できる。僕の主張は「一人で難易度の高いコードを書く際には、自分がなにか過ちを起こしたらすぐ気づくことができるように想定外の状態を発見したらすぐに例外を投げるべき」だったので、ようは応用分野の違いだな。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc727",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc728",
      "text": " >>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc729",
      "text": " ちなみにLinuxカーネルのコーディング規約ではgotoを使ってリソース処理をすることを薦めている",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc72a",
      "text": " <<",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc72b",
      "text": " http://linuxjf.sourceforge.jp/JFdocs/kernel-docs-2.6/CodingStyle.html",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc72c",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc72d",
      "text": " >>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc72e",
      "text": " ノリツッコミで「GCあるからいいじゃん」って言ったけども、もちろん「対にならなきゃいけない処理」はメモリ確保と解放だけではない。ロックとアンロックなども間で例外が飛んだ時にどうなるべきか考える必要がある。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc72f",
      "text": " <<",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc730",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc731",
      "text": " 例外を投げるかもしれない関数を使うということは、対にならないといけない処理の片方をやって、もう片方をやる前に例外が投げられて、違うコンテキストにジャンプしてしまった時に何が起こるかを考えなければならないということだ。その対になる処理の例の一つが「メモリを確保、その後解放」であって、その問題に関してはGCが解決してくれる。しかし「ロック獲得、その後解放」に関してはGCは何もしてくれない。だからGCがあれば例外安全性に関して何も考えないでいいっていうのは間違い。RAIIを使ってリソース管理の問題にすり替えるとか、STMが解決してくれるかも、とか。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc732",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc733",
      "text": " 「Googleのコーディング規約で例外が禁止されている」ってのはFUD。 http://www.textdrop.net/google-styleguide-ja/cppguide.xml#%E4%BE%8B%E5%A4%96 に和訳されているのでちゃんと理由を読むこと。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc734",
      "text": " >>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc735",
      "text": " 表面的には、例外を使うメリットはそのコストを上回ります。新規プロジェクトの場合にはなおさらです。しかし既存のコードに例外を導入しようとすると、依存関係のあるコードすべてに影響が及びます。...",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc736",
      "text": " <<",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc737",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc738",
      "text": " クライアント側で捕まえる話は、あとで発表資料を再読する必要性を感じた。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc739",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc73a",
      "text": " 「2回やってダメだった処理はだいたいもうダメ」何度も何度もリトライしてるんじゃねぇ、問題を切り分けるための処理をしろ、との主張。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc73b",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc73c",
      "text": " >>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc73d",
      "text": " ryopeko: そういえば家庭と例外処理っていうタイトルで @t_wada に基調講演するの忘れてた #java_ja",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc73e",
      "text": " <<",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc73f",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc740",
      "text": " Fail-fastが重要ですね。まず呼び出し元が意図的に自分を不快にすることがないという至極もっともな仮定をする。すると、もし自分が不快になったならばそれは、僕の実装に関する呼び出し元の理解に誤りがあるわけであり、これを改善するには例外を投げて呼び出し元に問題を通知する必要がある。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc741",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc742",
      "text": " まあもちろん例外を投げた時に適切に対処できる設計になっているかどうかは例外を投げる前に確認しておかないと、実家に大域脱出したり死んだりするかもしれない点には注意が必要だ。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc743",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc744",
      "text": " >>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc745",
      "text": " #java_ja ところでhaskellで「呼び出し側が得たい形でエラーが通知される」ってのは「返り値だけが異なる関数のオーバーロードができる」という性質に依っているので、javaだと全部入りなクラスを作ってas_eitherとかas_maybeみたいなメソッド作るしかないんじゃ？",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc746",
      "text": " <<",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc747",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc748",
      "text": " <a href='http://tanakh.jp/pub/pfi-seminar-2011-12-08.html#1'>エラー処理を書いてはいけない</a>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc749",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc74a",
      "text": " 型宣言がめんどくさくて、型宣言がない言語をつくってみたけどやっぱ型はあったほうがよくて、それで型推論できるところは書かなくてよくしようよ、ってなったのと同じように、Javaの検査例外もめんどくさくて、大部分の言語が検査例外を捨ててしまったが、将来的には例外推論とかが入ってプログラマを幸せにするべきではないか。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc74b",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc74c",
      "text": " <a href='http://www.slideshare.net/pfi/ss-9780450'>できる！並列・並行プログラミング</a>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc74d",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc74e",
      "text": " なぜC++は整数などを例外として投げられるのか。そうした方がよかった積極的な理由があるのか、それとも投げられるものの集合を限定することに価値を見出さなかったという消極的な理由なのか。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc74f",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc750",
      "text": " t_wadaの「例外は仕様で記述された範囲の補集合」って話も印象的だった、思い出したのでメモメモ。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc751",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc752",
      "text": " *1340869798*JSDeferredのloopをネストさせて爆死した日記",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc753",
      "text": " こう書いて悲しいことになった。",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc754",
      "text": " >|javascript|",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc755",
      "text": " Deferred.loop(3, function(i){",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc756",
      "text": "     Deferred.loop(3, function(j){",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc757",
      "text": "         console.log(i + \"-\" + j);",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc758",
      "text": "     });",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc759",
      "text": " }).next(function(){",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc75a",
      "text": "     console.log(\"finished\");",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc75b",
      "text": " });",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc75c",
      "text": " ||<",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc75d",
      "text": " 出力：",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc75e",
      "text": " >||",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc75f",
      "text": " 0-0",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc760",
      "text": " 0-1",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc761",
      "text": " 1-0",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc762",
      "text": " finished",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc763",
      "text": " 0-2",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc764",
      "text": " 1-1",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc765",
      "text": " 2-0",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc766",
      "text": " 1-2",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc767",
      "text": " 2-1",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc768",
      "text": " 2-2",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc769",
      "text": " ||<",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc76a",
      "text": " ",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc76b",
      "text": " 正解はこう、なのかな？",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc76c",
      "text": " >|javascript|",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc76d",
      "text": " Deferred.loop(3, function(i){",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc76e",
      "text": "     return Deferred.loop(3, function(j){",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc76f",
      "text": "         console.log(i + \"-\" + j);",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc770",
      "text": "     });",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc771",
      "text": " }).next(function(){",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc772",
      "text": "     console.log(\"finished\");",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc773",
      "text": " });",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc774",
      "text": " ||<",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc775",
      "text": " </body>",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc776",
      "text": "",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc777",
      "text": "[はてなダイアリー 2012-06-28 https://nishiohirokazu.hatenadiary.org/archive/2012/06/28]",
      "created": 1340809200,
      "updated": 1340809200,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}