{
  "id": "606376aeeb4d99003625b439",
  "title": "推測するな、計測せよ",
  "created": 1617131350,
  "updated": 1642914629,
  "lines": [
    {
      "id": "606376aeeb4d99003625b439",
      "text": "推測するな、計測せよ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617131350,
      "updated": 1617131350
    },
    {
      "id": "606377a4aff09e0000f290ee",
      "text": "あなたはプログラムがどこで時間を消費しているかを理解していない。[ボトルネック]は予想外のところにある。推測するな。どこにボトルネックがあるか証明されるまで高速化するな。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617131429,
      "updated": 1642914629
    },
    {
      "id": "606377a8aff09e0000f290ef",
      "text": "計測せよ。計測するまで高速化するな。計測して、コードの一部分が他の部分より圧倒的に時間を消費しているのでなければ、高速化をするな。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617131432,
      "updated": 1617132502
    },
    {
      "id": "60637910aff09e000037e4bb",
      "text": "(Rob Pikeの文章の西尾による訳)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617131792,
      "updated": 1617131987
    },
    {
      "id": "606379d2aff09e000037e4bc",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617131987,
      "updated": 1617131987
    },
    {
      "id": "6063778aaff09e0000f290ed",
      "text": "[Basics of the Unix Philosophy https://homepage.cs.uri.edu/~thenry/resources/unix_art/ch01s06.html]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617131402,
      "updated": 1617131403
    },
    {
      "id": "60637756aff09e0000f290df",
      "text": ">[Rob Pike], who became one of the great masters of C, offers a slightly different angle in [Notes on C Programming]:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617131350,
      "updated": 1617131491
    },
    {
      "id": "60637780aff09e0000f290e1",
      "text": "> ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617131392,
      "updated": 1617131392
    },
    {
      "id": "60637780aff09e0000f290e2",
      "text": "> Rule 1. You can't tell where a program is going to spend its time. Bottlenecks occur in surprising places, so don't try to second guess and put in a speed hack until you've proven that's where the bottleneck is.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617131392,
      "updated": 1617131392
    },
    {
      "id": "60637780aff09e0000f290e3",
      "text": "> ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617131392,
      "updated": 1617131392
    },
    {
      "id": "60637780aff09e0000f290e4",
      "text": "> Rule 2. Measure. Don't tune for speed until you've measured, and even then don't unless one part of the code overwhelms the rest.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617131392,
      "updated": 1617131392
    },
    {
      "id": "60637780aff09e0000f290e5",
      "text": "> ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617131392,
      "updated": 1617131392
    },
    {
      "id": "60637780aff09e0000f290e6",
      "text": "> Rule 3. Fancy algorithms are slow when n is small, and n is usually small. Fancy algorithms have big constants. Until you know that n is frequently going to be big, don't get fancy. (Even if n does get big, use Rule 2 first.)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617131392,
      "updated": 1617131392
    },
    {
      "id": "60637780aff09e0000f290e7",
      "text": "> ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617131392,
      "updated": 1617131392
    },
    {
      "id": "60637780aff09e0000f290e8",
      "text": "> Rule 4. Fancy algorithms are buggier than simple ones, and they're much harder to implement. Use simple algorithms as well as simple data structures.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617131392,
      "updated": 1617131392
    },
    {
      "id": "60637780aff09e0000f290e9",
      "text": "> ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617131392,
      "updated": 1617131392
    },
    {
      "id": "60637780aff09e0000f290ea",
      "text": "> Rule 5. Data dominates. If you've chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617131392,
      "updated": 1617131950
    },
    {
      "id": "60637780aff09e0000f290eb",
      "text": "> ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617131392,
      "updated": 1617131392
    },
    {
      "id": "60637780aff09e0000f290ec",
      "text": "> Rule 6. There is no Rule 6.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617131392,
      "updated": 1617131392
    },
    {
      "id": "60637780aff09e0000f290e0",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617131392,
      "updated": 1617131392
    },
    {
      "id": "60637a3eaff09e000037e4bd",
      "text": "訳注",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617132095,
      "updated": 1617132099
    },
    {
      "id": "60637a42aff09e000037e4bf",
      "text": "　tellは「あなたは確信を持って言うことができない」と言うニュアンスだが、そう書くとまどろっこしいので「理解していない」とした",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617132099,
      "updated": 1617132174
    },
    {
      "id": "60637a8daff09e000037e4c0",
      "text": "　speed hackとかtuneは「速度を向上させる目的でソースコードの小さな一部を書き換えること」というニュアンスだが、まどろっこしいので「高速化」とした。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617132174,
      "updated": 1617132376
    },
    {
      "id": "60637b57aff09e000037e4c1",
      "text": "　　単語だけの意味としては「データ構造や設計を工夫することで高速にすること」も含んでしまうが、ソースコードができた後でボトルネックを特定しないで高速化してるって話なので誤解はしないだろう",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617132376,
      "updated": 1617132459
    },
    {
      "id": "60637a42aff09e000037e4be",
      "text": "　and even thenは「まず計測しろ、計測するまで高速化するな、そしてたとえ計測した後であっても…」というニュアンスなのだが、日本語にするとand even thenの手前にあったmeasureが遠くに行ってしまう。そこで文を切って「計測する」を再掲することにした。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617132099,
      "updated": 1617132950
    },
    {
      "id": "60637cd2aff09e000037e4c2",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617132755,
      "updated": 1617132755
    },
    {
      "id": "60af38f1aff09e000060e5bb",
      "text": "関連: [Basics of the Unix Philosophy]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1622096114,
      "updated": 1622096117
    },
    {
      "id": "60af38f4aff09e000060e5bc",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1622096116,
      "updated": 1622096116
    },
    {
      "id": "60c96e87aff09e0000748528",
      "text": "表記揺れ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1623813768,
      "updated": 1623813774
    },
    {
      "id": "60c96e8daff09e000074852a",
      "text": "　[まず計測]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1623813774,
      "updated": 1623813779
    },
    {
      "id": "60c96e8daff09e0000748529",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1623813774,
      "updated": 1623813774
    }
  ]
}