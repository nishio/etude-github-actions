{
  "id": "5a544b0e84b65a0014b67dbb",
  "title": "生命としてのソフトウェア",
  "created": 1515473702,
  "updated": 1524966284,
  "lines": [
    {
      "id": "5a544b25aff09e00009a19c1",
      "text": "生命としてのソフトウェア",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473702,
      "updated": 1515473742
    },
    {
      "id": "5a544b26aff09e00009a19c3",
      "text": " 生命としてのソフトウェアに重要なのは設計ではなく耐障害性と相互運用性で、前者はチェインオブレスポンシビリティ、後者はHTTPとJSONでいい気がする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473703,
      "updated": 1515473747
    },
    {
      "id": "5a544b26aff09e00009a19c4",
      "text": " ニーズを持つのは人間であり、それを局所的にでも満たすことができれば、生態学的[ニッチ]でその生物は生き残れる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473703,
      "updated": 1524966284
    },
    {
      "id": "5a544b5caff09e00009a1a3a",
      "text": " ユーザのニーズを満たすことで人間から動き続けるためのリソースを獲得することができる。つまり人間という生態系から食物を得るのに相当する。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473769,
      "updated": 1515473769
    },
    {
      "id": "5a544b26aff09e00009a19cf",
      "text": " 人間とのインターフェースも当面HTMLとJS主体でいいだろう。そのうちセンサー入力をHTTPでタプルスペースに投げるようになる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473703,
      "updated": 1515473769
    },
    {
      "id": "5a544b26aff09e00009a19d3",
      "text": " Twitterも既存のタプルスペースだと思えば良い",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473703,
      "updated": 1515473794
    },
    {
      "id": "5a544b6eaff09e00009a1a3b",
      "text": " 実践の場でもある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473794,
      "updated": 1515473794
    },
    {
      "id": "5a544b74aff09e00009a1a3c",
      "text": " 既存の有益な働きをしているソフトウェアはオルガネラとして取り込めばよい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473794,
      "updated": 1515473794
    },
    {
      "id": "5a544b8faff09e00009a1a3d",
      "text": "  ミトコンドリアはそうやって生まれた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473807,
      "updated": 1515473816
    },
    {
      "id": "5a544b26aff09e00009a19df",
      "text": " コードクローンが良くないのも、コードを抽象化する必要があるのも、そもそも認知能力の限られた人間が理解をしないといけないからであって、それの認知能力のバリアを超えるにはまず人間の認知能力をどうやって増強するかを考えるか、もしくは諦めて自然淘汰に任せるか",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473703,
      "updated": 1515473808
    },
    {
      "id": "5a544b26aff09e00009a19e3",
      "text": "\tコードクローンで何が問題かというと、片方でバグを直してももう片方に波及しないことで、それをまとめるのがなぜ難しいかというと認知能力の乏しい人間には二つのコードが共通化してもよいものかどうか判断できないからだろう、生物は共通化しない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473703,
      "updated": 1515473832
    },
    {
      "id": "5a544bbdaff09e00009a1a3e",
      "text": " \tDNAの2か所に書かれた共通の配列に関してはRNAiで両方まとめて抑制できる、ある種の共通化だ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473853,
      "updated": 1515473927
    },
    {
      "id": "5a544c04aff09e00009a1a3f",
      "text": "\t生物はコードクローンがあると交叉が起きやすくなるのでは？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473925,
      "updated": 1515473936
    },
    {
      "id": "5a544b26aff09e00009a19eb",
      "text": "\t両方を呼んでうまく行った方を取る",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473703,
      "updated": 1515473942
    },
    {
      "id": "5a544b26aff09e00009a19ef",
      "text": "\t値は細胞質というグローバルスコープに書いてもいいし、リソソームみたいに小さく囲ってもよい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473703,
      "updated": 1515473947
    },
    {
      "id": "5a544b26aff09e00009a19f3",
      "text": "\t関数の引数が変わって呼び出し元が死ぬのは正しくない、メッセージを受け取れなかった呼び出し先が死ぬべきだ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473703,
      "updated": 1515473949
    },
    {
      "id": "5a544b26aff09e00009a19f7",
      "text": "\t関数が正しく働けなかった場合、それを実装した人に連絡が行けばよい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473703,
      "updated": 1515473953
    },
    {
      "id": "5a544b26aff09e00009a19fb",
      "text": "\t正しく動かなかった場合は古い実装にフォールバックすればいい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473703,
      "updated": 1515473956
    },
    {
      "id": "5a544b26aff09e00009a19ff",
      "text": "\t弱分類機を組み合わせて高性能な分類機を作れるように、弱プログラマを組み合わせてすごいプログラムが作れる仕組みが必要だ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473703,
      "updated": 1515473961
    },
    {
      "id": "5a544b26aff09e00009a1a03",
      "text": "\tエラーで無いが正しくない値を返す時が面倒なのか。多数決で負けたプログラムは縛り首か。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473703,
      "updated": 1515473967
    },
    {
      "id": "5a544b26aff09e00009a1a07",
      "text": "\t距離が定義できるなら一般化メジアンで正解を選んで、一番遠かったやつを縛り首",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473703,
      "updated": 1515473971
    },
    {
      "id": "5a544b26aff09e00009a1a0b",
      "text": "\t遺伝子と細胞質は受け継がれるが、経験は受け継がれない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473703,
      "updated": 1515473974
    },
    {
      "id": "5a544b26aff09e00009a1a0f",
      "text": "\tインポート時にコピーして、呼び出して、エラーが起きたら前にコピーしたバージョンにフォールバックして、それでうまく動くならどういうデータでどのバージョンとどのバージョンの間で挙動が変わったかレポートしてくれるフレームワークがあればいい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473703,
      "updated": 1515473978
    },
    {
      "id": "5a544b26aff09e00009a1a13",
      "text": "\t\t大久保 康平 [\" 生物的に進化したソフトウェアは時々風邪みたいに具合悪くなって、ほっとくと治ったりするだろうね。あとは、要求仕様をきちんと死に結びつけられるかどうかの問題か。]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473703,
      "updated": 1515474023
    },
    {
      "id": "5a544b0e84b65a0014b67dbb",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473702,
      "updated": 1515474023
    },
    {
      "id": "5a544b3eaff09e00009a1a19",
      "text": " 「人間はソフトウェア全体を把握できない、自分がやろうとしている変更の影響範囲を把握できない」という前提に基づくプログラミング言語の設計",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473727,
      "updated": 1515474023
    },
    {
      "id": "5a544b3eaff09e00009a1a1a",
      "text": " 今のインポートは「手元に特定バージョンをコピー」と「共有の誰かが書き換えるかもしれないライブラリを参照」の二択。後者は最新に追随できるが壊される可能性がある、前者ば勝手に壊れないが最新版にもならない。インポート時に最新版をコピーして実行し、失敗したら以前のコピーへと順次フォールバック",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473727,
      "updated": 1515474023
    },
    {
      "id": "5a544b3eaff09e00009a1a1e",
      "text": "\t根本的に言えば例外処理のうち、上に伝搬して最終的に死ぬタイプだけがメジャーになったのが間違い、再実行可能な例外が必要、上の例はそれが管理された形で使われている例と捉えられる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473727,
      "updated": 1515474023
    },
    {
      "id": "5a544b3eaff09e00009a1a22",
      "text": "\tメモリの中身のうち、コストのかかるものを保存する、という判断を今は人間がやっているが、デフォルトで一分以上かかった関数の返り値は保存したらいいのでは？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473727,
      "updated": 1515474035
    },
    {
      "id": "5a544c73aff09e00009a1a41",
      "text": " その後、明示的に「メモ化必要ない」って指示したら保存しなくなればよい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515474035,
      "updated": 1515474035
    },
    {
      "id": "5a544b3eaff09e00009a1a2a",
      "text": "\tレポートを驚きの大きさでスコア付け",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473727,
      "updated": 1515474041
    },
    {
      "id": "5a544b3eaff09e00009a1a2e",
      "text": "\tフォークがたくさんあると困るのは人間がそれぞれを試すのにコストがかかるせいで、フォークだとわかってるなら自動で切り替えて試せばいい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473727,
      "updated": 1515474044
    },
    {
      "id": "5a544b3eaff09e00009a1a32",
      "text": "\tプロセスを生かしたままモジュールを差し替えたり…erlangを参考に…と考えたけど時間のかかる処理がファイルシステムにメモされるならプロセス再起動してもコスト高くないよな",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473727,
      "updated": 1515474050
    },
    {
      "id": "5a544b3eaff09e00009a1a36",
      "text": "\tソースコードがgitで管理されてることを前提にしたら、自分で履歴を遡って行って適切なバージョンを見つけられるな",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515473727,
      "updated": 1515474053
    },
    {
      "id": "5a544c86aff09e00009a1a43",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515474055,
      "updated": 1515474055
    },
    {
      "id": "5a544c86aff09e00009a1a42",
      "text": "[2015] [Facebook https://www.facebook.com/nishiohirokazu/posts/10205061820081703] [Facebook https://www.facebook.com/nishiohirokazu/posts/10205067886313355]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515474055,
      "updated": 1515474124
    },
    {
      "id": "5a544c9baff09e00009a1a45",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515474075,
      "updated": 1515474075
    }
  ]
}