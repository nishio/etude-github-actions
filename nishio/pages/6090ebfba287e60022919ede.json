{
  "id": "6090ebfba287e60022919ede",
  "title": "Hatena2008-11-01",
  "created": 1225465200,
  "updated": 1225465200,
  "lines": [
    {
      "id": "6090ec20aff09e00003cd200",
      "text": "Hatena2008-11-01",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd201",
      "text": "code:hatena",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd202",
      "text": " <body>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd203",
      "text": " *1225517718*[最中限]気がついたら",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd204",
      "text": " しばらく最中限をいじれないでいるうちにすごく高速化されていた。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd205",
      "text": " http://shinh.skr.jp/m/?date=20081028",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd206",
      "text": " http://homepage1.nifty.com/herumi/diary/0810.html#30",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd207",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd208",
      "text": " 「vectorを使ってeraseとかしてるのが遅い」って突っ込まれるのはわかっていたので、それを直してから実行時間を比較しようと思っていたのだけどソースコードがCodeReposに上がっているので直す前に添削されちゃった。まぁ公開していなかったらこの面白い高速化話は読めなかったかもしれないので「これを今の状態で出したらつっこまれるんじゃないか」って恐怖心で公開しないことは機会損失なんだなぁ、と思った。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd209",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd20a",
      "text": " >>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd20b",
      "text": " コードを読む。うーん中二病チックなのは素晴らしいから良いとして、 think_[a23]_turns? って関数はメンテしずらいと思うがー",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd20c",
      "text": " <<",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd20d",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd20e",
      "text": " うーん、think_a_turnは最終ターンだから「次のターンに使える手札のリスト」を作成する必要がなく、think_3_turnsはラウンド冒頭だからラウンドスコアが[0, 0, 0]なのでそれにターンで得た得点を足し算をする必要がない。この3つの関数をまとめることはできるけど、無駄なコストを支払わずにまとめる方法はわからなかったのでわけてある。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd20f",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd210",
      "text": " >>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd211",
      "text": " たぶん、このコードは全探索できてない。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd212",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd213",
      "text": " 　for(size_t i=0; i < N; i++){",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd214",
      "text": " 　　cards rest1 = except_one(unknowns, i);",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd215",
      "text": " 　　for(size_t j=i+1; j < N; j++){",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd216",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd217",
      "text": " とかでぶんまわしてるけど、これは敵2人が違う点数の場合はそれじゃあかんやろ、と思う。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd218",
      "text": " <<",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd219",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd21a",
      "text": " 一番よけいな処理の少ないthink_a_turnで説明しよう。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd21b",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd21c",
      "text": " >|cpp|",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd21d",
      "text": "     for(size_t i=0; i < N; i++){",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd21e",
      "text": "       for(size_t j=i+1; j < N; j++){",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd21f",
      "text": " \teval_value s = measure(my, unknowns[i], unknowns[j], round_score);",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd220",
      "text": " \tif(my == get_center(my, unknowns[i], unknowns[j])){",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd221",
      "text": " \t  // winner is me. ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd222",
      "text": " \t  score += s * 2;",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd223",
      "text": " \t}else{",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd224",
      "text": " \t  score += s;",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd225",
      "text": " \t  score += measure(my, unknowns[j], unknowns[i], round_score);",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd226",
      "text": " \t}",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd227",
      "text": "       }",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd228",
      "text": "     }",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd229",
      "text": " ||<",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd22a",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd22b",
      "text": " ターンで自分が真ん中のときには、残りの二人の出した手を入れ替えても結果が変わらない。だから片方の処理だけやって2倍してもかまわない。いっぽう、自分が真ん中でない場合にはペアをひっくり返したバージョンを改めて計算している。約1/3のケースで2回の処理を1回で済ませられる。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd22c",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd22d",
      "text": " >>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd22e",
      "text": " ちなみに、速くする方法としては、どうせカードは 52 枚しか無いんだから、読みを開始する前に bool seen[52] とか作っておいて、カード使うたびにこれを false とか true とか切り替えてやるのがまぁあからさまに高速化できると思う。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd22f",
      "text": " <<",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd230",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd231",
      "text": " それってこういうこと？",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd232",
      "text": " >|cpp|",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd233",
      "text": "        for(size_t i=0; i < 52; i++){",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd234",
      "text": "            if (seen[i]) continue;",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd235",
      "text": "            for(size_t j=0; j < 52; j++){",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd236",
      "text": "                if (seen[j]) continue;",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd237",
      "text": " ||<",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd238",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd239",
      "text": " これが速いってそんなにあからさまにわかるものかなぁ。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd23a",
      "text": " 最終ターンの読み切りにおいて、本当だったら5 * 11 * 10回のループで済むところが52 * 52 * 52回にふくれあがるわけだよね。大半の回では単に配列から値を取り出してjumpするだけの簡単なお仕事とはいえ、この関数は上流から6 * 13 * 12 * 7 * 15 * 14回呼び出されるわけなので、そのコスト増が許容できるかどうか自明じゃない気がする。まぁもちろんvectorを確保し直したりするのは遅いと思う。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd23b",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd23c",
      "text": " 順序関係ないから手札[1, 2, 3, 4, 5]で3を使ったときには3と5をswapして[1, 2, 5, 4, 3]にして「手持ちの札は4枚」って情報を持っておくのが速いのかなぁ。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd23d",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd23e",
      "text": " *1225525027*[cpp]探索のパフォーマンスはどうやって比較すればいいか",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd23f",
      "text": " 「N個の要素が与えられて、その中からM個を選んだ順列について何かを計算したい」というときの要素のたどり方って何が最速なんだろう。そしてどれが最速かを調べるベンチマークってどうやって書いたらいいんだろう。まわりのループの部分だけ書いたらコンパイラが「これは何もしていない」とか言って消してしまいそうだし、N個の要素だってうっかりプログラム中に記述するとコンパイルタイムにある程度計算されてしまったりしそうだ。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd240",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd241",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd242",
      "text": " 入力はまぁ、コマンドライン引数で渡すことにしてしまえばいいか。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd243",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd244",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd245",
      "text": " あとは、なるべく処理時間を食わなくて、かつコンパイラが消さないようななにかを... グローバル変数を1個用意して、それに順列の各値を足すとか？",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd246",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd247",
      "text": " *1225530500*ダイエット",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd248",
      "text": " f:id:nishiohirokazu:20081101180521p:image",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd249",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd24a",
      "text": " 年齢相応まで脂肪を落としてみた。結局のところ、何も考えずに毎日ピルクル飲んだり、毎朝ご飯にシーチキン食べたり、毎昼ご飯にすきやで豚丼を食べたりしていたのをきちんとカロリー計算して「おおお、これってこんなにカロリー高いのか！」と叫ぶだけでダイエットになった。レコーディングダイエットだとかそういうのが色々言われているけど、ようするに自分が何をどれだけ食べているのかに意識を向けるようにすることが一番大事なんだな。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd24b",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd24c",
      "text": " *1225532547*もつ鍋を作る",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd24d",
      "text": " f:id:nishiohirokazu:20081101184225j:image",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd24e",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd24f",
      "text": " 大根は消費しきれないのでいつも避けていたんだけど小さい断片を売っていたのでそれを買ってきた。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd250",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd251",
      "text": " f:id:nishiohirokazu:20081101184929j:image",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd252",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd253",
      "text": " よく見たらもつ鍋はもつとごぼうとニラとキャベツを入れるって書いてあるけどニラしか重複するものがない。煮立ってから野菜を入れるって書いてあるけど、大根や人参に火が通らないと思ったので最初に入れた。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd254",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd255",
      "text": " f:id:nishiohirokazu:20081101190125j:image",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd256",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd257",
      "text": " ぐつぐつ。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd258",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd259",
      "text": " f:id:nishiohirokazu:20081101191046j:image",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd25a",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd25b",
      "text": " ニラと白菜の固くない部分を入れた。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd25c",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd25d",
      "text": " 作って初めて知ったんだけど、もつってなんか臭いね。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd25e",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd25f",
      "text": " -----",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd260",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd261",
      "text": " おいしかった。火が通るとにおいは気にならなくなった。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd262",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd263",
      "text": " *1225542946*未来の食器洗い機(妄想)",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd264",
      "text": " 遺伝子組み換えのアメーバがたくさん入っていて、特定の周波数の音を聞かせると興奮状態になって培養槽から出てきて食器についている有機物を食べてまわる。食料がある間はどんどん分裂してとにかく食べてまわる。食料がなくなってくるとアルコール発酵を始めて、食器洗い機内部のアルコール濃度の上昇をセンサーが感知してアメーバが家に帰りたくなる周波数の音を流す。アメーバが帰ったら食器洗い完了。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd265",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd266",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd267",
      "text": " 洗剤も水も全く使わないのでとてもエコです。副産物としてアルコールが取れるので消毒用にお使いください。流しの洗浄用に酢酸を作るモードにも切り替えられます。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd268",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd269",
      "text": " *1225546707*test",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd26a",
      "text": " >>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd26b",
      "text": " <aaa",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd26c",
      "text": " <<",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd26d",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd26e",
      "text": " なんだこの&lt;/ppp>はw",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd26f",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd270",
      "text": " >||",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd271",
      "text": " >>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd272",
      "text": " <aaa",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd273",
      "text": " <<",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd274",
      "text": " ||<",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd275",
      "text": " ",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd276",
      "text": " って書くと出現する。",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd277",
      "text": " </body>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd278",
      "text": " <comments>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd279",
      "text": " <comment>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd27a",
      "text": " <username>shinichiro_h</username>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd27b",
      "text": " <body>あーなるほど > ひっくりかえしてる<br><br>seen の方は、<br><br>       for(size_t i=0; i<hand.size(); i++){<br>           if (seen[i]) continue;<br>           for(size_t j=0; j<unknowns.size(); j++){<br>               if (seen[j]) continue;<br><br>ってことです。探索開始したら hand や unknowns は更新しない感じで。 7 * 15 * 15 * 7 * 15 * 15 くらいなら良さげに思いませんか。あと swap の方が良い気がします。<br><br>あと think_*_turns の速度は関数オブジェクトつっこめば余計なコストは無いかなぁと。 vector/list/deque の更新が発生しないようにしたら、たぶんボトルネックは点数計算なのでメンテナンス性優先して if で分岐しても別に構わないかなぁ…とは思いますが。</body>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd27c",
      "text": " <timestamp>1225521811</timestamp>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd27d",
      "text": " </comment>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd27e",
      "text": " <comment>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd27f",
      "text": " <username>nishiohirokazu</username>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd280",
      "text": " <body>あ、そうか、なるほど。52 * 52 * 52である必要はないですね。悪くなさそう。<br> if (seen[unknowns[j]]) continue;ってやるか。hand_is_seen[7], unknown_is_seen[15]ってやるか。 <br><br>「関数オブジェクトをつっこむ」というのがよくわからないですけど、挙動の違う部分を関数オブジェクトにくくりだして「共通の処理」にその関数オブジェクトを与える形にすればコンパイラがインライン化してくれるはずだから呼び出しコストを追加で払う必要はないということでしょうか？</body>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd281",
      "text": " <timestamp>1225524450</timestamp>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd282",
      "text": " </comment>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd283",
      "text": " <comment>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd284",
      "text": " <username>shinichiro_h</username>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd285",
      "text": " <body>実のところ深く考えてませんがそんな感じでたぶんいけるんじゃないかと > 関数オブジェクト<br><br>まぁ個人的には私は別にそこのコストは気にせんで良くね？と思っていますが。</body>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd286",
      "text": " <timestamp>1225544948</timestamp>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd287",
      "text": " </comment>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd288",
      "text": " </comments>",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd289",
      "text": "",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cd28a",
      "text": "[はてなダイアリー 2008-11-01 https://nishiohirokazu.hatenadiary.org/archive/2008/11/01]",
      "created": 1225465200,
      "updated": 1225465200,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}