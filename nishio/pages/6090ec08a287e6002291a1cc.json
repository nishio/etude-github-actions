{
  "id": "6090ec08a287e6002291a1cc",
  "title": "Hatena2011-11-08",
  "created": 1320678000,
  "updated": 1320678000,
  "lines": [
    {
      "id": "6090ec2caff09e00003d9db2",
      "text": "Hatena2011-11-08",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9db3",
      "text": "code:hatena",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9db4",
      "text": " <body>",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9db5",
      "text": " *1320717651*numpyのinvertは逆行列ではない",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9db6",
      "text": " おっと。invertで逆行列をつくろうとしたら謎の行列が返ってきた。",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9db7",
      "text": " >||",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9db8",
      "text": " In [1]: invert(array([[4, 0], [0, 1]]))",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9db9",
      "text": " Out[1]:",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dba",
      "text": " array([[-5, -1],",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dbb",
      "text": "        [-1, -2]]) ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dbc",
      "text": " ||<",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dbd",
      "text": " ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dbe",
      "text": " invertは「Compute bit-wise inversion, or bit-wise NOT, element-wise.」だそうな。invを使うのが正解。(thanks id:n_shuyo)",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dbf",
      "text": " >||",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dc0",
      "text": " In [2]: inv(array([[4, 0], [0, 1]]))",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dc1",
      "text": " Out[2]: ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dc2",
      "text": " array([[ 0.25,  0.  ],",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dc3",
      "text": "        [ 0.  ,  1.  ]])",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dc4",
      "text": " ||<",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dc5",
      "text": " ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dc6",
      "text": " invはlinalgの中で定義されている。",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dc7",
      "text": " >||",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dc8",
      "text": " In [3]: inv",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dc9",
      "text": " Out[3]: <function numpy.linalg.linalg.inv>",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dca",
      "text": " ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dcb",
      "text": " In [4]: invert",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dcc",
      "text": " Out[4]: <ufunc 'invert'>",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dcd",
      "text": " ||<",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dce",
      "text": " ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dcf",
      "text": " *1320724692*Numpyで混合ガウス分布のEMアルゴリズムを実装した",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dd0",
      "text": " [f:id:nishiohirokazu:20111108125655g:image]",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dd1",
      "text": " 楕円は3標準偏差、初期値からEMステップを1回、2回、3回、7回、15回(平均のベクトルの変化量が0.0001未満という基準で収束と判定)の6枚でアニメーションGIFにしてみた。[f:id:nishiohirokazu:20111108143113g:image]",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dd2",
      "text": " こっちはEMステップを0～15回実行。k平均法ではこれはできまい。しかし初期値によっては期待と違う収束の仕方をするのも観測できる…と言いながら違う収束の仕方をする初期値を探したけどうまく行かなかった(苦笑)",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dd3",
      "text": " [f:id:nishiohirokazu:20111108144600g:image]",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dd4",
      "text": " コレも時間はかかっているけどもうしばらく学習を続ければ、内側のクラスタが片方の斜め線を殆ど食べてしまって、外側のクラスタのつっかえ棒が無くなってしぼんできて、最終的にやっぱりXになりそうだ。",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dd5",
      "text": " [f:id:nishiohirokazu:20111108144943g:image]",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dd6",
      "text": " ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dd7",
      "text": " *1320724994*ImageMagickで動画GIFを作成する方法",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dd8",
      "text": " >||",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dd9",
      "text": " $ convert -delay 100 -loop 0 [1-6].png anime.gif",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dda",
      "text": " ||<",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9ddb",
      "text": " ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9ddc",
      "text": " 楽チン。",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9ddd",
      "text": " ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dde",
      "text": " >||",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9ddf",
      "text": " $ convert -delay 100 -loop 0 fig*.png anime.gif",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9de0",
      "text": " ||<",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9de1",
      "text": " ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9de2",
      "text": " 10枚を超えてきたら\"%02d\"とかでfig00.png ... fig99.pngにしてアスタリスク(*)で取ったほうがよさげ。",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9de3",
      "text": " ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9de4",
      "text": " *1320740584*Jubatusワークショップに行って来ました",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9de5",
      "text": " 昨日行われた<a href='http://www.zusaar.com/event/165003'>Jubatus Workshop</a>に参加してきました。ref. <a href='http://togetter.com/li/211053'>第一回 Jubatus Workshop #jubatus - Togetter</a> <a href='http://www.slideshare.net/JubatusOfficial'>JubatusOfficial Presentations</a>",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9de6",
      "text": " ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9de7",
      "text": " 以下は僕の解釈も含めたまとめ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9de8",
      "text": " - ユバタスの必要性",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9de9",
      "text": " -- データはこれからも増加していく。今多いってことより、今後どんどん増えるということが重要な問題",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dea",
      "text": " -- データの活用は　蓄積→理解→予測。世の中はようやく蓄積が出来るようになり理解に向かい始めた段階. ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9deb",
      "text": " -- CPUの速度が向上する速度よりも、データ量の増える速度の方が大きい。必然的にデータに対する処理で並列性を考えなければいけない状況が増えてくる。",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dec",
      "text": " ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9ded",
      "text": " - 既存のシステムとの差",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dee",
      "text": " -- 既存のシステムでは 1. リアルタイム性の確保 2. データの水平分散処理 3. 高度な解析 の3つを兼ね備えることが困難。",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9def",
      "text": " -- MapReduceは処理の自由度は高いが基本的にバッチであり解析結果はすぐには帰ってこない, CEPなどオンライン/ストリーム処理は単純な処理しかサポートしてないものが多い, ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9df0",
      "text": " -- Hadoopとは異なる方向性を模索しようとしたのがユバタス",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9df1",
      "text": " -- MIXが肝",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9df2",
      "text": " ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9df3",
      "text": " - 「全ての人に機械学習を」",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9df4",
      "text": " -- 特徴ベクトルの抽出などを設定ファイルで指定して組み合わせる仕組み",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9df5",
      "text": " -- プラグインで拡張もできる",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9df6",
      "text": " ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9df7",
      "text": " - MIX",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9df8",
      "text": " -- モデルパラメータの共有をリアルタイムにしないという妥協によって実現可能。モデルパラメータの間欠的なMIXでOKだというのは論文にもなっている",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9df9",
      "text": " -- 現状は線形分類器の並列化になっていて、モデルパラメータのMIX処理(\"Iterative Parameter Mixuture\")は単なる平均。",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dfa",
      "text": " -- unnonouno「Iterative Parameter Mixtureについてはこの辺を参照 http://t.co/ApubeIxC」hillbig「平均だと大分乱暴な気がしますが、パーセプトロンぐらいだったら、収束性能が示されています。 http://t.co/r384e8AH」",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dfb",
      "text": " ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dfc",
      "text": " - ユースケース：パケットデータからの電力消費量推定",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dfd",
      "text": " -- 回帰がまだ実装されていないので教師あり学習を使った、という柔軟な発想",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dfe",
      "text": " -- ARPパケットを捨てるとパケット量で電力推定がそれなりに実用的な精度でできた。",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9dff",
      "text": " -- この結果を出すためのプログラムがPythonのスクリプト1個, 100行くらいでできていて, 半分が元データの整形で使われている. ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e00",
      "text": " ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e01",
      "text": " - pficommon",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e02",
      "text": " -- C++でfrom_jsonとかto_jsonとか",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e03",
      "text": " -- C++でサクッとRPC",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e04",
      "text": " -- MPRPCにすればMessagePackになる",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e05",
      "text": " ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e06",
      "text": " - テキスト寄り？",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e07",
      "text": " -- sla「ベクトルがKey-Valueだよ、っていうのは一般化としてはそうだけど、やはりテキストに寄った実装なのかな～」",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e08",
      "text": " -- hillbig「非定形データ（bag of words, bag of image feature, 行動履歴）の特徴ベクトルが疎ベクトルなので、それ向けの実装になっています。元々テキストで実証実験を進めたのでテキスト向け機能が充実していますが、他も考える予定です。」",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e09",
      "text": " ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e0a",
      "text": " - 学習差分だけの通信で通信量が減る理由",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e0b",
      "text": " -- nishio「差分を通信したらモデル全体を通信するのより楽, というのがよくわからないなぁ. たとえば線形分類器だと各クラスタ×各特徴×floatとかで重みベクトルの塊があるんだと思うが, それの前の学習からの変化量ってやっぱり同じ個数のfloatじゃないの？ *YF*」",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e0c",
      "text": " -- niam「重みベクトルの非0の部分だけ通信しているのかな？だったらモデル全体ではなく差分だけ通信することで通信量下がるのはちょっとわかる気が。」",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e0d",
      "text": " -- nishio「自然言語を想定した場合, モデルパラメータの差分はスパースなので非0だけ送れば圧縮できる, というところまでは理解できた.」",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e0e",
      "text": " -- つまり、hillbig「非定形データ（bag of words, bag of image feature, 行動履歴）の特徴ベクトルが疎ベクトルなので、それ向けの実装になっています」ということね",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e0f",
      "text": " ",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e10",
      "text": " その他",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e11",
      "text": " - Twitterの内容を多クラス分類するのが6000QPSで走るらしい！(詳しい情報どこ？)",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e12",
      "text": " - Twitterのストリームを処理するくらいならマシンは2台程度で十分らしい(詳しい情報どこ？)",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e13",
      "text": " - 教師あり学習だけではなく, 1月くらいをめどに近傍探索と属性補完(レコメンドの要素技術)にもチャレンジとな. ストリーム化はアカデミック的にもチャレンジング. 将来的には統計分析やHMM,LDAなんかも乗せると。",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e14",
      "text": " - 入力データがBag of wordsやn-gramでベクトル化され, 線形分類のオンライン学習に流し込まれる. 中の仕組みは今回は詳しいことは言わないらしい. パーセプトロンとPA, CW, AROW, <del>NHEAD</del>NHERDの5つが既に実装済み。",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e15",
      "text": " - MIX処理の開始時にはロックを獲得するが, これは他の学習機がMIXを開始しないためのもので, MIX処理中でも個々が差分を送ったり受け取ったりしている間以外は学習や分類を受け付けられる,ただしMIX処理中の学習結果は捨てられる,これは不可避とのこと",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e16",
      "text": " - hillbig「データではなくモデルだけをやりとりするので、ネットワークがネックにならないというのが売りではあります。将来的にネットワークバンド幅が細い、組み込み向けでの利用もできたらなと考えています」",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e17",
      "text": " - jubakeeperがやってくれるので、1台か複数台かを考える必要がない",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e18",
      "text": " </body>",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e19",
      "text": "",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9e1a",
      "text": "[はてなダイアリー 2011-11-08 https://nishiohirokazu.hatenadiary.org/archive/2011/11/08]",
      "created": 1320678000,
      "updated": 1320678000,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}