{
  "id": "63e35ea61c95a1001bbd3d6a",
  "title": "スレッドの(というか並行処理の)歴史",
  "created": 1675845289,
  "updated": 1675846624,
  "lines": [
    {
      "id": "63e35ea61c95a1001bbd3d6a",
      "text": "スレッドの(というか並行処理の)歴史",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845289,
      "updated": 1675845289
    },
    {
      "id": "63e35ea9aff09e0000162fc2",
      "text": "初出 [Hatena2011-05-12]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845289,
      "updated": 1675845301
    },
    {
      "id": "63e3631eaff09e0000737f59",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846430,
      "updated": 1675846430
    },
    {
      "id": "63e3631eaff09e0000737f5a",
      "text": " 処理の流れを「スレッド」と呼ぶのはいつからか？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846430,
      "updated": 1675846437
    },
    {
      "id": "63e36324aff09e0000737f61",
      "text": " \t遅くとも1965年にはBerkeley Timesharing Systemで呼んでいた。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846437,
      "updated": 1675846441
    },
    {
      "id": "63e36329aff09e0000737f62",
      "text": " \tしかしそれ以前はは「プロセス」と呼ばれていた。(ダイクストラの65年の論文でも)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846441,
      "updated": 1675846465
    },
    {
      "id": "63e36340aff09e0000737f63",
      "text": " \t\tこの「プロセス」は(いまUnix的な意味で想像するプロセスと違って)共有メモリを持ったりセマフォを使って排他したりしてた。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846465,
      "updated": 1675846465
    },
    {
      "id": "63e3631eaff09e0000737f5c",
      "text": " 1970年にMax SmithがMultics上でスレッドのプロトタイプを作っていて、これは1つの重量プロセスに複数のスタックを持たせる試みだった。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846431,
      "updated": 1675846431
    },
    {
      "id": "63e3631eaff09e0000737f5d",
      "text": " プログラミング言語における「スレッド」の創始者はおそらくIBMによるPL/I(1965～)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846431,
      "updated": 1675846502
    },
    {
      "id": "63e36365aff09e0000737f65",
      "text": " \tこれは`CALL XXX (A, B) TASK;'という構文を持っていた。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846502,
      "updated": 1675846502
    },
    {
      "id": "63e36360aff09e0000737f64",
      "text": " \tこれはXXX用にスレッドをforkする。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846497,
      "updated": 1675846508
    },
    {
      "id": "63e3636baff09e0000737f66",
      "text": " \tこの機能を実装したコンパイラがあったのかどうかはわからない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846508,
      "updated": 1675846510
    },
    {
      "id": "63e3636daff09e0000737f67",
      "text": " \tMulticsがどう設計されているのかをよく調べて作られていた。たとえばTASKコールはプロセスにマップされないし、スレッド間どうしはメモリが丸見え。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846510,
      "updated": 1675846518
    },
    {
      "id": "63e36376aff09e0000737f68",
      "text": " \tしかしMulticsは方向を変え、IBMはTASKの機能をPL/Iから削除した。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846518,
      "updated": 1675846518
    },
    {
      "id": "63e3631eaff09e0000737f5e",
      "text": " そしてUnixが出現する。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846431,
      "updated": 1675846521
    },
    {
      "id": "63e36379aff09e0000737f69",
      "text": " \tUnixは「プロセス」という言葉を「スレッド＋仮想アドレス空間」の意味に使った。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846521,
      "updated": 1675846525
    },
    {
      "id": "63e3637daff09e0000737f6a",
      "text": " \t(ちなみにUnixのこの記法はMulticsから直接継承されたものだ)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846525,
      "updated": 1675846528
    },
    {
      "id": "63e3637faff09e0000737f6b",
      "text": " \tそういうわけで、Unix的な意味での「プロセス」は仮想アドレス空間の切り替えを伴う重たいものになってしまった。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846528,
      "updated": 1675846531
    },
    {
      "id": "63e36383aff09e0000737f6c",
      "text": " \tプロセスはそれぞれが個別にアドレス空間を持ってるからメモリを共有することはできないが、パイプやシグナルを使って相互作用することはできた。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846531,
      "updated": 1675846535
    },
    {
      "id": "63e36387aff09e0000737f6d",
      "text": " \t共有メモリの機能が追加されるのはもっと後の話。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846535,
      "updated": 1675846535
    },
    {
      "id": "63e3631eaff09e0000737f5f",
      "text": " しばらくたって、Unixユーザは昔の「メモリを共有できるプロセス」を懐かしむようになった。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846431,
      "updated": 1675846541
    },
    {
      "id": "63e3638caff09e0000737f6e",
      "text": " \tこれがいわゆる「スレッド」の発明の引き金を引いた。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846541,
      "updated": 1675846542
    },
    {
      "id": "63e3638eaff09e0000737f6f",
      "text": " \tスレッドとは、一つのUnixプロセスが持っている仮想アドレス空間を共有する「オールドスタイルのプロセス」のことなんだ。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846542,
      "updated": 1675846548
    },
    {
      "id": "63e36393aff09e0000737f70",
      "text": " \tUnixプロセスが重たいことと対比して「軽量プロセス」という表現もなされた。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846548,
      "updated": 1675846551
    },
    {
      "id": "63e36397aff09e0000737f71",
      "text": " \tこの「軽量プロセス」「重量プロセス」という区別は70年代後半から80年代前半、最初の「マイクロカーネル」まで遡ることができる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846551,
      "updated": 1675846551
    },
    {
      "id": "63e3631eaff09e0000737f60",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846431,
      "updated": 1675846431
    },
    {
      "id": "63e3631eaff09e0000737f5b",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846430,
      "updated": 1675846430
    },
    {
      "id": "63e362faaff09e0000737f57",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846394,
      "updated": 1675846394
    },
    {
      "id": "63e362faaff09e0000737f58",
      "text": "過去ログ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675846394,
      "updated": 1675846411
    },
    {
      "id": "63e35ec2aff09e0000162fc4",
      "text": " ふとスレッドっていつ発明されたんだろうと調べてみたけどよくわからない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845509
    },
    {
      "id": "63e35f84aff09e0000163033",
      "text": " \tLinuxがカーネルスレッドをサポートしたのが2.6からで2003年とか意外と新しい？？もちろんユーザレベルのスレッドはもっと古いんだろうけど、いつからだろう。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845509,
      "updated": 1675845509
    },
    {
      "id": "63e35ec2aff09e0000162fc6",
      "text": "\t hideaki_t: NeXTSTEP(Mach 2.0?)にはcthreadがありました。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845357
    },
    {
      "id": "63e35ec2aff09e0000162fca",
      "text": "\t atsuoishimoto: 私がスレッドって用語初めて聞いたのは、たしか'90年代初頭のOS/2だったかなぁ？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845358
    },
    {
      "id": "63e35ec2aff09e0000162fce",
      "text": "\t これが2004年の話か＞NetBSD 2.x+, and DragonFly BSD implement LWPs as kernel threads (1:1 model)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845358
    },
    {
      "id": "63e35ec2aff09e0000162fd2",
      "text": "\t shidocchi: 私は院の研究室でMachのソースリーディングをやってた頃知った。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845359
    },
    {
      "id": "63e35ec2aff09e0000162fd6",
      "text": "\t これが2001年 ＞ October 2, 2001 Mac OS X v10.1…real-time threads, thread management,",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845359
    },
    {
      "id": "63e35ec2aff09e0000162fda",
      "text": "\t シングルタスク→協調的マルチタスク→プリエンプティブマルチタスク(だけど1プロセス1スレッド)→だからUnixはパイプでプロセスを繋いだ→でも共有するデータが大きいと大変ね→(データを共有できる)プロセスの中にもっと細かい実行単位つくろう→ユーザスレッド→カーネルスレッド、という流れだと思っているナウ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845360
    },
    {
      "id": "63e35ec2aff09e0000162fde",
      "text": "\t koyama41: pthreadが1995でSolarisのlibthreadが1993、UNIX的起源はその頃かと http://download.oracle.com/docs/cd/E19253-01/819-0390/mtintro-75924/index.html",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845362
    },
    {
      "id": "63e35ec2aff09e0000162fe2",
      "text": "\t Simulaが67年でSmalltalkを挟んでアクターモデルが73年か",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845362
    },
    {
      "id": "63e35ec2aff09e0000162fe6",
      "text": "\t ホーアがコンカレントパスカルで導入したモニタの概念が、Javaに採用されたことで広く普及したが、その結果適材適所でない使われ方もされるようになって、アーランやスカラによってアクターモデルに再び注目が集まる様になった、という理解。あとクロージャはなんかよくわからないことに挑戦中。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845363
    },
    {
      "id": "63e35ec2aff09e0000162fea",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845375
    },
    {
      "id": "63e35efdaff09e0000163029",
      "text": " (この辺、スレッドの起源が見つからないので並行性に話が広がっている)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845374,
      "updated": 1675845374
    },
    {
      "id": "63e35ec2aff09e0000162fed",
      "text": "\t Tweetしてなかったけど、タイムシェアリングシステムの提案が1957年、MITによるタイムシェアリングシステムの実現可能性を示すデモが1961年、IBMによる商用のタイムシェアリングシステム採用OSのリリースが1967年。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845380
    },
    {
      "id": "63e35ec2aff09e0000162fef",
      "text": "\t ダイクストラによるセマフォが1965年、アクターモデルが1973年、ホーアのモニタが1974年、Javaのリリースが1995年。pthreadも95年。だいたいそんな感じの時間の流れらしい。スレッドって意外と若いな～と思った。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845369
    },
    {
      "id": "63e35f0baff09e000016302a",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845388,
      "updated": 1675845388
    },
    {
      "id": "63e35ec2aff09e0000162ff0",
      "text": " ksmakoto: 「軽量プロセス」って呼んでた時代が",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845388
    },
    {
      "id": "63e35ec2aff09e0000162ff7",
      "text": " kosaki55tea: プロセスよりもスレッドの方が古いと思うんですよ。文献さがせないけど。仮想空間管理がないOSとかだと自動的にスレッドしかないわけで",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845389
    },
    {
      "id": "63e35ec2aff09e0000162ffb",
      "text": " AkioHoshi @kosaki55tea @nishio 横から失礼します。Machオペレーティングシステムの基本コンセプトに「タスクとスレッド」があって、1987年頃に日本で開かれたDECUSで萩谷昌己さんが紹介しています。UNIXのネイティブスレッドはその後から。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845392
    },
    {
      "id": "63e35ec2aff09e0000162fff",
      "text": " uebayasi: ググッたらすぐfaqs.orgが出てきたんですけど、Usenetなんて古すぎてご存じないですよね。。。orz",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845394
    },
    {
      "id": "63e35ec2aff09e0000163003",
      "text": " `[2.2.3]` The history of threads http://www.faqs.org/faqs/os-research/part1/section-10.html",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845414
    },
    {
      "id": "63e35ec2aff09e0000163007",
      "text": " terazzo ぐぐったところ「軽量のプロセスをほいほい作れるの重要」ってアイデアはhttp://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.41.3458&rep=rep1&type=pdf によるとTHOTH( http://cseweb.ucsd.edu/classes/wi08/cse221-a/papers/cheriton79.pdf ) あたりから来たらしい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845430
    },
    {
      "id": "63e35f3baff09e000016302c",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845435,
      "updated": 1675845435
    },
    {
      "id": "63e35ec2aff09e000016300b",
      "text": " The history of threads http://www.faqs.org/faqs/os-research/part1/section-10.html のざっくり訳:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845435
    },
    {
      "id": "63e35ec2aff09e000016300f",
      "text": " 処理の流れを「スレッド」と呼ぶのはいつからか？遅くとも1965年にはBerkeley Timesharing Systemでと呼んでいた。しかしそれまでに並行性の概念がなかったのではなく、当時は「プロセス」と呼ばれていた。(ダイクストラの65年の論文でも)　この「プロセス」は(いまUnix的な意味で想像するプロセスと違って)共有メモリを持ったりセマフォを使って排他したりしてた。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845439
    },
    {
      "id": "63e35ec2aff09e0000163011",
      "text": " 1970年にMax SmithがMultics上でスレッドのプロトタイプを作っていて、これは1つの重量プロセスに複数のスタックを持たせる試みだった。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845450
    },
    {
      "id": "63e35ec2aff09e0000163013",
      "text": " プログラミング言語における「スレッド」の創始者はおそらくIBMによるPL/I(1965～)で、これは`CALL XXX (A, B) TASK;'という構文を持っていた。これはXXX用にスレッドをforkする。この機能を実装したコンパイラがあったのかどうかはわからない。Multicsがどう設計されているのかをよく調べて作られていた。たとえばTASKコールはプロセスにマップされないし、スレッド間どうしはメモリが丸見え。しかしMulticsは方向を変え、IBMはTASKの機能をPL/Iから削除した。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845451
    },
    {
      "id": "63e35ec2aff09e0000163015",
      "text": " そしてUnixが出現する。Unixは「プロセス」という言葉を「スレッド＋仮想アドレス空間」の意味に使った。(ちなみにUnixのこの記法はMulticsから直接継承されたものだ)　そういうわけで、Unix的な意味での「プロセス」は仮想アドレス空間の切り替えを伴う重たいものになってしまった。プロセスはそれぞれが個別にアドレス空間を持ってるからメモリを共有することはできないが、パイプやシグナルを使って相互作用することはできた。共有メモリの機能が追加されるのはもっと後の話。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845453
    },
    {
      "id": "63e35ec2aff09e0000163017",
      "text": " しばらくたって、Unixユーザは昔の「メモリを共有できるプロセス」を懐かしむようになった。これがいわゆる「スレッド」の発明の引き金を引いた。スレッドとは、一つのUnixプロセスが持っている仮想アドレス空間を共有する「オールドスタイルのプロセス」のことなんだ。Unixプロセスが重たいことと対比して「軽量プロセス」という表現もなされた。この「軽量プロセス」「重量プロセス」という区別は70年代後半から80年代前半、最初の「マイクロカーネル」まで遡ることができる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845455
    },
    {
      "id": "63e35f58aff09e000016302d",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845465,
      "updated": 1675845465
    },
    {
      "id": "63e35ec2aff09e0000163019",
      "text": " 無害なおっさん: いわゆるスレッドはMachよりV(1981～)のほうが先ですね。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845315,
      "updated": 1675845475
    },
    {
      "id": "63e35f62aff09e000016302e",
      "text": " \tハードウェアスレッドなら1950年代からあるようです。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845475,
      "updated": 1675845478
    },
    {
      "id": "63e35f65aff09e000016302f",
      "text": " \tハードウェア割り込みはオーバーフロー割り込みのみのUNIVAC I、I/O割り込みのできるNBS DYSEACが最初のようです。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845478,
      "updated": 1675845486
    },
    {
      "id": "63e35f6daff09e0000163030",
      "text": " soda",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845486,
      "updated": 1675845488
    },
    {
      "id": "63e35f6faff09e0000163031",
      "text": " \tSolarisのlibthreadやpthreadは、Machのcthreadと仕様が非常によく似てます。これらはすべてHoareのMonitorのC言語への素直なbindingと言ってよいと思います(細かいこと言うと、Monitorのsemanticsには、細かい亜流がいくつかありますが…)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845488,
      "updated": 1675845493
    },
    {
      "id": "63e35f75aff09e0000163032",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675845493,
      "updated": 1675845493
    }
  ]
}