{
  "id": "6090ec0ca287e6002291a29a",
  "title": "Hatena2013-03-06",
  "created": 1362495600,
  "updated": 1362495600,
  "lines": [
    {
      "id": "6090ec30aff09e00003ddf50",
      "text": "Hatena2013-03-06",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf51",
      "text": "code:hatena",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf52",
      "text": " <body>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf53",
      "text": " *1362557967*Scalaのtraitはmixinか？",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf54",
      "text": " Rubyのmixin(モジュール)、Squeakのtrait、Scalaのtraitそれぞれについて：",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf55",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf56",
      "text": " **Q1: メソッドの実装を持てる？",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf57",
      "text": " はい、はい、はい",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf58",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf59",
      "text": " Javaのクラスは「はい」、インターフェイスは「いいえ」、C++とPythonのクラスは「はい」",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf5a",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf5b",
      "text": " **Q2: クラスがそれを複数個継承できる？",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf5c",
      "text": " はい、はい、はい",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf5d",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf5e",
      "text": " Javaのクラスは「いいえ」、インターフェイスは「はい」、C++とPythonのクラスは「はい」",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf5f",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf60",
      "text": " **Q3: インスタンスを作れる？",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf61",
      "text": " いいえ、はい、いいえ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf62",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf63",
      "text": " C++とPythonのクラスは「はい」",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf64",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf65",
      "text": " **Q4: 複数個継承した際に名前が衝突しました、どうなる？",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf66",
      "text": " しれっと上書き、エラー(*)、エラー",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf67",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf68",
      "text": " (*) Squeakはクラス定義時には例外を投げず、衝突したメソッドを「衝突した旨の例外を投げるメソッド」に置き換える。ユーザが衝突に気づくのは、クラスブラウザでメソッドを確認した時か、そのメソッドを呼んだ時になる。",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf69",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf6a",
      "text": " **Q5: 継承パスに参加する？",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf6b",
      "text": " する（？）、しない、する（？）",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf6c",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf6d",
      "text": " 継承パスに参加しているかどうかの検証の仕方や、プログラミング言語のユーザにどういう影響をあたえるのか、がイマイチよくわからない。",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf6e",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf6f",
      "text": " **Q6: それを継承したクラスが特定のメソッドを持つことを型で強制できる？(Scalaのself type annotation)",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf70",
      "text": " いいえ、いいえ、はい",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf71",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf72",
      "text": " **Q7: あるクラスがそれと別のクラスとを継承している場合に、親クラスとそれとの間で名前が衝突したらどうなる？",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf73",
      "text": " それの定義で上書き、それの定義で上書き、エラー",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf74",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf75",
      "text": " **まとめ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf76",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf77",
      "text": " >||",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf78",
      "text": " Q1 Y, Y, Y",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf79",
      "text": " Q2 Y, Y, Y",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf7a",
      "text": " Q3 N, Y, N",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf7b",
      "text": " Q4 O, E, E",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf7c",
      "text": " Q5 Y, N, Y",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf7d",
      "text": " Q6 N, N, Y",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf7e",
      "text": " Q7 O, O, E",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf7f",
      "text": " ||<",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf80",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf81",
      "text": " まあ、要するに「3つそれぞれ別物」だね。id:sumimさんの主張(<a href='http://d.hatena.ne.jp/sumim/20130306/p1'>Scalaのトレイトは実はトレイトじゃなくただのミクスイン</a>)はQ5に関してScalaのtraitはmixinみたいなものということだし、id:kmizushimaさんの主張はQ4とかQ6のことを考えるとmixinとは違うだろということだろう。個人的にはQ3でSqueakが「はい」な点にギョッとした。",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf82",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf83",
      "text": " ソースコード: https://github.com/nishio/learn_language/tree/master/trait",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf84",
      "text": " 気が向いたらC++とかPythonとかも追加しよう。",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf85",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf86",
      "text": " *1362570581*Squeakをかじる その4",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf87",
      "text": " 前回(<a href='http://d.hatena.ne.jp/nishiohirokazu/20130206/1360153589'>その3</a>)、Traitの挙動をSqueakのGUIを使わずに試すところまでやりました。その時に動いたコードがこちら：",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf88",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf89",
      "text": " https://github.com/nishio/learn_language/blob/master/squeak/test_trait.st",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf8a",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf8b",
      "text": " 今回は、そのトレイトを複数にして、2つあわせてクラスからusesできることを確認しようとしました。コードはこちら：",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf8c",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf8d",
      "text": " https://gist.github.com/nishio/5098115",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf8e",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf8f",
      "text": " これはSqueakのGUI上で1文ずつ実行すると期待通りの挙動をするのですが、スクリプトとしてSqueakに渡すと「InMidstOfFileinNotification」というエラーが起きてしまいます。うーん、どういうことなんでしょう。ググってもよくわかりません。",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf90",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf91",
      "text": " ",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf92",
      "text": " お、例外をキャッチするための囲み(下記)を削ったら動くようになりましたよ！",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf93",
      "text": " >||",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf94",
      "text": " [",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf95",
      "text": " ...",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf96",
      "text": " ] on: Exception",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf97",
      "text": "   do: printException.",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf98",
      "text": " ||<",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf99",
      "text": " https://gist.github.com/nishio/5098168",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf9a",
      "text": " </body>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf9b",
      "text": " <comments>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf9c",
      "text": " <comment>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf9d",
      "text": " <username>umejava</username>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf9e",
      "text": " <body>SqueakのTraitでnewできてしまうのはバグといって良いのではないでしょうか。Pharoで同様の操作をするとエラーになります。また、Smalltalkの場合、あるクラスAもメタクラスのインスタンスですから、自作TraitAもTraitのインスタンスということにはなります(その自作TraitAがさらにnewに応えるのは明らかに変ですが)。</body>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddf9f",
      "text": " <timestamp>1362577450</timestamp>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfa0",
      "text": " </comment>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfa1",
      "text": " <comment>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfa2",
      "text": " <username>sumim</username>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfa3",
      "text": " <body>あとシェルリのTraits（Squeak、PHP）の落とし穴として、useする側のクラスやトレイトに同名メソッドがあると、useされる側のトレイトの同名メソッドを遮蔽してしまう、という仕様があるので動作確認やサンプルを作られる際には気をつけてください。くだんのエントリーのサンプルで C に m を定義せずに m0 から m を呼んでいるのは、この挙動で、use したはずのトレイトの m が呼べなくなるのを避けるためです。</body>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfa4",
      "text": " <timestamp>1362620280</timestamp>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfa5",
      "text": " </comment>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfa6",
      "text": " <comment>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfa7",
      "text": " <username>nishiohirokazu</username>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfa8",
      "text": " <body>「useする側に同名メソッドがあると、useされる側の同名メソッドを遮蔽してしまう」という点は、オーバーライドがデフォルトの挙動であることが原因ですね。明示的にoverrideを指示しなければエラーになるScala以外の大部分の言語がその挙動かと思います。<br><br>一方で「useする側の親クラスに同名メソッドがある」の場合には、Squeakでも衝突の検出が聞かないのでRuby同様に黙って上書きしてしまいますね。</body>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfa9",
      "text": " <timestamp>1362623121</timestamp>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfaa",
      "text": " </comment>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfab",
      "text": " <comment>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfac",
      "text": " <username>sumim</username>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfad",
      "text": " <body>親クラスに同名メソッドがあるときに黙って上書きされるのは、子クラスでオーバーライドした際に警告が出ないことと同じことなのでトレイトとは直接は関係ないですね。シェルリのトレイトのメソッドは use されると（継承パスに挿入されるのではなく）そのクラスに直接注入されるので、そのクラスで定義されたメソッドと扱いは同じになります（先述の遮蔽条件時は除く）。そうした見方では、同名メソッド存在時に遮蔽されるのも、オーバーライドによる上書きとはちょっと意味が違います（オーバーライドであれば継承パス上には存在するので super で呼べますが、遮蔽の場合は名前を付け替える以外、呼び出す方法はなくなります）。</body>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfae",
      "text": " <timestamp>1362625703</timestamp>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfaf",
      "text": " </comment>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfb0",
      "text": " <comment>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfb1",
      "text": " <username>nishiohirokazu</username>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfb2",
      "text": " <body>なるほど、「継承パスに挿入されるモデル」に慣れている視点からすると、ついトレイトを親クラス的なものと考えてしまい、「useする側に同名メソッドがあると、useされる側の同名メソッドを遮蔽してしまう」現象が「トレイトとは関係のないオーバーライド」であるように見えていました。<br><br>「平坦化されて注入されるモデル」の視点から見ると、確かに「親クラスの同名メソッドを上書き」の方が「トレイトとは関係のないオーバーライド」になるわけですね。だいぶわかってきました！</body>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfb3",
      "text": " <timestamp>1362631666</timestamp>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfb4",
      "text": " </comment>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfb5",
      "text": " <comment>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfb6",
      "text": " <username>sumim</username>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfb7",
      "text": " <body>シェルリらのトレイトは、通常の説明であれば「平坦化されて注入されるモデル」の視点で語られるはずなので、「継承パスに挿入されるモデル」の視点の Scala のトレイトで試そうとするとうまくいかず誤解や混乱が生じるのではないか（逆もまたしかり）と危惧したのが事の発端でしたので、おっしゃっておられるご理解に達していただけたのでしたら、少しはお役に立てたのではないかととても嬉しいです。</body>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfb8",
      "text": " <timestamp>1362633933</timestamp>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfb9",
      "text": " </comment>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfba",
      "text": " <comment>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfbb",
      "text": " <username>名無し</username>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfbc",
      "text": " <body>これは「fileIn中です」と通知されているだけですね。<br>大抵の場合、Notificationはスルーしても平気な場面で使われますが、一度catchした場合は明示的に処理を継続させる必要があります。<br>ブラウザで、InMidstOfFileinNotificationクラスのReference(使用箇所一覧)をリストすると、実際の使用例が見られるので、それを真似ると良いと思います。</body>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfbd",
      "text": " <timestamp>1362907250</timestamp>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfbe",
      "text": " </comment>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfbf",
      "text": " <comment>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfc0",
      "text": " <username>nishiohirokazu</username>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfc1",
      "text": " <body>ありがとうございます！謎の深刻なエラーなのかと思っていましたが、Notificationは無視して良いものなのですね！</body>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfc2",
      "text": " <timestamp>1362915473</timestamp>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfc3",
      "text": " </comment>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfc4",
      "text": " </comments>",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfc5",
      "text": "",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003ddfc6",
      "text": "[はてなダイアリー 2013-03-06 https://nishiohirokazu.hatenadiary.org/archive/2013/03/06]",
      "created": 1362495600,
      "updated": 1362495600,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}