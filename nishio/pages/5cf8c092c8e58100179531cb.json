{
  "id": "5cf8c092c8e58100179531cb",
  "title": "useReducer",
  "created": 1559806116,
  "updated": 1616932471,
  "lines": [
    {
      "id": "5cf8c092c8e58100179531cb",
      "text": "useReducer",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a7aff09e000099ccfd",
      "text": "[React Hooks] [Hooks API Reference – React https://reactjs.org/docs/hooks-reference.html#usereducer]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806119,
      "updated": 1559806134
    },
    {
      "id": "5cf8c0b9aff09e000099ccfe",
      "text": "code:js",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806137,
      "updated": 1559806142
    },
    {
      "id": "5cf8c0a3aff09e000099cca5",
      "text": "\tconst [state, dispatch] = useReducer(reducer, initialArg, init);",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806140
    },
    {
      "id": "5cf8c0c0aff09e000099ccff",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806145,
      "updated": 1559806145
    },
    {
      "id": "5cf8c0e6aff09e000099cd02",
      "text": "\t[Redux]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806182,
      "updated": 1559806186
    },
    {
      "id": "5cf8c177aff09e000099cd0e",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806328,
      "updated": 1559806328
    },
    {
      "id": "5cf8c0a4aff09e000099cca6",
      "text": "An alternative to useState.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806162
    },
    {
      "id": "5cf8c158aff09e000099cd0b",
      "text": "\tcode:js",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806296,
      "updated": 1559806303
    },
    {
      "id": "5cf8c15aaff09e000099cd0c",
      "text": "\t const [state, setState] = useState(initialState);",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806298,
      "updated": 1559806298
    },
    {
      "id": "5cf8c0d2aff09e000099cd00",
      "text": "Accepts a reducer of type `(state, action) => newState`",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806162,
      "updated": 1559806321
    },
    {
      "id": "5cf8c0d6aff09e000099cd01",
      "text": "returns the current state paired with a dispatch method.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806167,
      "updated": 1559806325
    },
    {
      "id": "5cf8c175aff09e000099cd0d",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806325,
      "updated": 1559806325
    },
    {
      "id": "5cf8c0a4aff09e000099cca8",
      "text": "useReducer is usually preferable to useState ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806201
    },
    {
      "id": "5cf8c0f9aff09e000099cd03",
      "text": "\twhen you have complex state logic ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806201,
      "updated": 1559806205
    },
    {
      "id": "5cf8c0fdaff09e000099cd04",
      "text": "\t\tthat involves multiple sub-values or",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806205,
      "updated": 1559806215
    },
    {
      "id": "5cf8c106aff09e000099cd06",
      "text": "\twhen the next state depends on the previous one.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806215,
      "updated": 1559806223
    },
    {
      "id": "5cf8c10eaff09e000099cd07",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806223,
      "updated": 1559806225
    },
    {
      "id": "5cf8c10eaff09e000099cd08",
      "text": "useReducer also lets you optimize performance for components",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806223,
      "updated": 1559806337
    },
    {
      "id": "5cf8c180aff09e000099cd0f",
      "text": "\tthat trigger deep updates",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806337,
      "updated": 1559806340
    },
    {
      "id": "5cf8c183aff09e000099cd10",
      "text": "\tbecause you can pass dispatch down instead of callbacks.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806340,
      "updated": 1559806340
    },
    {
      "id": "5cf8c0a4aff09e000099cca9",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099ccaa",
      "text": "Here’s the counter example from the useState section, rewritten to use a reducer:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099ccab",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c126aff09e000099cd09",
      "text": "code:js",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806247,
      "updated": 1559806247
    },
    {
      "id": "5cf8c0a4aff09e000099ccac",
      "text": " const initialState = {count: 0};",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c0a4aff09e000099ccad",
      "text": "\t",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806256
    },
    {
      "id": "5cf8c0a4aff09e000099ccae",
      "text": " function reducer(state, action) {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c0a4aff09e000099ccaf",
      "text": "   switch (action.type) {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c0a4aff09e000099ccb0",
      "text": "     case 'increment':",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c0a4aff09e000099ccb1",
      "text": "       return {count: state.count + 1};",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c0a4aff09e000099ccb2",
      "text": "     case 'decrement':",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c0a4aff09e000099ccb3",
      "text": "       return {count: state.count - 1};",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c0a4aff09e000099ccb4",
      "text": "     default:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c0a4aff09e000099ccb5",
      "text": "       throw new Error();",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c0a4aff09e000099ccb6",
      "text": "   }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c0a4aff09e000099ccb7",
      "text": " }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c0a4aff09e000099ccb8",
      "text": "\t",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806257
    },
    {
      "id": "5cf8c0a4aff09e000099ccb9",
      "text": " function Counter() {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c0a4aff09e000099ccba",
      "text": "   const [state, dispatch] = useReducer(reducer, initialState);",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c0a4aff09e000099ccbb",
      "text": "   return (",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c0a4aff09e000099ccbc",
      "text": "     <>",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c0a4aff09e000099ccbd",
      "text": "       Count: {state.count}",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c0a4aff09e000099ccbe",
      "text": "       <button onClick={() => dispatch({type: 'increment'})}>+</button>",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c0a4aff09e000099ccbf",
      "text": "       <button onClick={() => dispatch({type: 'decrement'})}>-</button>",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c0a4aff09e000099ccc0",
      "text": "     </>",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c0a4aff09e000099ccc1",
      "text": "   );",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c0a4aff09e000099ccc2",
      "text": " }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806252
    },
    {
      "id": "5cf8c38daff09e000099cd1d",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806862,
      "updated": 1559806862
    },
    {
      "id": "5cf8c38eaff09e000099cd1e",
      "text": "setState版",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806863,
      "updated": 1559806866
    },
    {
      "id": "5cf8c391aff09e000099cd1f",
      "text": "code:js",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806866,
      "updated": 1559806870
    },
    {
      "id": "5cf8c134aff09e000099cd0a",
      "text": " function Counter({initialCount}) {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806261,
      "updated": 1559806875
    },
    {
      "id": "5cf8c1f1aff09e000099cd12",
      "text": "   const [count, setCount] = useState(initialCount);",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806450,
      "updated": 1559806875
    },
    {
      "id": "5cf8c1f1aff09e000099cd13",
      "text": "   return (",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806450,
      "updated": 1559806875
    },
    {
      "id": "5cf8c1f1aff09e000099cd14",
      "text": "     <>",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806450,
      "updated": 1559806875
    },
    {
      "id": "5cf8c1f1aff09e000099cd15",
      "text": "       Count: {count}",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806450,
      "updated": 1559806875
    },
    {
      "id": "5cf8c1f1aff09e000099cd16",
      "text": "       <button onClick={() => setCount(initialCount)}>Reset</button>",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806450,
      "updated": 1559806875
    },
    {
      "id": "5cf8c1f1aff09e000099cd17",
      "text": "       <button onClick={() => setCount(prevCount => prevCount + 1)}>+</button>",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806450,
      "updated": 1559806875
    },
    {
      "id": "5cf8c1f1aff09e000099cd18",
      "text": "       <button onClick={() => setCount(prevCount => prevCount - 1)}>-</button>",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806450,
      "updated": 1559806875
    },
    {
      "id": "5cf8c1f1aff09e000099cd19",
      "text": "     </>",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806450,
      "updated": 1559806875
    },
    {
      "id": "5cf8c1f1aff09e000099cd1a",
      "text": "   );",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806450,
      "updated": 1559806875
    },
    {
      "id": "5cf8c1f1aff09e000099cd1b",
      "text": " }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806450,
      "updated": 1559806875
    },
    {
      "id": "5cf8c0a4aff09e000099ccc3",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806876
    },
    {
      "id": "5cf8c0a4aff09e000099ccc5",
      "text": "React guarantees that dispatch function identity is stable and won’t change on re-renders. This is why it’s safe to omit from the useEffect or useCallback dependency list.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099ccc6",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099ccc7",
      "text": "Specifying the initial state",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099ccc8",
      "text": "There’s two different ways to initialize useReducer state. You may choose either one depending on the use case. The simplest way to pass the initial state as a second argument:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099ccc9",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099ccca",
      "text": "  const [state, dispatch] = useReducer(",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099cccb",
      "text": "    reducer,",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099cccc",
      "text": "    {count: initialCount}",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099cccd",
      "text": "  );",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099ccce",
      "text": "Note",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099cccf",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099ccd0",
      "text": "React doesn’t use the state = initialState argument convention popularized by Redux. The initial value sometimes needs to depend on props and so is specified from the Hook call instead. If you feel strongly about this, you can call useReducer(reducer, undefined, reducer) to emulate the Redux behavior, but it’s not encouraged.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099ccd1",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099ccd2",
      "text": "Lazy initialization",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099ccd3",
      "text": "You can also create the initial state lazily. To do this, you can pass an init function as the third argument. The initial state will be set to init(initialArg).",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099ccd4",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099ccd5",
      "text": "It lets you extract the logic for calculating the initial state outside the reducer. This is also handy for resetting the state later in response to an action:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099ccd6",
      "text": "code:js",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806751
    },
    {
      "id": "5cf8c0a4aff09e000099ccd7",
      "text": " function init(initialCount) {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099ccd8",
      "text": "   return {count: initialCount};",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099ccd9",
      "text": " }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099ccda",
      "text": "\t",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806764
    },
    {
      "id": "5cf8c0a4aff09e000099ccdb",
      "text": " function reducer(state, action) {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099ccdc",
      "text": "   switch (action.type) {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099ccdd",
      "text": "     case 'increment':",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099ccde",
      "text": "       return {count: state.count + 1};",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099ccdf",
      "text": "     case 'decrement':",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099cce0",
      "text": "       return {count: state.count - 1};",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099cce1",
      "text": "     case 'reset':",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099cce2",
      "text": "       return init(action.payload);",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099cce3",
      "text": "     default:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099cce4",
      "text": "       throw new Error();",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099cce5",
      "text": "   }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099cce6",
      "text": " }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099cce7",
      "text": "\t",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806761
    },
    {
      "id": "5cf8c0a4aff09e000099cce8",
      "text": " function Counter({initialCount}) {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099cce9",
      "text": "   const [state, dispatch] = useReducer(reducer, initialCount, init);",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099ccea",
      "text": "   return (",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099cceb",
      "text": "     <>",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099ccec",
      "text": "       Count: {state.count}",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099cced",
      "text": "       <button",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099ccee",
      "text": "         onClick={() => dispatch({type: 'reset', payload: initialCount})}>",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099ccef",
      "text": "\t",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806777
    },
    {
      "id": "5cf8c0a4aff09e000099ccf0",
      "text": "         Reset",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099ccf1",
      "text": "       </button>",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099ccf2",
      "text": "       <button onClick={() => dispatch({type: 'increment'})}>+</button>",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099ccf3",
      "text": "       <button onClick={() => dispatch({type: 'decrement'})}>-</button>",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099ccf4",
      "text": "     </>",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099ccf5",
      "text": "   );",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c0a4aff09e000099ccf6",
      "text": " }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806758
    },
    {
      "id": "5cf8c344aff09e000099cd1c",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806788,
      "updated": 1559806788
    },
    {
      "id": "5cf8c0a4aff09e000099ccf7",
      "text": "Bailing out of a dispatch",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099ccf8",
      "text": "If you return the same value from a Reducer Hook as the current state, React will bail out without rendering the children or firing effects. (React uses the Object.is comparison algorithm.)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099ccf9",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "5cf8c0a4aff09e000099ccfa",
      "text": "Note that React may still need to render that specific component again before bailing out. That shouldn’t be a concern because React won’t unnecessarily go “deeper” into the tree. If you’re doing expensive calculations while rendering, you can optimize them with [useMemo].",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806828
    },
    {
      "id": "5cf8c0a4aff09e000099ccfb",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1559806116
    },
    {
      "id": "60606e6faff09e0000fae825",
      "text": "[useReducerフック活用法 - Qiita https://qiita.com/ossan-engineer/items/1192c224e4252ec0f421]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1616932464,
      "updated": 1616932464
    },
    {
      "id": "5cf8c0a4aff09e000099ccfc",
      "text": "[React hooksを基礎から理解する (useReducer編) - Qiita https://qiita.com/seira/items/2fbad56e84bda885c84c]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1559806116,
      "updated": 1616932471
    },
    {
      "id": "60606e77aff09e0000fae826",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1616932471,
      "updated": 1616932471
    }
  ]
}