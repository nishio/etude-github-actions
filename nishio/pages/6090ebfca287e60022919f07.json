{
  "id": "6090ebfca287e60022919f07",
  "title": "Hatena2008-12-23",
  "created": 1229958000,
  "updated": 1229958000,
  "lines": [
    {
      "id": "6090ec20aff09e00003cda49",
      "text": "Hatena2008-12-23",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda4a",
      "text": "code:hatena",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda4b",
      "text": " <body>",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda4c",
      "text": " *1229985164*忘年会から朝帰りしたCUDA日記2",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda4d",
      "text": " 昨日書いていた「2の累乗でない要素数Nの配列のparallel reduction」について。ちなみにやりたい内容はリストの合計を取るだけなので素朴な方法として「2の累乗に足りない部分を0で埋める」が考えられる。あとif文で分岐する方法と、素因数分解して約数でreductionする方法も考えられる。Nが2とか3しか素因数に持たない場合は3番目の方法でいいと思うが、7とかある場合にどうするのが一番早いのか。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda4e",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda4f",
      "text": " を考えたいけどやっぱり眠いので少し寝る。カフェインを摂取したので30～60分後にタイマーをセットすればちょうど血中カフェイン濃度が最高になっているはずだ。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda50",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda51",
      "text": " -----",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda52",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda53",
      "text": " CUDAのコードがどういうインストラクションの列になって、どういう風に処理されていくか見れるといいんだけどな。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda54",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda55",
      "text": " ドキュメントを読んだ感じ、下のコードでAとBが全く別の処理だとCPUなら1秒で済むけどGPUだと2秒かかるのだと思っている。試そう。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda56",
      "text": " >||",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda57",
      "text": " if(x & 1){ // 奇数のとき",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda58",
      "text": "   // 1秒かかる処理A",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda59",
      "text": " }else{",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda5a",
      "text": "   // 1秒かかる処理B",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda5b",
      "text": " }",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda5c",
      "text": " ||<",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda5d",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda5e",
      "text": " -----",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda5f",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda60",
      "text": " 確認のためのコードを書いた。スレッドは64個。ブロックが1個。差分は1行なのでdiffスタイルで書いた。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda61",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda62",
      "text": " >|cpp|",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda63",
      "text": " const int LOOP_SIZE = 1000000;",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda64",
      "text": " __global__ static void kernel(const int* input, int* output, clock_t * timer) {",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda65",
      "text": "     const int x = threadIdx.x;",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda66",
      "text": "     const int bid = blockIdx.x;",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda67",
      "text": "     if (x == 0) timer[bid] = clock();",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda68",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda69",
      "text": "     int v = 0;",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda6a",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda6b",
      "text": " -    if(x & 1){",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda6c",
      "text": " +    if(x < 32){",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda6d",
      "text": "       for(int i=0; i < LOOP_SIZE; i++){",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda6e",
      "text": "         v += i;",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda6f",
      "text": "       }",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda70",
      "text": "     }else{",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda71",
      "text": "       for(int i=LOOP_SIZE; i > 0; i--){",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda72",
      "text": "         v -= i;",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda73",
      "text": "       }",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda74",
      "text": "     }",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda75",
      "text": "     output[x] = v;",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda76",
      "text": "     __syncthreads();",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda77",
      "text": "     if (x == 0) timer[bid+gridDim.x] = clock();",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda78",
      "text": " }",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda79",
      "text": " ||<",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda7a",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda7b",
      "text": " >||",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda7c",
      "text": " (x & 1)の結果",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda7d",
      "text": " time = 148000468",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda7e",
      "text": " time = 148000468",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda7f",
      "text": " time = 148000468",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda80",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda81",
      "text": " (x < 32)の結果",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda82",
      "text": " time = 86000420",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda83",
      "text": " time = 86000404",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda84",
      "text": " time = 86000420",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda85",
      "text": " ||<",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda86",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda87",
      "text": " 倍近い性能差がでるという予想はあっていたけど、148と86がきれいに2倍になっていない理由がよくわからない。なぜだろう。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda88",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda89",
      "text": " *1230022340*CUDA日記(Bank Conflictの実験)",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda8a",
      "text": " 計測したい処理を1メガ回繰り返し計算しているので消費クロック数が86000420みたいになる。だから端数は気にせずに86Mと表記することにした。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda8b",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda8c",
      "text": " Bank Conflictが起きるのを確認したくてこういうコードにした。スレッド数は4。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda8d",
      "text": " v += i;を繰り返しているあたりのコードから、for文自体のコストは60Mだとわかるので、v += smem[x * 2];のコストが16M、smem[x] += smem[0];のコストが36Mと倍以上であることがわかる。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda8e",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda8f",
      "text": " >|cpp|",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda90",
      "text": " const int LOOP_SIZE = 1000000;",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda91",
      "text": " __global__ static void kernel(const int* input, int* output, clock_t * timer) {",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda92",
      "text": "     const int x = threadIdx.x;",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda93",
      "text": "     const int bid = blockIdx.x;",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda94",
      "text": "     __shared__ int smem[16];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda95",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda96",
      "text": "     if (x == 0) timer[bid] = clock();",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda97",
      "text": "     int v = 0;",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda98",
      "text": "     for(int i=0; i < LOOP_SIZE; i++){",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda99",
      "text": "       //smem[x] += smem[0]; // 96M",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda9a",
      "text": "       smem[x * 2] += smem[0]; // 80M",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda9b",
      "text": "       //smem[x] += smem[x + 4]; // 88M",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda9c",
      "text": "       //smem[x * 2] += smem[x * 2 + 1]; // 80M ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda9d",
      "text": "       //v += smem[x * 2]; // 76M",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda9e",
      "text": "       //v += smem[x]; // 80M",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cda9f",
      "text": "       //v += i; // 80M",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaa0",
      "text": "       //v += i; v += i; // 100M",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaa1",
      "text": "       //v += i; v += i; v += i;// 120M",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaa2",
      "text": "       //v += i + smem[x * 2]; // 80M",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaa3",
      "text": "     }",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaa4",
      "text": "     output[x] = v; //smem[x];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaa5",
      "text": "     __syncthreads();",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaa6",
      "text": "     if (x == 0) timer[bid+gridDim.x] = clock();",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaa7",
      "text": " }",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaa8",
      "text": " ||<",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaa9",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaaa",
      "text": " sharedメモリーがBankConflictさえ起こさなければレジスタ並みに速いって書いてあったけど、たしかにスレッドが4つしかない以上iはレジスタに載っているはず。そのiをお足すのより速いとか...あ、違うか。これsmem[x * 2]がループの間ずっと定数だからコンパイラが賢くループの外で取得して定数を足すコードに書き換えているのか。for文の中身を空にしたらfor文ごと削除してくれたりするし、定数に置き換えるくらいのことはやってそうだ。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaab",
      "text": " >||",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaac",
      "text": "       //v += smem[x * 2]; // 76M",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaad",
      "text": "       //v += smem[x]; // 80M",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaae",
      "text": "       //v += i; // 80M",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaaf",
      "text": " ||<",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdab0",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdab1",
      "text": " メモリアクセスの方法を変えて節約できるコストはv += i;の5分の1程度だから、reductionや配列を単純にn倍するような「計算の密度がめちゃくちゃ低い処理」でもない限り気にしないでいいんじゃないかと思った。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdab2",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdab3",
      "text": " *1230031948*vim日記(デレ期)",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdab4",
      "text": " vimのよさがわかってきた。自由にカスタマイズできる環境だとemacsと比較して「なんかややこしいなぁ。emacsだったら普通の言語は最初から全部自動判別して適切なインデントにしてくれるのに」とか思ってしまうけど、今はKnoppixなのでカスタマイズするのがめんどくさいという理由でvimを使っている。.vimrcをいじっていない。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdab5",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdab6",
      "text": " 行末に書き加えたいときに行末まで移動しなくてもAでいいのが楽。セミコロンの直前に入れるともっといいんだけど$biかな。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdab7",
      "text": " サーチでの移動もまだ使いこなせてないけど便利。/1<Enter>で次の1まで移動。なんかEnterのいらないのもあったはずだけど忘れた。移動してr2とかやって2に書き換えられるのが楽。48を72に書き換えるとかならcwで単語を消して挿入モードに入るのが便利。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdab8",
      "text": " emacsでも矩形選択はあったはずだけど覚えてない。vimはvで選択、Vで行選択、<CTRL-v>で矩形選択なので覚えやすい。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdab9",
      "text": " オートインデントの機能がデフォルトだと貧弱なので4i<SPACE><ESC>とやって4つスペースを入れたりしているけどもっといい方法があるんだろうか。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaba",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdabb",
      "text": " *1230032780*プリプロセッサでのelse if",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdabc",
      "text": " Cっぽく#else ifかと思ったら#elifだった。Pythonと同じ。もちろんPythonの方が後なのだけど、最初にelifを使ったのはCなんだろうか。それとももっと前にelifを使う言語があってそれを真似たんだろうか。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdabd",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdabe",
      "text": " *1230033942*CUDA日記(2の累乗でない配列のparallel reduction実験)",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdabf",
      "text": " 要素数が72個の配列の合計を取る計算は128まで0で埋めてしまった上で普通の2つずつのreductionをする方が速いのか、それとも素因数分解して一部3とかでreductionした方が速いのか、という話。結論から言うと最初に3で割るのが128まで埋めるタイプより1割程度速かった。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdac0",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdac1",
      "text": " 42個の場合も試してみたが580が551に減るだけの5%程度の高速化にしかならなかった。42の場合、素因数に7が入っているから微妙なんだな。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdac2",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdac3",
      "text": " いま見直していて気づいたんだけども、zeroで埋めるのを128までではなくて、いっそ72 * 2の144個使うことにすれば__syncthreads()がいらなくなるな。あとsmem[x] = x;のあとに__suncthreads()が必要だな。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdac4",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdac5",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdac6",
      "text": " >|cpp|",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdac7",
      "text": " #define N 72",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdac8",
      "text": " #define NUM_BLOCKS 1",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdac9",
      "text": " #define CEIL 128",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaca",
      "text": " #define TYPE 0",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdacb",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdacc",
      "text": " const int LOOP_SIZE = 1000000;",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdacd",
      "text": " __global__ static void kernel(const int* input, int* output, clock_t * timer) {",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdace",
      "text": "     const int x = threadIdx.x;",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdacf",
      "text": "     const int bid = blockIdx.x;",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdad0",
      "text": "     __shared__ int smem[CEIL];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdad1",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdad2",
      "text": "     if (x == 0) timer[bid] = clock();",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdad3",
      "text": "     for(int i=0; i < LOOP_SIZE; i++){",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdad4",
      "text": " #if TYPE == 0",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdad5",
      "text": "       // 684M",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdad6",
      "text": "       // zero reset",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdad7",
      "text": "       smem[CEIL - N + x] = 0;",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdad8",
      "text": "       __syncthreads();",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdad9",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdada",
      "text": "       // target values",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdadb",
      "text": "       smem[x] = x;",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdadc",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdadd",
      "text": "       // reduction",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdade",
      "text": "       if(x < 64){",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdadf",
      "text": "       \tsmem[x] += smem[x + 64];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdae0",
      "text": "       }",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdae1",
      "text": "       __syncthreads();",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdae2",
      "text": "       if(x < 32){",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdae3",
      "text": "         smem[x] += smem[x + 32];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdae4",
      "text": "         smem[x] += smem[x + 16];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdae5",
      "text": "         smem[x] += smem[x + 8];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdae6",
      "text": "         smem[x] += smem[x + 4];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdae7",
      "text": "         smem[x] += smem[x + 2];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdae8",
      "text": "         smem[x] += smem[x + 1];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdae9",
      "text": "       }",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaea",
      "text": " #elif TYPE == 1",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaeb",
      "text": "       // 632M",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaec",
      "text": "       // target values",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaed",
      "text": "       smem[x] = x;",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaee",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaef",
      "text": "       // reduction",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaf0",
      "text": "       if(x < 36){",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaf1",
      "text": "         smem[x] += smem[x + 36];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaf2",
      "text": "       }",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaf3",
      "text": "       __syncthreads();",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaf4",
      "text": "       if(x < 18){",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaf5",
      "text": "         smem[x] += smem[x + 18];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaf6",
      "text": " \tsmem[x] += smem[x + 9];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaf7",
      "text": " \tsmem[x] += smem[x + 3] + smem[x + 6];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaf8",
      "text": " \tsmem[x] += smem[x + 1] + smem[x + 2];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaf9",
      "text": "       }",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdafa",
      "text": " #else",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdafb",
      "text": "       // 624M",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdafc",
      "text": "       // target values",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdafd",
      "text": "       smem[x] = x;",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdafe",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdaff",
      "text": "       // reduction",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb00",
      "text": "       if(x < 24){",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb01",
      "text": "         smem[x] += smem[x + 24] + smem[x + 48];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb02",
      "text": "       }",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb03",
      "text": "       __syncthreads();",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb04",
      "text": "       if(x < 8){",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb05",
      "text": "         smem[x] += smem[x + 8] + smem[x + 16];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb06",
      "text": " \tsmem[x] += smem[x + 4];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb07",
      "text": " \tsmem[x] += smem[x + 2];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb08",
      "text": " \tsmem[x] += smem[x + 1];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb09",
      "text": "       }",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb0a",
      "text": " #endif",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb0b",
      "text": "       if(x == 0) output[0] = smem[0];",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb0c",
      "text": "     }",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb0d",
      "text": "     __syncthreads();",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb0e",
      "text": "     if (x == 0) timer[bid+gridDim.x] = clock();",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb0f",
      "text": " }",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb10",
      "text": " ||<",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb11",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb12",
      "text": " *1230039090*やりたいことがいっぱいありすぎる",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb13",
      "text": " ここ数日脳がハイテンションな状態になって、解決策(かもしれないもの)がぞろぞろ沸いてくるので困る。27か8には実家に帰るつもりでいるので出来ることには限りがある。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb14",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb15",
      "text": " C++版の最中限アルゴリズムだけど、カード配列がソートされていれば大小比較を節約できるよね。o1 < o2が既知ならcalc_medianはif文2つでいいようになる。分岐予測もあたりやすくなるかもしれない？",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb16",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb17",
      "text": " カード配列を、順序を保ったままで削除と復元ができる構造で表現すれば今のコピーがいらないメリットはそのままでさらに高速化できるかもしれない。そういうデータ構造があるか、っていうとあるんだなこれが。追加が起きないことが既知なのだからリンクリストを配列で作ればいい。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb18",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb19",
      "text": " これはMacBookがあればできるから実家に帰っている間にやろう。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb1a",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb1b",
      "text": " 次にOpenCVとUSBカメラでトランプの画像認識。これはカメラを持ち歩くのは面倒だけどカメラから取った画像をローカルに保存してしまえばThinkpadを実家にもって帰ればすむ。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb1c",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb1d",
      "text": " そしてCUDA。これは現状僕の部屋が外からreachableじゃないので部屋でやるしかない。エミュレータでならMacBookでも開発が出来るけどやっぱ萌えないと思うので。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb1e",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb1f",
      "text": " やっぱCUDAが最優先だなー。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb20",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb21",
      "text": " *1230042229*Goolang",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb22",
      "text": " Erlangが生まれた頃はGPUPUがなかったので、いっそ今からGoogleがErlang風のVMを新しく作ってしまえばいいんだ。ハードウェアも作ってしまえばいいんだ。言語も作ってしまえばいいんだ。そしてGoolangと名付けるといいんだ！",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb23",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb24",
      "text": " *1230047914*vim-rogue",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb25",
      "text": " ダンジョンを進んでいくとモンスターが現れて、モンスターは書き換え前の文字列と書き換え後の文字列を提示して、書き換え終わるとモンスターを倒せる。時間に応じてヒットポイントが減っていくので素早く書き換えることが重要。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb26",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb27",
      "text": " 町の魔法屋で魔法書を買うことが出来て、それを読むとvimのコマンドが書いてあるのだが、もちろん使わないと忘れる(文字通りの意味で)",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb28",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb29",
      "text": " いろいろなステータス異常があって、例えば盲目のステータス異常だとタイプ中の文字列が見えない。敬虔のステータス異常はカーソルキーが使えなくなって初心者泣かせだが、移動時の時間消費が下がるという効果があるので上級者は「敬虔の指輪」を身につけることで故意にステータス異常を起こす。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb2a",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb2b",
      "text": " 荷物が重くなればなるほどキーリピートも遅くなる。ゲーム内時間の消費も多くなる。ゲーム内時間は基本的に打鍵数に比例してかかる。ただしメタキーには追加コストがかかる。マップの移動にはvimコマンドが使える。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb2c",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb2d",
      "text": " っていう感じのゲームを誰か作ってくれないかなー",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb2e",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb2f",
      "text": " *1230057212*CUDA日記3",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb30",
      "text": " シェアードメモリはL1キャッシュに相当するらしい。グローバルメモリはキャッシュされないので必要があれば自分で明示的にキャッシュする。グローバルメモリから読めと指示するのは4クロックで済むが、実際にデータが送られてくるまでに400～600クロックのレイテンシがある。その間十分な個数の独立な処理があればそっちをやれるのでレイテンシを隠すことが出来る。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb31",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb32",
      "text": " 今日の1つ目のエントリーで書いた、CPUと違って分岐をすると両方の時間がかかるという話、cuda programming guideにちゃんと書いてあった。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb33",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb34",
      "text": " clock関数が返してくる値の単位って「the value of a per-multiprocessor counter that is incremented every clock cycle」なんだな。で、コアクロック600MHz、シェーダクロック1500MHzのいったいどっちのクロックなんだろう？シェーダクロックという理解で正しいんだろうか。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb35",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb36",
      "text": " だとすると最中限の最終ターンの読み切りは12000クロック程度なので最終ラウンド全体だと1.3秒か。今14個あるブロックのうちの1個しか使っていないのでうまく並列化すれば単純に14倍速くなって0.09秒と。C++のコードの6倍速くなることになるのかな。まぁ、他の計算処理の速くなり具合を見る感じだとそれくらいが妥当なんだろうか。やっぱり一桁速くなってほしかったなぁ。頑張れば一桁速くなるかなぁ。",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb37",
      "text": " ",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb38",
      "text": " >||",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb39",
      "text": " >>> 12000 * 4 * 9 * 8 * 5 * 11 * 10 / 1500000000.0",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb3a",
      "text": " 1.2672000000000001",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb3b",
      "text": " >>> _ / 14",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb3c",
      "text": " 0.090514285714285728",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb3d",
      "text": " ||<",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb3e",
      "text": " </body>",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb3f",
      "text": " <comments>",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb40",
      "text": " <comment>",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb41",
      "text": " <username>hoge</username>",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb42",
      "text": " <body>選択ならvipもありまっせ。</body>",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb43",
      "text": " <timestamp>1230032720</timestamp>",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb44",
      "text": " </comment>",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb45",
      "text": " <comment>",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb46",
      "text": " <username>earth2001y</username>",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb47",
      "text": " <body>sh は elif だね</body>",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb48",
      "text": " <timestamp>1230038224</timestamp>",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb49",
      "text": " </comment>",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb4a",
      "text": " <comment>",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb4b",
      "text": " <username>Dubhead</username>",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb4c",
      "text": " <body>> オートインデントの機能<br>よく分かりませんが、もしかして入力モード中の CTRL-T / CTRL-D のこと言ってます?<br>:he i_CTRL-T 参照。</body>",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb4d",
      "text": " <timestamp>1230091570</timestamp>",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb4e",
      "text": " </comment>",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb4f",
      "text": " </comments>",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb50",
      "text": "",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec20aff09e00003cdb51",
      "text": "[はてなダイアリー 2008-12-23 https://nishiohirokazu.hatenadiary.org/archive/2008/12/23]",
      "created": 1229958000,
      "updated": 1229958000,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}