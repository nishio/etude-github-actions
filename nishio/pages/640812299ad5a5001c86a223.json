{
  "id": "640812299ad5a5001c86a223",
  "title": "LLMと正規表現",
  "created": 1678250541,
  "updated": 1678250772,
  "lines": [
    {
      "id": "640812299ad5a5001c86a223",
      "text": "LLMと正規表現",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678250541,
      "updated": 1678250744
    },
    {
      "id": "6408122caff09e00005167dd",
      "text": ">[https://twitter.com/nishio/status/1633284435952144386?s=20 @nishio]: 多くのプログラマーにとって[手続型]でないパラダイムに触れるのは[正規表現]なんじゃないかと思う。どういうパターンのものにマッチして欲しいかを記述して、具体的にどうするかは正規表現エンジンに任せる。[LLM]がプログラムに組み込まれていく流れも似たものになる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678250541,
      "updated": 1678250761
    },
    {
      "id": "6408123eaff09e00005167e0",
      "text": ">正規表現エンジンに「正規表現」という謎の文字列とデータを渡したらマッチオブジェクトが返ってくるように、LLMに「プロンプト」とデータを渡したらレスポンスオブジェクトが返ってくる、現状でも大差ないな",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678250559,
      "updated": 1678250559
    },
    {
      "id": "6408122caff09e00005167de",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678250542,
      "updated": 1678250542
    },
    {
      "id": "64081288aff09e00005167e8",
      "text": ">[https://twitter.com/koizuka/status/1633289420102307840?s=20 @koizuka]: 正規表現のライブラリが標準で搭載された言語のように、大規模言語モデルを搭載したプログラミング言語が出てくる…？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678250632,
      "updated": 1678250633
    },
    {
      "id": "64081289aff09e00005167ea",
      "text": "\t>[https://twitter.com/nishio/status/1633291380629061633?s=20 @nishio]: @koizuka 現状はまだ手元で動かすのが現実的でないのでAPIを叩くのだろうけど、いずれ正規表現エンジンにフラグを渡して挙動を変えるみたいな感じで手元でやるかクラウドでやるか変えるようになりそう",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678250633,
      "updated": 1678250649
    },
    {
      "id": "64081298aff09e00005167eb",
      "text": "\t>[https://twitter.com/ajiyoshi/status/1633290699188899842?s=20 @ajiyoshi]: hello worldのバイナリサイズが30GBになる未来",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678250649,
      "updated": 1678250664
    },
    {
      "id": "640812a8aff09e00005167ed",
      "text": " >いやまあでも普通にそうなりそう。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678250664,
      "updated": 1678250688
    },
    {
      "id": "640812c0aff09e00005167ee",
      "text": " > LLMがランタイムに組み込めるようになった当初は使わないコードではリンカが削ってくれたりするかもしれないが。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678250688,
      "updated": 1678250691
    },
    {
      "id": "640812c0aff09e00005167f3",
      "text": " > そのうちに「面倒だしたった30GBなら常に同梱すればよくね？」ってなる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678250688,
      "updated": 1678250688
    },
    {
      "id": "64081299aff09e00005167ec",
      "text": "\t\t>[https://twitter.com/nishio/status/1633292065353392128?s=20 @nishio]: @ajiyoshi 「このプログラムをコンパイルするときには`libllm.so`をリンクしてください」「やだよめんどくさいよ1バイナリで完結しろ」という流れがいずれ起きそう…",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678250650,
      "updated": 1678250719
    },
    {
      "id": "640812d4aff09e00005167f4",
      "text": "  \t>[https://twitter.com/ajiyoshi/status/1633292205778690048?s=20 @ajiyoshi]: @nishio 確実にそうなりますねｗ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678250708,
      "updated": 1678250730
    },
    {
      "id": "64081288aff09e00005167e9",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678250632,
      "updated": 1678250632
    },
    {
      "id": "64081247aff09e00005167e1",
      "text": ">[https://twitter.com/ooharak/status/1633326421128142848?s=20 @ooharak]: @nishio 個人的にはですが、正規表現を知った時よりも[SQL]を知った時に手続き型との違いを感じました。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678250567,
      "updated": 1678250772
    },
    {
      "id": "6408124daff09e00005167e3",
      "text": "\t>[https://twitter.com/nishio/status/1633326885395656704?s=20 @nishio]: @ooharak 確かにSQLの方がしっかりと構文があるから「別の言語だ」感が強いですね。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678250573,
      "updated": 1678250586
    },
    {
      "id": "64081248aff09e00005167e2",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678250568,
      "updated": 1678250568
    }
  ]
}