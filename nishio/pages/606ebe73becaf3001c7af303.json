{
  "id": "606ebe73becaf3001c7af303",
  "title": "リソース効率性とフロー効率性",
  "created": 1617870454,
  "updated": 1617937932,
  "lines": [
    {
      "id": "606ebe73becaf3001c7af303",
      "text": "リソース効率性とフロー効率性",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617870454,
      "updated": 1617870460
    },
    {
      "id": "606fc534aff09e0000a17adc",
      "text": "[https://gyazo.com/0a767996e1e70b9c8447940ae3533226]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617937717,
      "updated": 1617937719
    },
    {
      "id": "606ebea0aff09e0000dbeffd",
      "text": "[フロー効率性とリソース効率性について Itsuki Kuroda https://www.slideshare.net/i2key/xpjug]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617870496,
      "updated": 1617937930
    },
    {
      "id": "606fc5f7aff09e0000a17ae7",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617937912,
      "updated": 1617937916
    },
    {
      "id": "606ebe7eaff09e0000dbeffa",
      "text": "\t[効率]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617870463,
      "updated": 1617870474
    },
    {
      "id": "606ebe7eaff09e0000dbeffb",
      "text": "\t[リソース効率性]と[フロー効率性]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617870463,
      "updated": 1617870467
    },
    {
      "id": "606fb5f1aff09e0000a17ad5",
      "text": " 「効率」という言葉で指し示してるものが2通りあるよね、という指摘",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617933810,
      "updated": 1617933857
    },
    {
      "id": "606fc3f8aff09e0000bb9ef1",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617937400,
      "updated": 1617937406
    },
    {
      "id": "606fb622aff09e00008534f9",
      "text": " 図はちょっとわかりにくいと思う",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617933859,
      "updated": 1617933866
    },
    {
      "id": "606fb63caff09e00008534fa",
      "text": " ここでリソース効率性と呼ばれているものは[制約理論]での工場機械の稼働率に対応している",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617933885,
      "updated": 1617934022
    },
    {
      "id": "606fb920aff09e00008534ff",
      "text": "  [バッチサイズ]の話、たくさんまとめた方が安く作れる場合に、リソース効率性ばかり考えていると「一番安い大きなバッチサイズで作ろう」となってしまう",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617934625,
      "updated": 1617935003
    },
    {
      "id": "606fba9caff09e0000853500",
      "text": "  バッチサイズが大きくなると工場機械に材料を運び込んだり、作ったものを運び出したりするところに時間がかかるようになるがそれを見落としがち",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617935005,
      "updated": 1617935076
    },
    {
      "id": "606fb6c6aff09e00008534fb",
      "text": " フロー効率性は、リードタイムの短さに相当",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617934022,
      "updated": 1617934146
    },
    {
      "id": "606fb743aff09e00008534fc",
      "text": " この二つを両方「効率という言葉が指しうるもの」として、トレードオフの関係になりやすいと説く",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617934148,
      "updated": 1617934182
    },
    {
      "id": "606fb7beaff09e00008534fd",
      "text": " [学びを重視する経営]においては、リードタイムの短さが学びの量の増加に直結するので好まれる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617934274,
      "updated": 1617934308
    },
    {
      "id": "606fbaf4aff09e0000853501",
      "text": " バッチサイズを減らすためには",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617935095,
      "updated": 1617935097
    },
    {
      "id": "606fbaf9aff09e0000853502",
      "text": " 　必要なものだけやる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617935098,
      "updated": 1617935110
    },
    {
      "id": "606fbb06aff09e0000853503",
      "text": " 　[ニーズからプルする]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617935111,
      "updated": 1617935122
    },
    {
      "id": "606fbb12aff09e0000853504",
      "text": " 　ソフトウェアでは[YAGNI]とか呼ばれる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617935122,
      "updated": 1617935151
    },
    {
      "id": "606fb84eaff09e00008534fe",
      "text": "　[リーンサイクル]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617934414,
      "updated": 1617935262
    },
    {
      "id": "606fbb80aff09e0000853505",
      "text": "　　思考のプロセスは矢印が逆だという指摘",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617935232,
      "updated": 1617935254
    },
    {
      "id": "606fbb96aff09e0000853506",
      "text": "　リリース日という制約を所与のものとしがち",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617935255,
      "updated": 1617936701
    },
    {
      "id": "606fc13eaff09e000085350f",
      "text": "　　その結果リソース効率性重視の考え方に変わってしまう",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617936703,
      "updated": 1617936716
    },
    {
      "id": "606fc14caff09e0000853510",
      "text": "　　この制約を動かせるようにする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617936717,
      "updated": 1617936747
    },
    {
      "id": "606fc43baff09e0000bb9ef5",
      "text": "　[The Efficiency Matrix]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617937467,
      "updated": 1617937468
    },
    {
      "id": "606fc16aaff09e0000853511",
      "text": "　[フロー効率性を向上させるメソッド、プラクティス、方法論 http://i2key.hateblo.jp/entry/2017/05/15/082655]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617936747,
      "updated": 1617936846
    },
    {
      "id": "606fc27caff09e0000853512",
      "text": "　　[ペアプログラミング]は流量が減って品質が上がる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617937021,
      "updated": 1617937041
    },
    {
      "id": "606fc291aff09e0000853514",
      "text": "　　　単位時間の作業量としては半分になっているが、品質が上がるのでリソース効率性は半分よりは多い",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617937042,
      "updated": 1617937125
    },
    {
      "id": "606fc2e5aff09e0000853515",
      "text": "　　　品質を保つために2人の人によって実装とコードレビューをやってる場合、それが1回で済むのでリードタイムが縮まる、フロー効率性は上昇する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617937125,
      "updated": 1617937232
    },
    {
      "id": "606fc35aaff09e0000853516",
      "text": "　　　副次作用として知識の共有が起きて「できる人が埋まってるので処理待ち」の発生頻度が下がる、これはリソース効率もフロー効率も上がる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617937243,
      "updated": 1617937333
    },
    {
      "id": "606fc27daff09e0000853513",
      "text": "\t\t> フロー効率性（流す量を減らす）をあげると、ライン上にタスクまちの人が増えて、何もしない人がうまれる。（リソース効率性悪化）",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617937021,
      "updated": 1617937413
    },
    {
      "id": "606fc402aff09e0000bb9ef4",
      "text": "  > リソース効率性（流す量を増やす）をあげると、ライン上に人まちのタスクが増えて、リードタイムが増える。（フロー効率性悪化）",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617937410,
      "updated": 1617937415
    },
    {
      "id": "606fc402aff09e0000bb9ef3",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617937410,
      "updated": 1617937410
    },
    {
      "id": "606fc488aff09e0000853517",
      "text": "関連",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617937550,
      "updated": 1617937550
    },
    {
      "id": "606fc48baff09e0000853519",
      "text": "　[タスクを効率的に処理していくと高速にクソアプリを実装してしまう]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617937550,
      "updated": 1617937569
    },
    {
      "id": "606fc489aff09e0000853518",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617937550,
      "updated": 1617937550
    }
  ]
}