{
  "id": "6090ec09a287e6002291a1e5",
  "title": "Hatena2011-12-26",
  "created": 1324825200,
  "updated": 1324825200,
  "lines": [
    {
      "id": "6090ec2caff09e00003da40f",
      "text": "Hatena2011-12-26",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da410",
      "text": "code:hatena",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da411",
      "text": " <body>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da412",
      "text": " *1324881140*git checkout -pのユースケース",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da413",
      "text": " 特にプロトタイプ的なコードを書いている時、将来的にはオプションなどで変更できるようにする予定のモノをコードに直書きで埋め込んだりするよね。簡単なものでは1行だったり、複雑なものだったらモックのクラスだったり。",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da414",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da415",
      "text": " 今回のユースケースは「もうこのモックは必要ないな」と思って削除して、しばらくしてからまだ消しちゃダメだったと気づいたケース。",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da416",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da417",
      "text": " 下記のコードのCODEってところを削除する。",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da418",
      "text": " >|python|",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da419",
      "text": " sIDENTIFIER = \"[^-+#: ]+\"",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da41a",
      "text": " IDENTIFIER = re.compile(sIDENTIFIER)",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da41b",
      "text": " ENHANCER = re.compile(\"\\+\\s*(%s)\" % sIDENTIFIER)",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da41c",
      "text": " SUPPRESSOR = re.compile(\"-\\s*(%s)\" % sIDENTIFIER)",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da41d",
      "text": " BODY = re.compile(\":\\s*(%s)\" % sIDENTIFIER)",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da41e",
      "text": " CODE = \"\"\"",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da41f",
      "text": " +START :OUT_H",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da420",
      "text": " +OUT_H :OUT_E",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da421",
      "text": " +OUT_E :OUT_L",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da422",
      "text": " -SUP_L +OUT_L :OUT_L",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da423",
      "text": " +OUT_L :SUP_L",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da424",
      "text": " -SUP_O +SUP_L :OUT_O :SUP_O",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da425",
      "text": " \"\"\"",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da426",
      "text": " NONE = \"NONE\" # it always be in environment",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da427",
      "text": " ||<",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da428",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da429",
      "text": " ハイ消した、保存した。でもまだ消しちゃダメだった！そして消しちゃダメだと気付くまでに他の部分もいろいろ書き換えてしまったのでundoで手軽に戻すわけにはいかない。さあどうする！？",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da42a",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da42b",
      "text": " >|python|",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da42c",
      "text": " sIDENTIFIER = \"[^-+#: ]+\"",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da42d",
      "text": " IDENTIFIER = re.compile(sIDENTIFIER)",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da42e",
      "text": " ENHANCER = re.compile(\"\\+\\s*(%s)\" % sIDENTIFIER)",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da42f",
      "text": " SUPPRESSOR = re.compile(\"-\\s*(%s)\" % sIDENTIFIER)",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da430",
      "text": " BODY = re.compile(\":\\s*(%s)\" % sIDENTIFIER)",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da431",
      "text": " NONE = \"NONE\" # it always be in environment",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da432",
      "text": " ||<",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da433",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da434",
      "text": " もう一度書くとか、古いバージョンを表示してそこからコピペするとか、を解決策として考える人も多いかと思うけど、ここで説明したいのはタイトルにも書かれているgit checkout -p。さっそくやってみよう。",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da435",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da436",
      "text": " >|diff|",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da437",
      "text": " --- a/main.py",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da438",
      "text": " +++ b/main.py",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da439",
      "text": " @@ -7,12 +7,4 @@ IDENTIFIER = re.compile(sIDENTIFIER)",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da43a",
      "text": "  ENHANCER = re.compile(\"\\+\\s*(%s)\" % sIDENTIFIER)",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da43b",
      "text": "  SUPPRESSOR = re.compile(\"-\\s*(%s)\" % sIDENTIFIER)",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da43c",
      "text": "  BODY = re.compile(\":\\s*(%s)\" % sIDENTIFIER)",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da43d",
      "text": " -CODE = \"\"\"",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da43e",
      "text": " -+START :OUT_H",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da43f",
      "text": " -+OUT_H :OUT_E",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da440",
      "text": " -+OUT_E :OUT_L",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da441",
      "text": " --SUP_L +OUT_L :OUT_L",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da442",
      "text": " -+OUT_L :SUP_L",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da443",
      "text": " --SUP_O +SUP_L :OUT_O :SUP_O",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da444",
      "text": " -\"\"\"",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da445",
      "text": "  NONE = \"NONE\" # it always be in environment",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da446",
      "text": " Discard this hunk from worktree [y,n,q,a,d,/,e,?]?",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da447",
      "text": " ||<",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da448",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da449",
      "text": " このようにhunk(かたまり)ごとに、変更を破棄して前回コミットした状態に戻すかどうかを聞いてくる。戻したいところでyを押して、それ以外ではnを押し、もう戻したいものがなければqを押せばOK。",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da44a",
      "text": " かたまりが自分の戻したい単位より大きくくっついてて、もっと分割したいなと思ったらsでもっと細かく分割。それでも期待したような分割のされ方をしないならeで行単位でどれを戻してどれを戻さないか指定できる。このあたりのコマンドの説明は?を押せば表示される。",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da44b",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da44c",
      "text": " というユースケースにちょうど今コードを書いていて遭遇したので、記録も兼ねてブログに書いておいた。",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da44d",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da44e",
      "text": " *1324887163*遺伝子をモチーフにした言語「Genomy」を作りました",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da44f",
      "text": " 最近、3年くらい前に書いた「<a href='http://d.hatena.ne.jp/nishiohirokazu/20090131/1233399693'>そろそろ例のプロジェクトについて言及するか</a>」についてTwitterで言及があったので思い出しました。「条件を満たしたものをすべて呼び出す」という設計思想でプログラムが書けてしまうという点について意外とみんなピンと来ないみたいだからコンセプトプルーフを実装してみようと思っていたんでした。",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da450",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da451",
      "text": " という訳で作りました。https://github.com/nishio/genomy",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da452",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da453",
      "text": " ** 解説",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da454",
      "text": " 「遺伝子はタンパク質の設計図」というところまでは教科書などでもよく言及されます。でも、その設計図には「どういう状況になったら作るべきか」「どういう状況では作るべきではないか」という情報も書かれています。",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da455",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da456",
      "text": " この「作るべきではない」(発現の抑制)がどう実現されているか、ザックリ説明しましょう。体の中にあるタンパク質があると、これがある遺伝子の周辺にへばりつき、その遺伝子からタンパク質を作る過程を邪魔します。これによってその遺伝子からはタンパク質を作ることができなくなります。",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da457",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da458",
      "text": " つまり、この邪魔をするタンパク質をS、邪魔されるタンパク質をPとすれば、SがないときだけPが作られ、SがあるときにはPが作られないということになります。つまりP := not(S)です。この仕組みを使って論理否定が実装できます。",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da459",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da45a",
      "text": " 逆に、あるタンパク質Eは遺伝子の周辺にへばりついて、その遺伝子の発現を高めることができます。あるタンパク質E1があるときにはタンパク質Pがたくさん作られる、そしてタンパク質E2があるときにもタンパク質Pがたくさん作られる、という仕組みにすれば、これはつまりP := E1 or E2です。この仕組みを使って論理和が実装できます。",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da45b",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da45c",
      "text": " 論理和と論理否定があれば半加算器を実装できますよね！半加算器のサンプル＞https://github.com/nishio/genomy/blob/master/sample/half_adder.gnm",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da45d",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da45e",
      "text": " 生命はこのような仕組みを使って、外部からの刺激に対する応答だとか、複雑な体の構造の構築などをプログラミングしているわけです。",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da45f",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da460",
      "text": " では実際にプログラムを動かしてみましょう。sample/hello.gnmの遺伝子を持った生物を、タンパク質STARTを含んだ環境においてみます。",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da461",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da462",
      "text": " >||",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da463",
      "text": " genomy$ python2.7 main.py -f sample/hello.gnm START",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da464",
      "text": " 0 START",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da465",
      "text": " 1 OUT_H",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da466",
      "text": " 2 OUT_E",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da467",
      "text": " 3 OUT_L",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da468",
      "text": " 4 OUT_L SUP_L",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da469",
      "text": " 5 OUT_O SUP_L SUP_O",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da46a",
      "text": " 6 ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da46b",
      "text": " 7 ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da46c",
      "text": " 8 ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da46d",
      "text": " 9 ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da46e",
      "text": " 10 ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da46f",
      "text": " ||<",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da470",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da471",
      "text": " はい、STARTの刺激に応答してHELLOと出力されました。では遺伝子を見てみましょう。",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da472",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da473",
      "text": " >||",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da474",
      "text": " +START :OUT_H",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da475",
      "text": " +OUT_H :OUT_E",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da476",
      "text": " +OUT_E :OUT_L",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da477",
      "text": " -SUP_L +OUT_L :OUT_L",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da478",
      "text": " +OUT_L :SUP_L",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da479",
      "text": " -SUP_O +SUP_L :OUT_O :SUP_O",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da47a",
      "text": " ||<",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da47b",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da47c",
      "text": " STARTの刺激があると、この生物の体内ではOUT_Hが作られ始めます。OUT_Hの刺激でOUT_Eが作られ、OUT_Eの刺激でOUT_Lが作られます。OUT_Lの刺激でOUT_Lを作ると、OUT_Lがずっと作られっぱなしになってしまうので、それを抑制するタンパクSUP_Lを作って抑制しています。このOUT_LとかSUP_Lとかは人間がわかりやすいようにつけただけの識別子で、実際の制御はその頭に付いている+と-と:で決まっています。:で始まる識別子が「作られるタンパク質」で、+と-は、まあご想像通りでしょう。",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da47d",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da47e",
      "text": " このコードを読む上で重要なポイントは、行の順序が全く関係ないという点です。行をシャッフルしても挙動が変化しません。それどころか、他の遺伝子を持った生物と混ぜあわせても、文法的には問題ありません。運悪く使っている識別子がかぶってしまうと、予期していない実行フローが発生します。でも、もしかしたらそのフローによってより環境に適応できる個体が生まれるかも知れません。うまくいかなかった個体は子孫を残さずに死ぬことによってデリートされ、うまくいく個体だけが残っていきます。",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da47f",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da480",
      "text": " 今回実装した処理系は、さらに進めて行より細かい単位で混ぜたり、突然変異と称して一文字消したり足したり書き換えたりをしても、文法エラーにならないことを意図して実装しています。そこらへんのことをためしてみるのも面白いかも知れませんね。",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da481",
      "text": " ",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da482",
      "text": " あとはよりプログラミング言語っぽいチャレンジの方向性としては、数値をどうやってタンパク質で表現するかですかね。すべての値がタンパク質なのでタンパク質指向プログラミングですね(ぇ)",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da483",
      "text": " </body>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da484",
      "text": " <comments>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da485",
      "text": " <comment>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da486",
      "text": " <username>nowokay</username>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da487",
      "text": " <body>イメージ的に、DNAコンピュータみたいですね。</body>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da488",
      "text": " <timestamp>1324898011</timestamp>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da489",
      "text": " </comment>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da48a",
      "text": " <comment>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da48b",
      "text": " <username>shiro</username>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da48c",
      "text": " <body>「条件が満たされたら発動する」ってのはPrologみたいですが、遺伝子とのアナロジーで変数の扱いってどうなりますかね。<br>言語として変数が使えるように拡張するのは多分できるけれど、現実の遺伝子に対応させて考えるとよくわからないような。<br>でも突然変異が可能になると適当な評価関数作れれば進化させられるのでおもしろそうですね。</body>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da48d",
      "text": " <timestamp>1324904759</timestamp>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da48e",
      "text": " </comment>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da48f",
      "text": " <comment>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da490",
      "text": " <username>nishiohirokazu</username>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da491",
      "text": " <body>ソースコードを切ったり貼ったり文字を挿入したりしても文法的にvalidなので、あとは適当な評価関数があれば半加算器くらいになら現実的な時間で進化できそうです。<br>変数に関して。今回はモデルを簡単にするために離散的な時間にしていますけども、実際にはタンパク質は作られたあと拡散したり分解されたりして消滅するまでの間、ある程度の時間継続して存在しています。なのでbool値しか書けないexpire付きの値がたくさんあるような状態です。<br>今回のモデルでは分解酵素がとても強くて1ステップですべてのタンパクが分解されるというモデルにしてあるので、half_adder.gnmの中では入力の値を保持し続けるために「タンパクXが存在する時にはタンパクXを作る」というルールが入れてあります。このルールに「タンパクRESET_Xが存在しない時」というサプレッサー項などを付け加えて少しいじればフリップフロップと同じ構造を作ることができます。</body>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da492",
      "text": " <timestamp>1324950710</timestamp>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da493",
      "text": " </comment>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da494",
      "text": " <comment>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da495",
      "text": " <username>shiro</username>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da496",
      "text": " <body>ああ、変数というのは単に状態を保持する機構という意味ではなくて、コードの塊をパラメタライズするものの方を考えてました。パラメータとか引数とか言った方が良かったですね。「任意のタンパク質X, Y, Zに対して『XとYが発現した時Zを発現させる』という動作をするコード片」というようなコードが書けるのかなあ、ということです。これの有る無しで言語としては質的な差が出てくると思うので (というか、パラメータ無しでチューリング完全にできましたっけ? なんとなく有限状態機械までしかできないような気がするんですがあんまりちゃんと考えてません)。<br><br>なので具体的な疑問としては、(1)DNAのメカニズムとしてパラメタライズに相当するものはあるのかなあ、(2)無いとして、無くても十分に強力な演算力があるのかなあ、というようなことが頭にあったのでした。</body>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da497",
      "text": " <timestamp>1324970123</timestamp>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da498",
      "text": " </comment>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da499",
      "text": " <comment>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da49a",
      "text": " <username>nishiohirokazu</username>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da49b",
      "text": " <body>なるほど。共通の処理を関数にまとめるといったたぐいの抽象化のことを指しているという理解で正しいでしょうか？であれば相当するものはないと思います。<br>そもそもその手の抽象化機構が必要になるのは、人間の認知能力の限界があって抽象化しないと理解しきれなくなるです。でも、DNAを使ったコーディングはコードを理解せずに行われるので、抽象化が必要にならなかったわけです。少なくとも人間程度の有限状態機械を実装する上では。<br><br>モジュール単位でのON/OFFに近い機能は必要になったらしくて、ある程度長いDNAをタンパク質に巻きつけて発現不能にしたり、DNAをメチル化して「当分使わない」フラグを立てたりはされていますが、まあパラメトライズとはかなり違いますよね。基本的に全部がグローバルな名前空間に置かれているイメージです。</body>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da49c",
      "text": " <timestamp>1324977824</timestamp>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da49d",
      "text": " </comment>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da49e",
      "text": " <comment>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da49f",
      "text": " <username>shiro</username>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da4a0",
      "text": " <body>なるほど > 「少なくとも人間程度の有限状態機械を実装する上では」<br><br>抽象化はコードの情報密度を上げるので、変異の影響が大きくなりすぎる可能性もありますしね。遺伝的進化とはあまり相性が良くないかもしれません。<br><br>そうやって実装された有限状態機械がひとつ上のレイヤでチューリング完全な動きをする、っていうのは、まあ、シリコン上の回路で実装された有限状態機械でチューリングマシンがエミュレートできるってのと同じですね。</body>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da4a1",
      "text": " <timestamp>1324979389</timestamp>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da4a2",
      "text": " </comment>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da4a3",
      "text": " </comments>",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da4a4",
      "text": "",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003da4a5",
      "text": "[はてなダイアリー 2011-12-26 https://nishiohirokazu.hatenadiary.org/archive/2011/12/26]",
      "created": 1324825200,
      "updated": 1324825200,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}