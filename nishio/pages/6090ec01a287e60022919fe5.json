{
  "id": "6090ec01a287e60022919fe5",
  "title": "Hatena2009-08-07",
  "created": 1249570800,
  "updated": 1249570800,
  "lines": [
    {
      "id": "6090ec25aff09e00003d2e74",
      "text": "Hatena2009-08-07",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e75",
      "text": "code:hatena",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e76",
      "text": " <body>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e77",
      "text": " *1249612840*原始帰納的関数のPythonでの表現",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e78",
      "text": " 原始帰納的関数の定義がよくわからなかったので数学事典で調べてみた。数学語で書いてあるけど、Python語に翻訳してみると:",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e79",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e7a",
      "text": " >|python|",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e7b",
      "text": " def inc(x):",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e7c",
      "text": "     return x + 1",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e7d",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e7e",
      "text": " def constant(*args):",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e7f",
      "text": "     return CONSTANT",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e80",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e81",
      "text": " def choice_K(*args):",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e82",
      "text": "     return args[K]",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e83",
      "text": " ||<",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e84",
      "text": " という関数からスタートして(constantとchoiceは返す定数や選ぶ引数の位置によって無数に存在する)",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e85",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e86",
      "text": " >|python|",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e87",
      "text": " def apply_funcs(*args):",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e88",
      "text": "     return REDUCE_FUNC(",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e89",
      "text": "         MAP_FUNC_TABLE[0](*args), ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e8a",
      "text": "         MAP_FUNC_TABLE[1](*args), ...)",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e8b",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e8c",
      "text": " def recursive(*args):",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e8d",
      "text": "     head = args[0]",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e8e",
      "text": "     tail = args[1:]",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e8f",
      "text": "     if head == 0:",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e90",
      "text": "         return WHEN_ZERO_FUNC(tail)",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e91",
      "text": "     else:",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e92",
      "text": "         return OTHERWISE(y, recursive(y - 1, *tail), *tail)",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e93",
      "text": " ||<",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e94",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e95",
      "text": " という関数を繰り返し適用して作ることのできるもの、となる。",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e96",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e97",
      "text": " さて、実際にコードを書いて試してみるために、上のざっくりとしたPython訳をしっかりした訳にしてみよう。主に「constantとchoiceは返す定数や選ぶ引数の位置によって無数に存在する」という日本語で書いてある部分がダメなので、これをコードで表現する。パラメータによって無数に定義の存在する関数ってのはPython語ではクラスっていう。",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e98",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e99",
      "text": " >|python|",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e9a",
      "text": " # -*- coding: utf-8 -*-",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e9b",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e9c",
      "text": " def inc(x):",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e9d",
      "text": "     return x + 1",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e9e",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2e9f",
      "text": " class Constant:",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ea0",
      "text": "     def __init__(self, CONSTANT):",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ea1",
      "text": "         self.CONSTANT = CONSTANT",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ea2",
      "text": "     def __call__(self, *args):",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ea3",
      "text": "         return self.CONSTANT",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ea4",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ea5",
      "text": " class Choice:",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ea6",
      "text": "     def __init__(self, WHERE):",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ea7",
      "text": "         self.WHERE = WHERE",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ea8",
      "text": "     def __call__(self, *args):",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ea9",
      "text": "         return args[self.WHERE]",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eaa",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eab",
      "text": " class ApplyFuncs:",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eac",
      "text": "     def __init__(self, REDUCE_FUNC, MAP_FUNCS):",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ead",
      "text": "         self.REDUCE_FUNC = REDUCE_FUNC",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eae",
      "text": "         self.MAP_FUNCS = MAP_FUNCS",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eaf",
      "text": "     def __call__(self, *args):",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eb0",
      "text": "         return self.REDUCE_FUNC(",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eb1",
      "text": "             *[self.MAP_FUNCS[i](*args) for i in range(len(self.MAP_FUNCS))]) ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eb2",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eb3",
      "text": " class Recursive:",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eb4",
      "text": "     def __init__(self, WHEN_ZERO_FUNC, OTHERWISE):",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eb5",
      "text": "         self.WHEN_ZERO_FUNC = WHEN_ZERO_FUNC",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eb6",
      "text": "         self.OTHERWISE = OTHERWISE",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eb7",
      "text": "     def __call__(self, *args):",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eb8",
      "text": "         head = args[0]",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eb9",
      "text": "         tail = args[1:]",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eba",
      "text": "         if head == 0:",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ebb",
      "text": "             return self.WHEN_ZERO_FUNC(*tail)",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ebc",
      "text": "         else:",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ebd",
      "text": "             return self.OTHERWISE(head, self(head - 1, *tail), *tail)",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ebe",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ebf",
      "text": " # x + yを定義する",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ec0",
      "text": " add = Recursive(",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ec1",
      "text": "     # xが0ならyそのもの",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ec2",
      "text": "     WHEN_ZERO_FUNC=Choice(0),",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ec3",
      "text": "     # xが0でないならadd(x, y)はinc(add(x - 1, y))",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ec4",
      "text": "     OTHERWISE=ApplyFuncs(",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ec5",
      "text": "         REDUCE_FUNC=inc,",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ec6",
      "text": "         MAP_FUNCS=[Choice(1)]",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ec7",
      "text": "         ))",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ec8",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ec9",
      "text": " print add(2, 3) #-> 5",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eca",
      "text": " \"\"\" MEMO",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ecb",
      "text": " add(2, 2)",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ecc",
      "text": " -> OTH(2, add(1, 2), 2)",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ecd",
      "text": " -> OTH(2, OTH(1, add(0, 2), 2), 2)",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ece",
      "text": " -> OTH(2, OTH(1, 2, 2), 2)",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ecf",
      "text": " -> OTH(2, inc(Choice1(1, 2, 2)), 2)",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ed0",
      "text": " -> OTH(2, inc(2), 2)",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ed1",
      "text": " -> OTH(2, 3, 2)",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ed2",
      "text": " -> inc(Choice1(2, 3, 2))",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ed3",
      "text": " -> inc(3)",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ed4",
      "text": " -> 4",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ed5",
      "text": " \"\"\"",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ed6",
      "text": " ||<",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ed7",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ed8",
      "text": " とりあえず、足し算が原始帰納的関数であることまではコードで表現できた。このパズルはけっこう面白い。足し算は何とかなったけど、他にもx * y, x ^ y, x!, min(x, y), max(x, y), abs(x  - y), x == y, x < y, xはyで割り切れる, xは素数である, x番目の素数, なども全部原始帰納的だそうな。",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ed9",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eda",
      "text": " <hr>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2edb",
      "text": " 掛け算も作った。",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2edc",
      "text": " >|python|",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2edd",
      "text": " # x * yを定義する",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ede",
      "text": " mul = Recursive(",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2edf",
      "text": "     # xが0なら0",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ee0",
      "text": "     WHEN_ZERO_FUNC=Constant(0),",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ee1",
      "text": "     # xが0でないならmul(x, y)はadd(x - 1, y) + yで、",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ee2",
      "text": "     # OTH(x, add(x - 1, y), y)の最初の引数を無視して残りにaddを使うために",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ee3",
      "text": "     # RecursiveのWHEN_ZEROを使う",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ee4",
      "text": "     OTHERWISE=Recursive(",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ee5",
      "text": "         WHEN_ZERO_FUNC=add,",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ee6",
      "text": "         OTHERWISE=Choice(1)))",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ee7",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ee8",
      "text": " print mul(5, 7) #-> 35",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ee9",
      "text": " ||<",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eea",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eeb",
      "text": " *1249649135*カトレヤ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eec",
      "text": " 第1回の部屋がパール、第2回の部屋がルビーだったPython温泉ですが、第3回の部屋はカトレヤでした。",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eed",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eee",
      "text": " <a href=\"http://d.hatena.ne.jp/kuma8/20090807/1249624781\"><img src=\"http://gyazo.com/9d16ec48ea092e8a7f0f59c71d96f539.png\"></a>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eef",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ef0",
      "text": " なんか無茶ぶりきたこれ。というわけで作りました。",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ef1",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ef2",
      "text": " http://bitbucket.org/nishio/cattleya/",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ef3",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ef4",
      "text": " 「cattleya is very very dirty superset of Python programming language.」Python2.6で実装されていて、大部分の機能はPython2.6に丸投げするので「ほぼPython2.6互換」です。新しくできるようになったこととしてはRubyみたいに文字列リテラルとかにメソッドを追加できるようになったことかな！joinメソッドが文字列のメソッドではなくリストのメソッドであることにぶーぶー文句だけたれて手を動かさない人も世の中にはいるようですけど、60行程度でリストのリテラルにjoinメソッドを足せました。",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ef5",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ef6",
      "text": " >|python|",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ef7",
      "text": " # cattleya/test_targets/join.py ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ef8",
      "text": " assert [\"foo\", \"bar\", \"baz\"].join(\"-\") == \"foo-bar-baz\"",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2ef9",
      "text": " assert [1, 2, 1 + 2].join(\"-\") == \"1-2-3\"",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2efa",
      "text": " ||<",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2efb",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2efc",
      "text": " あと、re.findall(pattern, data)をdata.findall(pattern)って書けるようにしてみました。assert \"aaabbaababbbaaaab\".findall(\"a+\") == ['aaa', 'aa', 'a', 'aaaa']",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2efd",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2efe",
      "text": " lenやsortedをメソッドにするとか、Noneを返す関数を書き換えてメソッドをチェーンしやすくするとか、dirtyと言い切ってしまうとやり放題だなー。ワンライナー書きやすい言語にしてみよう。",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2eff",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f00",
      "text": " **設計について",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f01",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f02",
      "text": " ソースファイルを読み込み、文字列として編集するプリプロセッサが走り、それから抽象構文木に変換して編集し、バイトコードにコンパイルしてからまた編集して、最後にPythonのexecに渡す、という流れになっています。まあ、プリプロセスとバイトコード編集は必要になるまで作らない方針で、今は何もしないコードになっています。",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f03",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f04",
      "text": " で、Pythonを自分好みに書き換える上で一番障害になっているのは組み込みの文字列型や整数型なんかがread-onlyなクラスであることなのです。まあ、それがコードの読みやすさや高速化の容易さに結びついているんだからメインストリームがそういう設計なのは悪くないんですけど、パフォーマンスや読みやすさを考慮しないワンライナーとか書くのには不便。汚いコードを書けないようにする設計は汚いコードを書くのに不便。ってわけでとりあえずリテラルは全部ラッパークラスで書き換えられるようにしてしまいましょう。ちゃんとそれ用にUserListとかUserStringとかライブラリありますし。",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f05",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f06",
      "text": " という感じ。まあ、あんまりガチで新しい言語を作ろうという気はないので開発コード「カトレア」でPythonに変な機能を付け足しまくるような流れかなぁ。",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f07",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f08",
      "text": " *1249655632*XCodeのエディタのフォントサイズを大きくする方法",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f09",
      "text": " 環境設定を見たけどみつからないよう",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f0a",
      "text": " <img src=\"http://gyazo.com/96e0410f575fdc605a4aa9480f67de93.png\">",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f0b",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f0c",
      "text": " あっ、スクロールバー！",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f0d",
      "text": " <img src=\"http://gyazo.com/79f7c9c796b43a2af4e1e8de33cb18c2.png\">",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f0e",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f0f",
      "text": " まず設定をコピーして、リストをまとめて選択してからダブルクリックしたら編集できる。僕はフォントサイズを16ポイントにしないと乱視が悪化するのであった。これでXCodeでコードが書ける。",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f10",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f11",
      "text": " *1249658409*[iPhone]Metronomeを読む",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f12",
      "text": " - @interface と @protocol は何が違うのか",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f13",
      "text": " -- @protocolがJavaで言うところのinterfaceで@interfaceがJavaで言うところのクラス",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f14",
      "text": " >|java|",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f15",
      "text": " class Foo extends Bar implements Baz, Quux",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f16",
      "text": " ||<",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f17",
      "text": " は",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f18",
      "text": " >|objc|",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f19",
      "text": " @interface Foo : Bar < Baz, Quux >",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f1a",
      "text": " ||<",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f1b",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f1c",
      "text": " - @classはなんだ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f1d",
      "text": " -- 別のソースにそのクラスがあるので今は定義がないけどあると思っておけって感じのプロトタイプ宣言のようなもの",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f1e",
      "text": " -- 「この識別子はクラスである」と宣言する。includeでもいいが、@classでは定義を読み込まないのでコンパイルが速い。しかし継承はできない。メッセージを送るのは実行時なのでコンパイル時にはそれがクラスであることだけわかればいい。",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f1f",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f20",
      "text": " -クラスブラウザ便利。プロジェクト→クラスブラウザ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f21",
      "text": " <img src=\"http://gyazo.com/6440e0783b03a816d732b4d9282575f8.png\">",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f22",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f23",
      "text": " - BOOLはYES/NO",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f24",
      "text": " >|c|",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f25",
      "text": " // objc.h",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f26",
      "text": " #define YES             (BOOL)1",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f27",
      "text": " #define NO              (BOOL)0",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f28",
      "text": " ||<",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f29",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f2a",
      "text": " - とりあえず指定した時間の前に「ぴっぴっぴっぽーん」となるところまではできた。メトロノームの音声ファイルをそのまま使っているのでださい。音声フォーマットがcafって拡張子だなぁ。<a href='http://iphone-dev.ensites.net/archives/tag/caf'>caf - iPhoneアプリ開発ブログ</a>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f2b",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f2c",
      "text": " - 大分眠くなってきた。えーと",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f2d",
      "text": " -- □ 音声ファイルを差し替える",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f2e",
      "text": " --- cafの作り方は？",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f2f",
      "text": " --- 効果音の作り方は？",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f30",
      "text": " -- □ 絵を捨てる",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f31",
      "text": " -- □ 残り時間のバーが縮んで行くようなアニメーションを書く",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f32",
      "text": " --- 四角の書き方は？",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f33",
      "text": " -- □ 時間の設定を設定画面でできるようにする",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f34",
      "text": " -- □ 持ち時間が残っているけどプレイした場合に画面をタップしたら相手の手番に変わるようにする",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f35",
      "text": " - ができればとりあえず対局時計代わりにはなるかな。将来的には「2回目の考慮時間に入りました」だのもしたいけど。",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f36",
      "text": " ",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f37",
      "text": " <img src=\"http://gyazo.com/84255cb0ac0eef493885e138a23ac9c3.png\">",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f38",
      "text": " </body>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f39",
      "text": " <comments>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f3a",
      "text": " <comment>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f3b",
      "text": " <username>shou</username>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f3c",
      "text": " <body>これって何につかうのでせうか？計算可能性っていうなら原始帰納的関数でなくても計算可能な関数ってあるよね？（churchの定律あたりで眠くなってしまった俺には遠い世界です・・・）</body>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f3d",
      "text": " <timestamp>1249622400</timestamp>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f3e",
      "text": " </comment>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f3f",
      "text": " <comment>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f40",
      "text": " <username>nishiohirokazu</username>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f41",
      "text": " <body>Python-MLでなんか原始再帰的うんぬんって議論になっていて、定義を知らなかったので調べてみた＆実装してみた、というだけなので何の役に立つのかは知りません。</body>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f42",
      "text": " <timestamp>1249829594</timestamp>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f43",
      "text": " </comment>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f44",
      "text": " <comment>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f45",
      "text": " <username>ヤマアラシ</username>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f46",
      "text": " <body>原始帰納的関数のクラスに入るのは普通の関数です．これはZF公理系に対応しています．原始帰納的関数の作用素系にμ作用素をたして作られる部分帰納的関数のクラスはチューリングマシンで計算できる関数のクラスに完全に一致します．<br>さらに，μ作用素は選択公理に対応していて，ZFC公理系が部分帰納的関数に対応しているそうです．たぶんですけど</body>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f47",
      "text": " <timestamp>1272920164</timestamp>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f48",
      "text": " </comment>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f49",
      "text": " <comment>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f4a",
      "text": " <username>nishiohirokazu</username>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f4b",
      "text": " <body>そのコメントは初っ端の「普通の」という言葉が明確に定義されていないので後の難しい術語の列も「本当にわかって書いているのかな」と思ってしまいます。<br>定義から明らかなようにf(x) = x / 2は原始帰納的関数ではないですから。</body>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f4c",
      "text": " <timestamp>1272936051</timestamp>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f4d",
      "text": " </comment>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f4e",
      "text": " <comment>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f4f",
      "text": " <username>ヤマアラシ</username>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f50",
      "text": " <body>f(x)=x/2が原始帰納的でないというのはそれほど明らかでないと思うのですが。<br>fのドメインが有理数だった場合，ｆは原始帰納的ですし．<br>有理数を自然数に符号化して考える必要がありますが，定義上まったく問題ないと思います．<br>普通の関数といったのは，通常思いつくような計算可能な関数という意味でつかいました．<br>チャーチの提唱で「直感的に計算可能な」という明確に定義されてない言葉がつかわれているところから<br>洒落のつもりで「普通の」という明確に定義されていない言葉をつかったのですが，誤解を招いたようで申し訳ありません．<br>通常思いつくような，コンピュータで計算できる関数ぐらいの意味で受け取ってください</body>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f51",
      "text": " <timestamp>1272972108</timestamp>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f52",
      "text": " </comment>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f53",
      "text": " <comment>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f54",
      "text": " <username>nishiohirokazu</username>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f55",
      "text": " <body>fのドメインが実数全体であればもちろんfは原始帰納的ではないわけですし、単純にf(x) = x / 2と書いた場合ドメインが有理数に限定されていると思わない方が「普通」だと思うのですが、まあそれは「普通」という明確に定義されていない用語の解釈に相違があっただけのことですね。<br><br>ところでコメントの意図が明確には読み取れなかったのですが、説明していただけますか？</body>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f56",
      "text": " <timestamp>1272974058</timestamp>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f57",
      "text": " </comment>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f58",
      "text": " <comment>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f59",
      "text": " <username>ヤマアラシ</username>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f5a",
      "text": " <body>えーとどのへんが伝わりませんかね。最初のコメントの方ですか？それともその次のコメントですか？</body>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f5b",
      "text": " <timestamp>1272978937</timestamp>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f5c",
      "text": " </comment>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f5d",
      "text": " <comment>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f5e",
      "text": " <username>nishiohirokazu</username>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f5f",
      "text": " <body>コメントの意図です。</body>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f60",
      "text": " <timestamp>1272988236</timestamp>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f61",
      "text": " </comment>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f62",
      "text": " <comment>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f63",
      "text": " <username>ヤマアラシ</username>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f64",
      "text": " <body>コメント自体の意図ですか。<br>たまたま原始帰納的関数とPythonで検索したら上位にあったのでのぞかせてもらったんですが，<br>shoさんのコメント「これって何につかうんでせうか。原始帰納的関数じゃなくても計算可能な関数ってあるよね」<br>っていう疑問があったので，気まぐれに原始帰納的関数と計算可能性の話を書いたまでです。<br>数学的に微妙な選択公理関連の話があるから原始帰納的関数と部分帰納的関数（計算可能な関数のクラス）<br>でクラスの階層を設けているのだという意味です。<br>それで「普通の関数」の定義の話になったので，それについての補足をするとともに，f(x)=x/2 が原始帰納的関数かそうでないかは判断が難しいと思うという自分の考えを書き込みました。<br>気分を害したならごめんなさい。他意はありません。もしコメントとして相応しくないと<br>思われるなら，消してください。</body>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f65",
      "text": " <timestamp>1272995663</timestamp>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f66",
      "text": " </comment>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f67",
      "text": " <comment>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f68",
      "text": " <username>nishiohirokazu</username>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f69",
      "text": " <body>なるほどなるほど。エントリーのどこに対する反応なのかと疑問に思っていたのですが、shouさんのコメントに対するコメントでしたか。納得しました。</body>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f6a",
      "text": " <timestamp>1273024903</timestamp>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f6b",
      "text": " </comment>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f6c",
      "text": " </comments>",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f6d",
      "text": "",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec25aff09e00003d2f6e",
      "text": "[はてなダイアリー 2009-08-07 https://nishiohirokazu.hatenadiary.org/archive/2009/08/07]",
      "created": 1249570800,
      "updated": 1249570800,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}