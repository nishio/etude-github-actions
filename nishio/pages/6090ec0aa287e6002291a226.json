{
  "id": "6090ec0aa287e6002291a226",
  "title": "Hatena2012-05-01",
  "created": 1335798000,
  "updated": 1335798000,
  "lines": [
    {
      "id": "6090ec2eaff09e00003dbd4f",
      "text": "Hatena2012-05-01",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd50",
      "text": "code:hatena",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd51",
      "text": " <body>",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd52",
      "text": " *1335846610*作りたいもの: プログラミング言語のコア概念を学ぶサイト",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd53",
      "text": " 増井さんの<a href='http://www.scribd.com/doc/91645150/%E4%BD%9C%E3%82%8A%E3%81%9F%E3%81%84%E3%82%82%E3%81%AE%E3%83%AA%E3%82%B9%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8D%E3%81%86'>作りたいものリストを作ろう</a>というスライドを見て「確かに『いつかやる』リストに入れてるだけじゃ発展しないから、公開しても問題ないものは公開したらいいなぁ」と思ったので早速やってみました。とはいえ、僕の『いつかやる』リストは一つのリストの要素に色々な設計やアイデアが書かれていて、全部一度に載せると読むのも大変。とりあえず1つ目だけ載せてみます。動機なんかを加筆。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd54",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd55",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd56",
      "text": " ** プログラミング言語のコア概念を学ぶサイト",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd57",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd58",
      "text": " 日本語や英語で書かれた解説を読むより、実際に動かしてみたほうがわかりやすいこともある。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd59",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd5a",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd5b",
      "text": " しかし、広く使われている言語は既に長年の改良が繰り返されていて、改築・増築を繰り返した老舗旅館みたいに複雑なものになってしまっている。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd5c",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd5d",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd5e",
      "text": " 学習のために、小さくシンプルな、全体像を理解しやすい、わかりやすく可視化された「言語の実装」が必要だ。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd5f",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd60",
      "text": " ** そんなものはすでにあるのでは？",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd61",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd62",
      "text": " かつて色々な方法で(Javaアプレットで、Flashで、etc)、色々なアルゴリズムの可視化が試みられてきた。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd63",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd64",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd65",
      "text": " 適切な可視化手法は時代によって変わっていく。一方で、ある時代にアルゴリズムの可視化を実装した人が、みな5年後、10年後別の可視化手法への移植をするかというとそうではない。それがなぜなのかはわからない。可視化部分の習得コストが高いからか？",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd66",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd67",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd68",
      "text": " メンテナンスが継続されない問題はどうすれば解決できるか？コードが公開されていなかったり、されていてもライセンスが不明な点が問題の原因ではないか？であれば、GPLで公開すれば、将来の移植版も含めて再利用可能なライセンスであることを保証できるのではないか？",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd69",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd6a",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd6b",
      "text": " また、アルゴリズムの実装部分と可視化部分は疎結合であるべき。それによって移植性や再利用性が高まる。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd6c",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd6d",
      "text": " ** 適切なサイズ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd6e",
      "text": " ついつい機能追加をしてしまいがちだが、実装の読みやすさにも価値があることを考えると、最適なサイズは結構小さい。例えば中置記法のパーサの実装であれば「足し算と掛け算と括弧による優先順位の変更」だけ、とかが適切なサイズだと思う。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd6f",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd70",
      "text": " >>",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd71",
      "text": " これ以上付け加える物が無くなった時でなく、これ以上取り去る物が無くなった時が完成だ - アントワーヌ・ド・サン＝テグジュペリ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd72",
      "text": " <<",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd73",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd74",
      "text": " ** 実装するものリスト",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd75",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd76",
      "text": " 何でもありだと力が分散してしまう。まずは集中するべき。今回は「JavaScriptで実装されていて、インストールなしで、ブラウザ上で動作する」に集中する。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd77",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd78",
      "text": " - 構文木可視化部門",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd79",
      "text": " -- A: 構文木をSVGかcanvasで可視化する部品。汎用のツリー表示ライブラリが使えるかも。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd7a",
      "text": " -- シンプルな中置記法のコードをパースして構文木を作る部品。Aと結合して「ブラウザ上で1 * 2 + 3とか書くとリアルタイムで木がにょきにょき変形するのがわかる」というデモが出来る",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd7b",
      "text": " -- 実用的に使われている言語の、構文木を作る部品とAとを結合させるアダプタ。JavaScriptのブラウザ上で動作するパーサは存在する http://esprima.org/demo/parse.html 後はこれの出力をAに送って可視化するだけ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd7c",
      "text": " -- LispのS式のパーサ。最低限数値と加算・乗算だけでよい。これもAに接続できるように",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd7d",
      "text": " -- Forthのパーサ(って言うほどのものでもないか) Aに接続できるように",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd7e",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd7f",
      "text": " - スタックマシン部門",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd80",
      "text": " -- B: 「命令列のどこを実行しているか」と「スタックの状態」をわかりやすく可視化する部品",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd81",
      "text": " -- D: Forthの実装 これはほぼスタックマシンの実装と同義。最低限数値と加算・乗算だけでよい。Bと結合して可視化されること",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd82",
      "text": " -- スタックマシンを使っている言語のバイトコードを実行 たとえばPythonであれば文字列として受け取ったソースコードをバイトコードにコンパイルして返すHTTPサーバを書くことができるから、Pythonのバイトコードを実行するJSを書けばブラウザ上でステップ実行できる。Bと結合して可視化されること",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd83",
      "text": " -- Lispパーサの出力をForthにコンパイルしてDで動かす",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd84",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd85",
      "text": " - 構文木書換え部門",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd86",
      "text": " -- C: 構文木を部分的に書き換えていくことで計算を行う。Aと結合して可視化されること",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd87",
      "text": " -- Lispのパーサからの出力をCにつないで実行",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd88",
      "text": " -- Lazy K実装。Aと結合して実行過程が可視化される。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd89",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd8a",
      "text": " - 機械語部門",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd8b",
      "text": " -- EDSACシミュレータ。シンプルな機械で機械語を学ぶために。ただし命令の読みにくさを保存する必要性はないのでわかりやすいエイリアスをつける。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd8c",
      "text": " -- Brainf*ck: ただし読みにくさを保存する必要はないので、わかりやすいエイリアスをつける、数値をstoreする命令を足す、などを行う。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd8d",
      "text": " -- 将来的には上記の機能限定されたForthやLispから機械語へのコンパイラを実装する。コンパイル過程を可視化する。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd8e",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd8f",
      "text": " - その他",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd90",
      "text": " -- オブジェクトシステムの実装",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd91",
      "text": " -- スコープの実装",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd92",
      "text": " -- ガベージコレクション (thanks id:nisemono_san) ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd93",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd94",
      "text": " *1335865812*作りたいもの: 1歩ずつミッションをクリアすることでGitの使い方を覚えられるゲーム",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd95",
      "text": " 増井さんの<a href='http://www.scribd.com/doc/91645150/%E4%BD%9C%E3%82%8A%E3%81%9F%E3%81%84%E3%82%82%E3%81%AE%E3%83%AA%E3%82%B9%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8D%E3%81%86'>作りたいものリストを作ろう</a>というスライドを見て「確かに『いつかやる』リストに入れてるだけじゃ発展しないから、公開しても問題ないものは公開したらいいなぁ」と思ったので早速やってみました。2つ目。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd96",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd97",
      "text": " ** 1歩ずつミッションをクリアすることでGitの使い方を覚えられるゲーム",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd98",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd99",
      "text": " なんちゃらVille系のゲームはどうして人の心をとらえるのか？",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd9a",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd9b",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd9c",
      "text": " 「小さい粒度のミッションが提示されて、それを達成すると次のミッションが表示される仕組み」は、頻繁に「達成感」という報酬を与えることで人の心をとらえるのだろうか？",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd9d",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd9e",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbd9f",
      "text": " そういえば僕が昔書いた、対話的インタプリタで1歩ずつ操作しながらPythonを覚えるコンテンツも評判が良かったなぁ。だったらgitの使い方も、1歩ずつ対話的にミッションをクリアしながら学べるようにしたら面白いんじゃないか？",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbda0",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbda1",
      "text": " ** 学習ユーザのユースケース",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbda2",
      "text": " 実は既にgithubにおいてあったりする。一応遊べる。 https://github.com/nishio/academy/blob/master/README_ja.rst",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbda3",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbda4",
      "text": " - 1: gitを学びたいユーザはこのリポジトリをクローンする",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbda5",
      "text": " - 2: git/test.pyを実行する。これが実行できたら「クローンする」っていう最初のミッションはクリアしたってこと",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbda6",
      "text": " - 3: test.pyが次のミッションを提示する。それを解く、を繰り返す。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbda7",
      "text": " - 4: やったー、ミッションを全部クリアした！gitを理解できたよー",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbda8",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbda9",
      "text": " ** 何が不足か？",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdaa",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdab",
      "text": " - 外見がかなりひどい",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdac",
      "text": " - 達成したミッションの一覧が見られると幸せ？",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdad",
      "text": " - 各環境で正しく動くことを確認するのは面倒(特にWindows)",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdae",
      "text": " - ユーザが何を入力したか、を確認する手段がない(historyをチェックするとか？)",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdaf",
      "text": " - 現状、途中でつまずいた人を救済する方法が存在しない、というか何につまずいているかを僕が知る方法がない",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdb0",
      "text": " - いっそPythonでシェルを乗っ取ってしまえばいいのか？termios？",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdb1",
      "text": " - いま、ミッションを達成した時にCONGRATULATION!って出るだけで、すぐに次の問題が出ちゃう。ここではおめでとうメッセージと簡単な解説を出すだけにして、次のミッションを表示するのにもう1アクション挟んだほうがよさそう。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdb2",
      "text": " - ミッションの案は色々あるんだけど、まだ作ってない https://github.com/nishio/academy/blob/master/git/README.rst",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdb3",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdb4",
      "text": " *1335883422*作りたいもの: JavaScriptのコードの質を保つためのガードレール",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdb5",
      "text": " 増井さんの<a href='http://www.scribd.com/doc/91645150/%E4%BD%9C%E3%82%8A%E3%81%9F%E3%81%84%E3%82%82%E3%81%AE%E3%83%AA%E3%82%B9%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8D%E3%81%86'>作りたいものリストを作ろう</a>というスライドを見て「確かに『いつかやる』リストに入れてるだけじゃ発展しないから、公開しても問題ないものは公開したらいいなぁ」と思ったので早速やってみました。3つ目。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdb6",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdb7",
      "text": " ** JavaScriptのコードの質を保つためのガードレール",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdb8",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdb9",
      "text": " JavaScriptは柔らかい言語で、typoとか変数名の変え忘れが実行時までエラーにならない。しかもしれっとundefinedとかになって、そのままHTMLやSVGのpath文字列に埋め込まれてたりしてデバッグにコストが掛かってしまう。人間は間違える生き物だから、間違いをなくすことはできない。だから間違えた時になるべく早く気づけるようにする仕組みが必要だ。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdba",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdbb",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdbc",
      "text": " Google Closure CompilerはJavaScriptのソースコードを静的に検証してエラーを報告してくれる。であれば自分がソースコードを編集している時にバックグラウンドでがんがんコンパイルしてエラーが見つかり次第報告してくれればいいんじゃないか。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdbd",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdbe",
      "text": " ** jscc: JavaScript Continuous Compilation",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdbf",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdc0",
      "text": " 実は既に作って公開してある。http://nishio.github.com/jscc/",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdc1",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdc2",
      "text": " <img src=\"http://nishio.github.com/jscc/screenshot.png\">",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdc3",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdc4",
      "text": " ファイルを編集するとwatchmedoでGoogle Closure CompilerとLintが実行され、グラフが自動更新される。コンパイルエラーがあれば赤、警告があれば黄色、両方なければ緑になる。僕がJSでコードを書く際には、デュアルモニターの端っこでこれを表示して、普段は注視しないでコードを書いていて、赤や黄色に変わると視野の端にあっても色が変わったことに気づくのでエラーログを確認する、というやり方をしている。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdc5",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdc6",
      "text": " ** 問題点",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdc7",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdc8",
      "text": " - インストール周りがひどい。プロジェクトのルートディレクトリに3つシンボリックリンクを作るだけ。しかもそのうち1つはMakefile。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdc9",
      "text": " - コンパイル結果とLintの結果がプロジェクトルートのcompile.logとlint.logに作られる。コンパイラが多重起動しないためのロックファイルもそこに作られる。プロジェクトを汚しまくりなのでこれは別のところにおいたほうがいいと思う。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdca",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdcb",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdcc",
      "text": " - watch周り",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdcd",
      "text": " -- Windows(cygwin)だとwatchmedoがうまく動かないという報告があった。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdce",
      "text": " -- 現状、watchしているプロセスを殺す方法がない。どうするのがよいか？",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdcf",
      "text": " -- watchmedoを使っていると、git statusやgit add -pでコンパイルが始まってしまう謎",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdd0",
      "text": " -- →いっそwatchmedoを使うのは辞めて、Pythonでファイルの更新日時を定期ポーリングするコードを書いた方がよい？",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdd1",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdd2",
      "text": " - クライアントツール",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdd3",
      "text": " -- Makefileとbuild.shとclient.pyをカレントディレクトリにln -sする設計になっているけど、そもそもプロジェクトの内容に応じて書き換える必要があるのはMakefileだけだから残りの2つはjscc/client/に置きっぱなしでいいんじゃない？compile.logとlint.logもjsccの中に作ったほうがいいんじゃない？なるべく汚さない方針で。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdd4",
      "text": " -- flymakeと統合？エラーの行をemacs上で表示したら幸せになれる？",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdd5",
      "text": " -- 将来的に複数のプロジェクトで複数人で使う際には識別のためにプロジェクト名とユーザ名を送る必要がある。今は一人で使う想定でシングルユーザ・シングルプロジェクト",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdd6",
      "text": " -- growlnotifyは必須ではないので(僕は使うけど)インストールされてるかどうか判断して使うようにしたいがどう書く？",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdd7",
      "text": " ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdd8",
      "text": " - 可視化サーバ",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdd9",
      "text": " -- 今はシングルユーザ・シングルプロジェクトなのでトップページでそのままグラフが見えるけど、将来的に複数のプロジェクトと複数人で使う場合にはトップページはプロジェクト一覧にして /project_name/nishio/ みたいなURLで見るようにするべき",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdda",
      "text": " -- いま過去の履歴を保存していない。sqliteかなんかで保存しておく。最新n件を取るAPIが必要。",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbddb",
      "text": " -- 今はJSで1秒1回サーバにポーリングしているが、タイムアウトしてないせいでサーバが止まっているとリクエストが溜まってしまう？どうするのがよい？Comet？",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbddc",
      "text": " </body>",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbddd",
      "text": "",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dbdde",
      "text": "[はてなダイアリー 2012-05-01 https://nishiohirokazu.hatenadiary.org/archive/2012/05/01]",
      "created": 1335798000,
      "updated": 1335798000,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}