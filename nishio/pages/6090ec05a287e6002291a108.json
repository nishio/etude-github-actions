{
  "id": "6090ec05a287e6002291a108",
  "title": "Hatena2010-09-23",
  "created": 1285167600,
  "updated": 1285167600,
  "lines": [
    {
      "id": "6090ec29aff09e00003d7527",
      "text": "Hatena2010-09-23",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7528",
      "text": "code:hatena",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7529",
      "text": " <body>",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d752a",
      "text": " *1285226258*SPYSEEの会社に遊びに行ってきました",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d752b",
      "text": " 先週の金曜日、id:amachangの新しい会社(オーマ株式会社)に遊びに行ってきました。",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d752c",
      "text": " ",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d752d",
      "text": " f:id:nishiohirokazu:20100917182652j:image",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d752e",
      "text": " ",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d752f",
      "text": " 正直なところ、最初に話を聞いたときには誰か悪い人に騙されてるんじゃないかとか思ったけども、中を見てみたらアットホームな雰囲気のベンチャー企業でした。目標が熱い！世界を変えるSPYSEEへ！",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7530",
      "text": " ",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7531",
      "text": " f:id:nishiohirokazu:20100917190111j:image",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7532",
      "text": " ",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7533",
      "text": " 受託抜きできちんと黒字化してるところや、良好な産学連携関係を構築しているところも考えると、世の中のベンチャー企業の中ではかくだんに「いい会社」の部類に入ると思いました。amachangが入ることでどんな化け方をするのか、今後が楽しみです。",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7534",
      "text": " ",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7535",
      "text": " <hr>",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7536",
      "text": " ",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7537",
      "text": " ちなみにamachangが弊社を退社した日の僕のエントリー「<a href='http://d.hatena.ne.jp/nishiohirokazu/20100915/1284566744'>SPYSEEのトップに美人画像が出るようになっている！</a>」は伏線だったのですが、転職先予想トトカルチョ #amatoto には影響を与えなかったようでした(苦笑) id:yukobaの「@yukoba なるほど！もっと燃料を投下しよー！僕は\"amachang 転職先の会社名\"でGoogleで最初に出るページに、いたずらしてるんだけど直されちゃう。かわいいのにぃ～～」でいたずらされたかわいいamachang画像はこちら> http://b.hatena.ne.jp/entry/spysee.jp/amachang/1013724/",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7538",
      "text": " ",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7539",
      "text": " *1285264330*多重継承まとめ",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d753a",
      "text": " JavaはInterfaceという特殊な実装を持たないものだけ多重継承できる。実装を多重継承する仕組みはない。同じシグネチャのメソッドを持っている2つのInterfaceを継承した際にエラーにならないので衝突に気付けない。",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d753b",
      "text": " ",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d753c",
      "text": " Pythonはクラスを多重継承できる。同じ名前のメソッドを持っている2つのクラスを継承した際にどのメソッドが呼ばれるかはC3線形化を使って決定される。see: <a href='http://192.220.96.201/dylan/linearization-oopsla96.html'>A Monotonic Superclass Linearization for Dylan</a>",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d753d",
      "text": " ",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d753e",
      "text": " RubyはModuleという「なにかを継承することはできなくてインスタンス化もできないもの」だけは多重継承できる。Moduleが別のものを継承できないためメソッドの解決は素朴な探索でOK(include A include BしたらBでの実装が優先)",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d753f",
      "text": " ",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7540",
      "text": " SmalltalkにはTraitという実装の多重継承ができるしくみがある。同じシグネチャのメソッドを持っている2つのTraitを継承した際に、片方を隠して衝突を回避したり、名前を変更して両方呼べるようにしたりできる。 see: Traits: Composable Units of Behavior",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7541",
      "text": " ",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7542",
      "text": " ScalaのTraitは名前はTraitだがSmalltalkのとは大きく違う。同じシグネチャのメソッドを持っている2つのTraitを継承した際に、片方を隠して衝突を回避したり、名前を変更して両方呼べるようにしたりすることができない。メソッドにoverride修飾子がついていない場合はエラー、付いている場合はPythonと同じように直列化を使ってどのメソッドを呼ぶか決定する。",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7543",
      "text": " ",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7544",
      "text": " Perl6からRoleが入る。これはSmalltalkのTraitとほぼ同じもの。see http://publius-ovidius.livejournal.com/314737.html",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7545",
      "text": " ",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7546",
      "text": " PHPはJava風の単一継承、インターフェイスとかも持っている。PHP5.4からTraitが入る。これはPerlのRoleとほぼ同じもの。<a href='http://wiki.php.net/rfc/traits'>PHP: rfc:traits [PHP Wiki]</a>",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7547",
      "text": " ",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7548",
      "text": " ** Acknowledgement",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7549",
      "text": " Python以外の知識は id:sumim, id:moriyoshi, id:kmizushima に教えていただきました。ありがとうございます！",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d754a",
      "text": " ",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d754b",
      "text": " ** Q&A",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d754c",
      "text": " >>",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d754d",
      "text": " id:yujiorama C++/D が無いのはなんでだろう。既知だからか",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d754e",
      "text": " <<",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d754f",
      "text": " C++, D, C#, OCaml, Eiffel, その他数多くのオブジェクト指向言語の記述が抜けているのは、たまたま話題に上がらなかったか、簡潔に整理できなかったか、書いても面白く無かったからです。 You can contribute!",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7550",
      "text": " </body>",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7551",
      "text": "",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7552",
      "text": "[はてなダイアリー 2010-09-23 https://nishiohirokazu.hatenadiary.org/archive/2010/09/23]",
      "created": 1285167600,
      "updated": 1285167600,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}