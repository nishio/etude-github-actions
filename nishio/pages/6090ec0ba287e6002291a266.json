{
  "id": "6090ec0ba287e6002291a266",
  "title": "Hatena2012-09-27",
  "created": 1348671600,
  "updated": 1348671600,
  "lines": [
    {
      "id": "6090ec2faff09e00003dd0cc",
      "text": "Hatena2012-09-27",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0cd",
      "text": "code:hatena",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0ce",
      "text": " <body>",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0cf",
      "text": " *1348675384*SamurAI Codingのゲームルールを勝手に解説",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0d0",
      "text": " SamurAI Codingは情報処理学会主催で行われる国際プログラミングコンテスト。9月28日にシンガポール予選、10月11日にシリコンバレー予選、24日に日本予選が行われる。 公式サイト: https://samuraicoding.org/",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0d1",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0d2",
      "text": " [f:id:nishiohirokazu:20120927021251p:image]",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0d3",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0d4",
      "text": " ゲームは簡潔に言えば「サムライと犬を動かして陣取りをするゲーム」で、その動かすアルゴリズムをGunbai Scriptっていうこのゲーム専用の言語で実装して提出する。だから「慣れた言語やライブラリが使えるかどうか」っていう点での有利不利はなく、同じスタートラインから「理解し、よいプログラムを作る」という力を競い合うことができる。",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0d5",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0d6",
      "text": " ちなみに10月22日がソースコードの提出期限。24日は対戦が行われる日なので勘違いしないように。",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0d7",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0d8",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0d9",
      "text": " ** ゲームルール",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0da",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0db",
      "text": " ここではざっくりとルールの概要を解説する。ざっくりとしか書かないので細かいことはオフィシャルのPDFを参考にすること。",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0dc",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0dd",
      "text": " これはサムライと犬を操って、マップを歩きまわって陣取りをするゲームだ。サムライが通ったマスは自分の色の足跡がつき、自分の陣地になる。この足あとで囲みを作るとその囲みの中も自分の陣地になる。基本的には一定ラウンド経過後にこの陣地が一番広かった人が勝ちになる。",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0de",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0df",
      "text": " ただし、それだけじゃ考える面白みがないので、細かいルールが付け加えられている。",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0e0",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0e1",
      "text": " - 陣地がマップの端から端までつながったら、即座に勝利",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0e2",
      "text": " - サムライは犬が怖くて、犬に隣接するマスに入れない",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0e3",
      "text": " - マップの端にある鳥居に入るとワープする",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0e4",
      "text": " - 4体のキャラクターが一直線に並んだら、場所が交換される(syzygy)",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0e5",
      "text": " - 自分の陣地の周りを他人の陣地が取り囲んだら、「囲みの中も陣地になる」効果で陣地を取られてしまう(siege)",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0e6",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0e7",
      "text": " オフィシャルのPDFにはスクリーンショットや図を使ってしっかり解説してある。ここには詳細な発動条件とかは書かないのでオフィシャルを参照。",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0e8",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0e9",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0ea",
      "text": " ** 試してみる",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0eb",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0ec",
      "text": " ログインして「Trial Games」から試すことができる。予想をいい方向に裏切って、なんとブラウザ上で JavaScript + Canvas で動く！てっきり何かJavaとかで書かれたプログラムをインストールさせられるのかと思っていた。GREEの中の人がだいぶ技術協力しているのかな？",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0ed",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0ee",
      "text": " [f:id:nishiohirokazu:20120927010215p:image]",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0ef",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0f0",
      "text": " 処理系がオープンなのは素晴らしい。勝手に社内プログラミングコンテストとかを開催できる。",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0f1",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0f2",
      "text": " ざっとコードを眺めてみたけども、random命令が普通にMath.random()を叩いているところがちょっと気になった。これだと「プログラムを書いて走らせたら予期しない挙動をした→バグを直した→もう一回実行したら乱数列が違うから同じ局面が再現せずバグがとれたのかどうかわからない！」が起きそうだ。あとUIの更新をスキップして高速に実行したりとか、特定の条件を満たしたらブレークしてそこからステップ実行するとか、局面の情報を流しこんでそこから実行再開とかしたいね。効率の良い開発のためには若干手を入れる必要がありそうだ。",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0f3",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0f4",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0f5",
      "text": " ** Gunbai Script",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0f6",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0f7",
      "text": " Gunbai Scriptは、キャラクタを動かすmove命令や、いろいろな情報を取得するための関数が用意されている、動的型付けのスクリプト言語だ。",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0f8",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0f9",
      "text": " ここの下の方にサンプルコードがいくつも載っているので、ざっと眺めるとつかみやすいかも。 https://samuraicoding.org/rules/",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0fa",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0fb",
      "text": " ifとかwhileとかbreakとかは普通にサポートされてるし、関数も作れるし、加減乗除やその優先順位も普通な感じ、特に習得に苦労する所は無さそう。",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0fc",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0fd",
      "text": " 組み込みのデータ型としては「Array」があって、これは数値からArrayを含む任意の型へのマッピングを表現する。逆に言えばこれしかないので、これを使ってどう工夫するかが問われるかも。",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0fe",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd0ff",
      "text": " 興味深い点は、命令ごとに「コスト」が決まっていること。最近のCPUは高速化のために分岐予測だのキャッシュだの色々積んでいるので、同じ命令でも状況によって実行にかかる時間が変わるようになってしまった。そのせいで「このプログラムは2000msec以内に終わるはずだ」なんて判断ができなくなってしまった。「時間をぎりぎりまで使い切って最良の判断を目指すプログラム」なんてのが書きづらい。Gunbaiスクリプトは命令ごとに掛かるコストが決まっていて、リミットは2000に設定されている。この2000のタイムリミットが来た時点でプログラムの実行は終了され、最後に行ったmove命令が採用される。だから時間ギリギリまで使い切るカリカリチューニングができるわけだ、じゅるり(よだれ)",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd100",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd101",
      "text": " とはいえ「命令ごとにコストが決まっているとか、考えることが多くて大変そう」と思う人もいるかもしれない。心配しなくても、命令の種類がそもそもPDF半ページに収まるくらい少ないし、コストのつき方の種類はもっと少ない。",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd102",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd103",
      "text": " ざっくり説明するとこんな感じ：",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd104",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd105",
      "text": " - 0ステップ: alert(デバッグ出力)、return、ローカル変数の宣言、大部分の情報取得系API",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd106",
      "text": " - 1ステップ: 数値リテラル、Arrayの生成、大部分の文、演算",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd107",
      "text": " - 2ステップ: 乱数",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd108",
      "text": " - 関数呼び出しは、引数の個数×2",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd109",
      "text": " - 4ステップ: get_hexel_owner, get_agent_status",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd10a",
      "text": " ",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd10b",
      "text": " 数値リテラルや加減乗除に1ステップ掛かるのを基準にすると、Arrayが1ステップなのはものすごく安いな。乱数も安い。一方でget_hexel_ownerが4ステップ掛かるから「まず全部の情報を収集して～」的なアプローチは辛いね。マップが20x30だとするとマップの状態を確認するだけで2400ステップ掛かってしまうのでアウト。どこの情報をチェックするべきか、に知恵を絞る必要がありそうだ。",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd10c",
      "text": " </body>",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd10d",
      "text": "",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd10e",
      "text": "[はてなダイアリー 2012-09-27 https://nishiohirokazu.hatenadiary.org/archive/2012/09/27]",
      "created": 1348671600,
      "updated": 1348671600,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}