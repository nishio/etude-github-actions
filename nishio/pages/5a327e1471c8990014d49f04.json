{
  "id": "5a327e1471c8990014d49f04",
  "title": "量子コンピュータのプログラミング",
  "created": 1513258624,
  "updated": 1527147887,
  "lines": [
    {
      "id": "5a327e1471c8990014d49f04",
      "text": "量子コンピュータのプログラミング",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513258624,
      "updated": 1513258626
    },
    {
      "id": "5a90d82baff09e00000aa978",
      "text": "発表資料",
      "userId": "582e63d27c56960011aff09e",
      "created": 1519441964,
      "updated": 1519441967
    },
    {
      "id": "5a90d82eaff09e00000aa97a",
      "text": " [その1 https://www.slideshare.net/nishio/ss-86734296] ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1519441967,
      "updated": 1519442014
    },
    {
      "id": "5a90d835aff09e00000aa97b",
      "text": " [その2 https://www.dropbox.com/s/1iudgckuomizzj5/%E3%82%A4%E3%82%B8%E3%83%B3%E3%82%B0%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B02.pdf?dl=0]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1519441973,
      "updated": 1519442024
    },
    {
      "id": "5a90d82baff09e00000aa979",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1519441964,
      "updated": 1519441964
    },
    {
      "id": "5a327e81aff09e00008e1002",
      "text": "量子ゲート方式の量子コンピュータの話はここではしない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513258626,
      "updated": 1514711560
    },
    {
      "id": "5a48aa08aff09e0000966c1a",
      "text": " 量子アニーリングマシンでのプログラミングにフォーカスする。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514711560,
      "updated": 1514711560
    },
    {
      "id": "5a48aa02aff09e0000966c18",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514711554,
      "updated": 1514711554
    },
    {
      "id": "5a48a7eeaff09e0000d589fc",
      "text": "量子アニーリングについても説明しない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514711022,
      "updated": 1514711557
    },
    {
      "id": "5a48aa04aff09e0000966c19",
      "text": " こちらがとても良くまとまっているので参照: [量子アニーリング（西森秀稔） http://www.stat.phys.titech.ac.jp/~nishimori/QA/q-annealing.html] [cache https://megalodon.jp/2017-0821-2211-57/www.stat.phys.titech.ac.jp/~nishimori/QA/q-annealing.html]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514711557,
      "updated": 1516954678
    },
    {
      "id": "5a48a80caff09e0000d589fd",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514711052,
      "updated": 1514711052
    },
    {
      "id": "5a48a789aff09e0000d589fb",
      "text": "D-waveなどから商用の量子アニーリングマシンが販売されるようになり、今後そのマシンの上で実際のニーズを解決することができるプログラマが必要になる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514710922,
      "updated": 1514711004
    },
    {
      "id": "5a327ee1aff09e00008e1005",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513258721,
      "updated": 1513258721
    },
    {
      "id": "5a327ee0aff09e00008e1004",
      "text": "量子アニーリング方式の量子コンピュータで問題を解くプロセス:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513258721,
      "updated": 1513259643
    },
    {
      "id": "5a327f12aff09e00008e1006",
      "text": "\t二値変数の間の関係を宣言的に記述する(イジングモデル)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513258770,
      "updated": 1513259020
    },
    {
      "id": "5a328025aff09e00008e1009",
      "text": "  この時ハミルトニアンが小さいほど、得たい特徴が大きいように設計する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513259046,
      "updated": 1513259060
    },
    {
      "id": "5a327f2caff09e00008e1008",
      "text": " 量子コンピュータによってそのイジングモデルのハミルトニアンを最小化する解が高確率で得られる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513258796,
      "updated": 1513259037
    },
    {
      "id": "5a32803baff09e00008e100a",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513259067,
      "updated": 1513259067
    },
    {
      "id": "5a327f22aff09e00008e1007",
      "text": "プログラミングという言葉で大部分のプログラマが想像するもの、および実際に大部分のプログラマが業務として書いているプログラムは「命令列を順番に実行する計算機」によって実行される。これを想定して使われてきたCやJavaやPythonなどの言語でのプログラミングをイメージするのではかえって混乱を招く。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513258787,
      "updated": 1514711590
    },
    {
      "id": "5a3280d9aff09e00008e100d",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513259226,
      "updated": 1513259226
    },
    {
      "id": "5a3280d9aff09e00008e100c",
      "text": "近いパラダイムのものをいくつか挙げる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513259226,
      "updated": 1513259534
    },
    {
      "id": "5a3280f7aff09e00008e100e",
      "text": "\tSATソルバ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513259255,
      "updated": 1513259343
    },
    {
      "id": "5a32814eaff09e00008e100f",
      "text": " \t二値変数の間の関係をCNF(Conjunctive normal form, 連言標準形, 乗法標準形)の形で記述する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513259343,
      "updated": 1513259472
    },
    {
      "id": "5a3281d0aff09e00008e1010",
      "text": "  その関係を充足する(=満たされない論理式の個数がゼロである)解をSATソルバが発見する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513259472,
      "updated": 1513259986
    },
    {
      "id": "5a3283d4aff09e00008e101b",
      "text": "  \t「満たされない論理式の個数を最小化する」と考えてもよい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513259988,
      "updated": 1513260044
    },
    {
      "id": "5a328406aff09e00008e101d",
      "text": "    (厳密には、非充足な時に非充足な論理式の個数が最小な解を返すかどうかはソルバによる)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513260038,
      "updated": 1513260053
    },
    {
      "id": "5a3338e5aff09e000039e711",
      "text": "  詳しい説明はここではしない see [SAT/SMTソルバの仕組み https://www.slideshare.net/sakai/satsmt]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513306342,
      "updated": 1513306353
    },
    {
      "id": "5a3281e6aff09e00008e1011",
      "text": " Alloy",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513259494,
      "updated": 1513259510
    },
    {
      "id": "5a3281f6aff09e00008e1012",
      "text": " \tSATソルバのCNF作成を容易にするための高級言語",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513259510,
      "updated": 1513259522
    },
    {
      "id": "5a328202aff09e00008e1013",
      "text": "  Alloy上では「整数」「1つ以上存在する」などの高級な概念として表現されているものがCNFに変換された後SATソルバて解かれる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513259522,
      "updated": 1513259624
    },
    {
      "id": "5a328268aff09e00008e1014",
      "text": " ChainerなどのDeep Learningフレームワークの内部構造(計算グラフ)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513259624,
      "updated": 1513259805
    },
    {
      "id": "5a328299aff09e00008e1015",
      "text": " \t実数値変数の間の関係を、微分可能な関数で記述する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513259673,
      "updated": 1513259704
    },
    {
      "id": "5a3282b8aff09e00008e1016",
      "text": "   関係はDAG(Directed acyclic graph、有向非巡回グラフ)構造である必要がある。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513259704,
      "updated": 1513259763
    },
    {
      "id": "5a32803eaff09e00008e100b",
      "text": "  最小化したい「コスト関数」をこれらの変数と学習データの組み合わせから得られる微分可能な関数で表現する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513259071,
      "updated": 1513259853
    },
    {
      "id": "5a32834daff09e00008e1018",
      "text": "  Deep Learningフレームワークが自動微分をし、コスト関数の勾配を計算する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513259853,
      "updated": 1513259889
    },
    {
      "id": "5a328371aff09e00008e1019",
      "text": "  各変数を勾配方向に更新する(厳密に言えばもっと工夫がある。see [勾配降下法の最適化アルゴリズム https://www.slideshare.net/nishio/ss-66840545])",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513259889,
      "updated": 1513259961
    },
    {
      "id": "5a328327aff09e00008e1017",
      "text": "\t\tこれによってコスト関数を最小化する変数の値が得られる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513259816,
      "updated": 1513260069
    },
    {
      "id": "5a3288bfaff09e00008e101e",
      "text": " Prolog",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513261247,
      "updated": 1513261251
    },
    {
      "id": "5a3288c3aff09e00008e101f",
      "text": " \t宣言的なプログラミング言語と言えばよく言及される古典中の古典",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513261251,
      "updated": 1513261263
    },
    {
      "id": "5a3288cfaff09e00008e1020",
      "text": "  変数の間の関係を一階述語論理で表現し、条件を満たす解をバックトラックによって求める",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513261263,
      "updated": 1513261423
    },
    {
      "id": "5a32896eaff09e00008e1021",
      "text": "  バックトラックで解くことを想定し、それを制御するための「カット命令」を使うため、ここで考えている「量子コンピュータ上でのプログラミング」とは実はあんまりフィットしない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513261423,
      "updated": 1513261696
    },
    {
      "id": "5a328a83aff09e00008e1023",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513261699,
      "updated": 1513261699
    },
    {
      "id": "5a328a81aff09e00008e1022",
      "text": "イジングモデルとは",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513261697,
      "updated": 1513263902
    },
    {
      "id": "5a32931eaff09e00008e1024",
      "text": "\t量子コンピュータのプログラムを書くことはイジングモデルを作ることだと分かった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513263902,
      "updated": 1513263917
    },
    {
      "id": "5a32932daff09e00008e1025",
      "text": " それは何か？どうやって作るのか？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513263918,
      "updated": 1513263927
    },
    {
      "id": "5a3293dcaff09e00008e1027",
      "text": " イジングモデル",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513264092,
      "updated": 1513264096
    },
    {
      "id": "5a329337aff09e00008e1026",
      "text": " [$ \\mathcal{H} = -\\sum_{(ij)\\in E} J_{ij} \\sigma_i^z \\sigma_j^z - \\sum_{i\\in V} h_i \\sigma_i^z ]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513263927,
      "updated": 1513264089
    },
    {
      "id": "5a3283c1aff09e00008e101a",
      "text": "\t\tここで [$ \\sigma_i^z ] は二値の変数",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513259970,
      "updated": 1514555498
    },
    {
      "id": "5a46486aaff09e0000bed4ed",
      "text": "   肩のzはz軸方向のスピンという意味で、この先の議論でz以外のものは出てこないので無視していい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514555498,
      "updated": 1514711687
    },
    {
      "id": "5a329448aff09e00008e102a",
      "text": "   グラフの頂点と1対1対応している",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513264200,
      "updated": 1513264212
    },
    {
      "id": "5a55a8f1aff09e00005510fc",
      "text": "   重要ではないのでこう書いてもよい  [$ \\mathcal{H} = -\\sum_{(ij)\\in E} J_{ij} x_i x_j - \\sum_{i\\in V} h_i x_i ]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515563249,
      "updated": 1515563275
    },
    {
      "id": "5a329425aff09e00008e1029",
      "text": "  Vがグラフの頂点、Eはグラフの辺",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513264165,
      "updated": 1513264218
    },
    {
      "id": "5a32945faff09e00008e102b",
      "text": "   各頂点ごとの重みhと各辺ごとの重みJを掛けて足し合わせた形",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513264223,
      "updated": 1514711864
    },
    {
      "id": "5a329480aff09e00008e102c",
      "text": "\t\tHはハミルトニアン",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513264257,
      "updated": 1513264428
    },
    {
      "id": "5a32952baff09e00008e102d",
      "text": "  \tイジングモデルのスピンの状態に対応したエネルギー",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513264428,
      "updated": 1513264461
    },
    {
      "id": "5a32954daff09e00008e102e",
      "text": "   このエネルギーが小さい解を量子アニーリングマシンは高い確率で返す",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513264462,
      "updated": 1514711762
    },
    {
      "id": "5a48aae1aff09e0000966c1b",
      "text": "   \t物理的なビー玉が位置エネルギーの低い「低い所」に転がるのと同じ構図",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514711778,
      "updated": 1514711798
    },
    {
      "id": "5a329579aff09e00008e102f",
      "text": "   ハミルトニアンが最適化問題におけるコスト関数に相当するように設計して、量子アニーリングマシンに投げれば解が得られる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513264505,
      "updated": 1514711831
    },
    {
      "id": "5a3293ecaff09e00008e1028",
      "text": "\t\t2つ目の項を「磁場」と呼ぶけどこれはプログラムをする上で不要な背景知識。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513264109,
      "updated": 1513264674
    },
    {
      "id": "5a329621aff09e00008e1031",
      "text": "  \t抽象化されて元々何のモデルだったか関係なくなっているが、元々イジングモデルは強磁性体の模型であって、変数が-1と+1の値を取るのはN極とS極って意味で、特定の頂点にN極を近づければS極がこっちを向くような圧力を掛けることになるよね、そういうこと。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513264674,
      "updated": 1513264848
    },
    {
      "id": "5a3296d0aff09e00008e1033",
      "text": "   強磁性体の模型としては頂点をグリッド上に並べて隣接する頂点との間に相互作用(=辺)がある、という形だったが、上記数式の定義でグリッドではなくグラフになってることからわかるようにそこは捨象済み。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513264848,
      "updated": 1513264926
    },
    {
      "id": "5a32971eaff09e00008e1034",
      "text": "   巡回セールスマン問題のイジングモデルでの定式化で、時間と空間の二次元グリッドを描くため、二次元イジングモデルを知っていて量子コンピュータのイジングモデルを知らない人(過去の僕)は相互関係のエッジがどう貼られているかを誤解して混乱する。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513264926,
      "updated": 1513265248
    },
    {
      "id": "5a329973aff09e00008e1035",
      "text": "   ちなみに2次元のボルツマンマシンは画像を記憶して想起することができる。これは2次元のイジングモデルとほぼ同じもの。全結合のボルツマンマシンは指数オーダーの学習時間がかかるため二部グラフに制限したRBM(Restricted Boltzmann machine) がDeep Learningの文脈で良くもちいられる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513265523,
      "updated": 1513265736
    },
    {
      "id": "5a329a72aff09e00008e1038",
      "text": "    なお、ニューラルネットの学習は一部の頂点の値が教師データとして与えられて辺の重みが更新されるのに対し、量子アニーリングは辺の重みを与えて頂点の値を求めるものであることに注意。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513265778,
      "updated": 1513265861
    },
    {
      "id": "5a329e2aaff09e00008e103a",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513266730,
      "updated": 1513266730
    },
    {
      "id": "5a329ac4aff09e00008e1039",
      "text": "\tこれくらいの知識があれば巡回セールスマン問題のイジングモデル化ができる？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513265861,
      "updated": 1513267271
    },
    {
      "id": "5a329e45aff09e00008e103b",
      "text": " \t巡回セールスマン問題のコツ： 「あるステップtに都市iにいるかどうか」の二値変数として扱う",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513266757,
      "updated": 1514567674
    },
    {
      "id": "5a329e7faff09e00008e103c",
      "text": "  ある都市から次の時刻の別の都市への辺に距離の重みを乗せる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513266815,
      "updated": 1513266876
    },
    {
      "id": "5a329ebbaff09e00008e103d",
      "text": "  それだけだと「移動しない」という自明な解に落ちるので「各都市に1回だけ存在する」という制約を入れたい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513266876,
      "updated": 1513267012
    },
    {
      "id": "5a46783aaff09e0000775105",
      "text": "  一般論として「N個の頂点 [$ \\sigma_i (0 \\le i < N)] のいずれか1つのみが1、残りが0」という制約を表現したい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514567738,
      "updated": 1514567864
    },
    {
      "id": "5a46785baff09e0000775106",
      "text": "  \tこの表現は「N個全部足したら1」([$ \\sum_i \\sigma_i  = 1])と書き換えられる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514567772,
      "updated": 1514567890
    },
    {
      "id": "5a467870aff09e0000775107",
      "text": "   さらに[$ (1 - \\sum_i \\sigma_i)  = 0] となる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514567792,
      "updated": 1514567918
    },
    {
      "id": "5a4678eeaff09e0000775108",
      "text": "    以前はここで「頂点の値の足し算とかどうやるのだ？」と思っていた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514567918,
      "updated": 1514567950
    },
    {
      "id": "5a467901aff09e0000775109",
      "text": "   両辺を二乗してから展開する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514567938,
      "updated": 1514567966
    },
    {
      "id": "5a46791eaff09e000077510a",
      "text": "   [$ (1 - \\sum_i \\sigma_i)^2  = 1 - 2 \\sum_i \\sigma_i + (\\sum_i \\sigma_i) ^2 = 1 - 2 \\sum_i \\sigma_i + \\sum_i \\sum_j  \\sigma_i\\sigma_j]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514567966,
      "updated": 1514568202
    },
    {
      "id": "5a329f44aff09e00008e103e",
      "text": "  \t展開してしまえば普通のハミルトニアンになるというわけ。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1513267012,
      "updated": 1514568221
    },
    {
      "id": "5a48a84daff09e0000d58a08",
      "text": "   ハミルトニアンの二値変数を{-1, +1}とするか{0, 1}とするかは流儀がある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514711118,
      "updated": 1514711450
    },
    {
      "id": "5a48a99daff09e0000d58a15",
      "text": "    {0, 1}のタイプを QUBO: Quadratic unconstrained binary optimization と呼ぶことがある。[Wikipedia https://en.wikipedia.org/wiki/Quadratic_unconstrained_binary_optimization]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514711454,
      "updated": 1514711454
    },
    {
      "id": "5a48a99faff09e0000d58a16",
      "text": "    このQはQuantumではない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514711456,
      "updated": 1514711456
    },
    {
      "id": "5a48a999aff09e0000d58a12",
      "text": "    どちらで記述してももう片方の記述に容易に変換できるから大丈夫。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514711450,
      "updated": 1514711461
    },
    {
      "id": "5a48a9a5aff09e0000d58a17",
      "text": "     ref.  [アニーリングマシンとイジング模型 – Quantum Computing Information Site https://quantum.fixstars.com/introduction_to_quantum_computer/quantum_annealing/ising_model/]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514711461,
      "updated": 1514711461
    },
    {
      "id": "5a5520d4aff09e00000a9207",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515528405,
      "updated": 1515528405
    },
    {
      "id": "5a5520d4aff09e00000a9208",
      "text": "\tイジング模型で表現した後グラフマッピングの問題がある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515528405,
      "updated": 1515528430
    },
    {
      "id": "5a5520e6aff09e00000a9209",
      "text": "  [グラフマッピング – Quantum Computing Information Site https://quantum.fixstars.com/introduction_to_quantum_computer/quantum_annealing/programming/graph_mapping/]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515528422,
      "updated": 1515528424
    },
    {
      "id": "5a48a899aff09e0000d58a09",
      "text": " これは実機では行列Jのうち、非0にできないところがあるせい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514711193,
      "updated": 1515528574
    },
    {
      "id": "5a5520f1aff09e00000a920b",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515528433,
      "updated": 1515528433
    },
    {
      "id": "5a5520f1aff09e00000a920a",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515528433,
      "updated": 1515528433
    },
    {
      "id": "5a48a90caff09e0000d58a11",
      "text": "参考 ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514711308,
      "updated": 1514711378
    },
    {
      "id": "5a46773aaff09e00007750fe",
      "text": " 色々なNP問題のイジングモデルでの表現方法",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514567483,
      "updated": 1514567504
    },
    {
      "id": "5a467743aff09e00007750ff",
      "text": "  [Ising formulations of many NP problems https://arxiv.org/abs/1302.5843]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514567491,
      "updated": 1514568259
    },
    {
      "id": "5a48a9adaff09e0000d58a18",
      "text": " \tまさに知りたかったことだ！",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514711469,
      "updated": 1514711469
    },
    {
      "id": "5a46777aaff09e0000775101",
      "text": "  今後ここにこの論文で紹介されている問題を1つずつ書いていこう",
      "userId": "582e63d27c56960011aff09e",
      "created": 1514567547,
      "updated": 1515528745
    },
    {
      "id": "5a552223aff09e00000a920c",
      "text": "  [イジングプログラミング同好会]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515528740,
      "updated": 1515528740
    },
    {
      "id": "5a54bbe0aff09e000099c214",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515502561,
      "updated": 1515502561
    },
    {
      "id": "5a54bbeaaff09e000099c215",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1515502570,
      "updated": 1515502570
    }
  ]
}