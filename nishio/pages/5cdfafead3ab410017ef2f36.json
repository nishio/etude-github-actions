{
  "id": "5cdfafead3ab410017ef2f36",
  "title": "useRef",
  "created": 1558163437,
  "updated": 1558163440,
  "lines": [
    {
      "id": "5cdfafead3ab410017ef2f36",
      "text": "useRef",
      "userId": "582e63d27c56960011aff09e",
      "created": 1558163437,
      "updated": 1558163437
    },
    {
      "id": "5cdfafecaff09e00007d70f0",
      "text": ">This works because useRef() creates a plain JavaScript object. The only difference between useRef() and creating a {current: ...} object yourself is that useRef will give you the same ref object on every render.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1558163437,
      "updated": 1558163437
    },
    {
      "id": "5cdfafedaff09e00007d70f2",
      "text": "> ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1558163437,
      "updated": 1558163437
    },
    {
      "id": "5cdfafedaff09e00007d70f3",
      "text": "> Keep in mind that useRef doesn’t notify you when its content changes. Mutating the .current property doesn’t cause a re-render. If you want to run some code when React attaches or detaches a ref to a DOM node, you may want to use a callback ref instead.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1558163437,
      "updated": 1558163437
    },
    {
      "id": "5cdfafedaff09e00007d70f4",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1558163437,
      "updated": 1558163440
    },
    {
      "id": "5cdfafedaff09e00007d70f1",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1558163437,
      "updated": 1558163437
    }
  ]
}