{
  "id": "6090ec0ea287e6002291a307",
  "title": "Hatena2014-11-07",
  "created": 1415286000,
  "updated": 1415286000,
  "lines": [
    {
      "id": "6090ec31aff09e00003df831",
      "text": "Hatena2014-11-07",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df832",
      "text": "code:hatena",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df833",
      "text": " <body>",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df834",
      "text": " *1415286729*「文字列を文字の列とみなす単純化」ってどういうこと？解説編",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df835",
      "text": " 先日 @shyouhei さんのTweetに反応して文字列が文字の列かどうかが言語によって異なるという話をTweetしました。",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df836",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df837",
      "text": " shyouheiさんの投稿:",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df838",
      "text": " >>",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df839",
      "text": " PythonはどうかしらんがRubyの設計思想は「世の中はシンプルじゃない」だからな。文字列を文字の列とみなす発想その物がすでにRubyからすると過度に世界を単純化しすぎている。",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df83a",
      "text": " <<",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df83b",
      "text": " https://twitter.com/shyouhei/status/528106973565165568",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df83c",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df83d",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df83e",
      "text": " >>",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df83f",
      "text": " もうちょっと言っておくと数値計算で勝ち目のないRubyは文字列処理にめっちゃ注力してるんで。文字列処理こそがRubyの主戦場。そこでRubyが文字列をあえてカタマリで扱ってることにはそれなりの理由というものがある。つまり分解しようとするほうが困りごとが増える。IVSとか。",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df840",
      "text": " <<",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df841",
      "text": " https://twitter.com/shyouhei/status/528108890152386560",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df842",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df843",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df844",
      "text": " 僕の投稿:",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df845",
      "text": " >>",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df846",
      "text": " 世の中にはJavaやPythonのような文字列を文字の列と考えてる言語と、そうではないRubyのような言語とがある、言語によって文字列の設計自体が違うんだ、ということはもっと知られてよいと思う。拙著コーディングを支える技術では五つの言語で文字列の設計を比較してる(ad)",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df847",
      "text": " <<",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df848",
      "text": " https://twitter.com/nishio/status/529105331511492608",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df849",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df84a",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df84b",
      "text": " これに対して「えっ、文字列って文字の列じゃないの？！」という反応がいくつかあったようなので、補足説明しておきます。",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df84c",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df84d",
      "text": " 文字列に対する一番素朴な考え方は「8bit(0～255)の値の配列」というものです。これを「文字の列」と考える人もいるでしょう。しかし、その考え方だと、ひらがなの\"あ\"は文字ではないことになります。しかたがないので、複数文字を特定の並びにした時には\"あ\"と解釈するという決め事をしたりしました。でも、これは不便でした。",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df84e",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df84f",
      "text": " そこで、ひらがなとか漢字とかも1文字だと考え、それぞれに16bitの数値を割り振ろうと考えた人たちがいました。そうやって出来たのがUnicodeです。この方法なら「文字列は(文字=16bit)の列だ」とシンプルになります。PythonもJavaも文字列を文字の列として扱います。なので1文字取り出したりするのがとても簡単です。めでたしめでたし。",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df850",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df851",
      "text": " ところが残念ながら世界はそんなにシンプルではなかったのです。「そもそも16bitの6万個程度では漢字を全部表現するのに足りないよね」「異体字はどうすんの」「\"が\"は単体で1文字なのか、\"か\"に濁点が付いているのか」「携帯のメール本文に顔文字が入れられるけど、これも文字だよね」「顔文字の顔の色の選択肢に黒がないのは差別だ！」などなどいろいろな問題が噴出しました。",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df852",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df853",
      "text": " Rubyは早々にUnicode路線に見切りをつけて「8bitの列に、それがどういう符号化の方式かの情報をセットにしたもの」を文字列だと定義する独自路線を取りました。筆者はこの設計の違いが影響するような仕事をしたことがないのでよくわかりませんが、Rubyだとなんか色々楽になるらしいです。",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df854",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df855",
      "text": " 拙著「<a href=\"http://www.amazon.co.jp/gp/product/477415654X/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=477415654X&linkCode=as2&tag=nishiohirokaz-22\">コーディングを支える技術</a>」では、p.150から「文字とはなにか」という話が始まり、このあたりの話をもう少し詳しく書いてから5種類の言語で文字列の設計がどう異なっているかを解説しています。",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df856",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df857",
      "text": " ** 追記",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df858",
      "text": " こういうのどこで知るの？という疑問があるようです。どこで知ったかは忘れました。るびまかな？でも、少なくともマニュアルには書いてあるはずだよね、と思ったので調べてみました。",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df859",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df85a",
      "text": " Javaはこう書いています。UTF-16を使って、16bitで収まらない文字についてはサロゲートペアを使うとのことです。",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df85b",
      "text": " >>",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df85c",
      "text": " A String represents a string in the UTF-16 format in which supplementary characters are represented by surrogate pairs",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df85d",
      "text": " <<",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df85e",
      "text": " http://docs.oracle.com/javase/7/docs/api/java/lang/String.html",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df85f",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df860",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df861",
      "text": " PythonはUnicode code pointの列だとしか書いていません。ちょっと不親切です。",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df862",
      "text": " >>",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df863",
      "text": " Strings are immutable sequences of Unicode code points.",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df864",
      "text": " <<",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df865",
      "text": " https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df866",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df867",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df868",
      "text": " これは、大昔（2001年リリースのPython2.2）から16bitと32bitをコンパイルオプションで選べる仕組みになっているからです。",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df869",
      "text": " >>",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df86a",
      "text": " Python 2.2 will allow the 4-byte implementation as a build-time option. Users can choose whether they care about wide characters or prefer to preserve memory.",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df86b",
      "text": " <<",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df86c",
      "text": " http://legacy.python.org/dev/peps/pep-0261/",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df86d",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df86e",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df86f",
      "text": " 一方Rubyはbytesの列だ、と書いています。",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df870",
      "text": " >>",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df871",
      "text": " A String object holds and manipulates an arbitrary sequence of bytes, typically representing characters.",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df872",
      "text": " <<",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df873",
      "text": " http://www.ruby-doc.org/core-2.1.4/String.html",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df874",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df875",
      "text": " ** 追記",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df876",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df877",
      "text": " 補足頂きました。",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df878",
      "text": " >>",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df879",
      "text": " ちょっと目を離した隙に @nishio さんが俺の投稿をマクラにして書籍のステマをしていたようだが、声を大にして言いたいのはそもそもUnicode文字列は定義から言って文字の列ではない。Unicodeには「非字」が含まれているからだ。 http://www.unicode.org/faq/private_use.html#noncharacters …",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df87a",
      "text": " <<",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df87b",
      "text": " https://twitter.com/shyouhei/status/530601364225679360",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df87c",
      "text": " ",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df87d",
      "text": " 詳しい解説をトラックバック頂きました。 http://d.hatena.ne.jp/nurse/20141107#1415355181",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df87e",
      "text": " </body>",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df87f",
      "text": " <comments>",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df880",
      "text": " <comment>",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df881",
      "text": " <username>きんた</username>",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df882",
      "text": " <body>「文字列を文字の列とみなす単純化」の話題凄く面白かったです。<br>無制限に何かを利用できない制約があって、制約の上でどの様に扱うかの問題が<br>宗教論争的な様相を帯びてうんぬんな感じです。<br><br>意味を持つ文字列塊＋装飾的表現を含めた視認するための情報（画像データ）を作り出す文字列塊<br>こんな感じで保持すれば良い気がします。<br><br>全ては現実的制約との折り合いで決まっていくのでしょうけど。</body>",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df883",
      "text": " <timestamp>1415413156</timestamp>",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df884",
      "text": " </comment>",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df885",
      "text": " </comments>",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df886",
      "text": "",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec31aff09e00003df887",
      "text": "[はてなダイアリー 2014-11-07 https://nishiohirokazu.hatenadiary.org/archive/2014/11/07]",
      "created": 1415286000,
      "updated": 1415286000,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}