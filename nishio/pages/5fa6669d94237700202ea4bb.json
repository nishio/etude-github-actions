{
  "id": "5fa6669d94237700202ea4bb",
  "title": "keyence2020 d",
  "created": 1604740765,
  "updated": 1609817503,
  "lines": [
    {
      "id": "5fa6669d94237700202ea4bb",
      "text": "keyence2020 d",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6669daff09e0000b2e45b",
      "text": "from [競技プログラミングで解法を思いつくための典型的な考え方]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1609670090
    },
    {
      "id": "5fa6669daff09e0000b2e45c",
      "text": "keyence2020_d",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6669daff09e0000b2e45d",
      "text": "https://atcoder.jp/contests/keyence2020/tasks/keyence2020_d",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6669daff09e0000b2e45e",
      "text": " 考えたこと",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6669daff09e0000b2e45f",
      "text": " 　N=18",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6669daff09e0000b2e460",
      "text": " 　操作は無限に繰り返せるので、まず「操作を繰り返すことで到達可能な集合」を考える？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6669daff09e0000b2e461",
      "text": " 　　必要最小回数も要求されてるから微妙？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6669daff09e0000b2e462",
      "text": " 　互換を繰り返して任意の順番にできる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6669daff09e0000b2e463",
      "text": " 　元の位置から奇数離れてる場合には裏返る",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6669daff09e0000b2e464",
      "text": " 　2^18は10^6よりは小さいな、18掛けても計算可能な範囲かな",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6669daff09e0000b2e465",
      "text": " 　　いや順列だから18!か、それは無理そう",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6669daff09e0000b2e466",
      "text": " 　1枚目と2枚目が決まった時点で制約を満たしてなかったら以降で満たすことはない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6669daff09e0000b2e467",
      "text": " 　　でもこれで枝刈りしながら探索するのは、全てが同じ値であるようなケースで全探索になるから無理だな",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6669daff09e0000b2e468",
      "text": " 　　こういうケースは最小値を求めるとすぐ求まりそう",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6669daff09e0000b2e469",
      "text": " 公式解説",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6669daff09e0000b2e46a",
      "text": " 　[bit DP]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6669daff09e0000b2e46b",
      "text": " 　具体的なことがよくわからない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6669daff09e0000b2e46c",
      "text": " https://www.hamayanhamayan.com/entry/2020/01/18/233933",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6669daff09e0000b2e46d",
      "text": "　　>既に整列済みの集合がmskで、最後の値がlstであるときの操作の最小値",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6669daff09e0000b2e46e",
      "text": "　　使用済みの値の集合は2^Nなのでこれをbitで表現する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6669daff09e0000b2e46f",
      "text": "　　それだけでは「単調増加」を保ちながら追加できるかわからないので、最後のカードも保持する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5ff3dd9baff09e00002647bd",
      "text": "　　O(N 2^N)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609817500,
      "updated": 1609817503
    },
    {
      "id": "5fa6669daff09e0000b2e470",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604740765,
      "updated": 1604740765
    },
    {
      "id": "5fa6ec00aff09e0000ef5ee5",
      "text": "[https://gyazo.com/227ef044f17cd3088465d5c3121bc561]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604774913,
      "updated": 1604774914
    },
    {
      "id": "5fa6ec02aff09e0000ef5ee7",
      "text": "　境界部分より手前に関して[操作の順序は関係ない]ことを使う",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604774914,
      "updated": 1604774978
    },
    {
      "id": "5fa6ec02aff09e0000ef5ee6",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604774914,
      "updated": 1604774914
    }
  ]
}