{
  "id": "6090ec0aa287e6002291a250",
  "title": "Hatena2012-07-14",
  "created": 1342191600,
  "updated": 1342191600,
  "lines": [
    {
      "id": "6090ec2eaff09e00003dc88b",
      "text": "Hatena2012-07-14",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc88c",
      "text": "code:hatena",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc88d",
      "text": " <body>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc88e",
      "text": " *1342197532*Pythonのwith文とJava7のtry-with-resourceとC#のusingの比較",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc88f",
      "text": " http://nhiro.org/learn_language/with_statement.html",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc890",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc891",
      "text": " Java7は名前の通りtryと抱き合わせになっている。C#とPythonは分離されている。<del>なのでJava7でC#やPythonと同じ挙動をしたければ必要なくても空のfinallyを書くことになる。</del>(追記: finallyやexceptを伴わないtryもOKでした。thanks id:nowokay)",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc892",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc893",
      "text": " 本体が正常終了または例外を投げて異常終了した場合のどちらでも呼ばれる「後片付けメソッド」はC#だとDispose、Java7だとclose、",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc894",
      "text": " Pythonだと__exit__。しかしPython以外は引数を取らない。本体が正常に終了したのかどうかはどうやって知るんだろうか。知る必要はないという判断なんだろうか。追記: Pythonがどんな引数を取るのか他の言語の人には想像がつきにくいらしいので補足すると「例外の種類、例外のインスタンス、スタックトレース」の3つ組。要するに「例外が起きたかどうか、起きたならその詳しい情報」が渡されるということ。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc895",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc896",
      "text": " 具体的に例外が起きたかどうかで「後片付け」の処理を変えている例は<a href='http://www.python.org/dev/peps/pep-0343/'>PEP 343 -- The \"with\" Statement</a>にはジェネレータに対して使っていて、例外終了した場合にはジェネレータの中に例外を投げ込んでみて、ジェネレータがその例外を捕捉して処理するチャンスを作っている。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc897",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc898",
      "text": " Java7では例外はcatch節で捕まえる。つまり実装時に捕まえるかどうかを判断する。C#ではそもそも例外処理の構文ではないので例外は単純に貫通する。Pythonでは例外を貫通させるのか、__exit__で処理できたので貫通しないでいいのかは__exit__の返り値で決まる。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc899",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc89a",
      "text": " 複数個のリソースを扱えることと、開いた順の逆順で閉じられることはどの言語でも共通。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc89b",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc89c",
      "text": " Pythonだけ「ブロックに入る前に呼ばれるメソッド」を定義することができる。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc89d",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc89e",
      "text": " ** 追記: ささださんとの会話",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc89f",
      "text": " (こういうチャットログをいい感じに読みやすくするのをサポートしてくれる汎用Togetterみたいなものがあったらいいのに。話がつながるように多少前後を入れ替えたが、それでも繋がっていないところがあるので括弧で囲った)",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8a0",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8a1",
      "text": " ko1: そもそも Python の引数が気になる。想像出来ない。> Pythonだと__exit__。しかしPython以外は引数を取らない。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8a2",
      "text": " nishio: 例外の型、例外のインスタンス、例外のスタックトレース、の3つセット",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8a3",
      "text": " ko1: 例外の捕捉とリソースの解放は別なんじゃないの？",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8a4",
      "text": " nishio: うーん、 失敗時と成功時でリソースの解放の仕方を変えたいケースとか？",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8a5",
      "text": " ko1: そもそも失敗したらそのブロック実行しないというのが C# の usingじゃないのかなあ。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8a6",
      "text": " ko1: 例外によって後始末の方法を変えるのなら，catch（ruby だと rescue）で変えそうな。Ruby だと $! でエラー情報取れるから，それでやるってのも可能性はあるけど見たことはない",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8a7",
      "text": " nishio: あー、それはリソース獲得時の失敗と本体の実行時の例外がごっちゃになってるな。今話していたのは、リソース獲得に成功した後、本体が正常終了したのか異常終了したのかによって__exit__の引数が異なるって話。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8a8",
      "text": " ko1: 「例外によって後始末の方法を変えるのなら…(catch, $!)」はそれを意図していた",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8a9",
      "text": " nishio: うん、で「そもそも失敗したらそのブロック実行しない」はリソース獲得時の失敗のことだな、と。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8aa",
      "text": " ko1: それは獲得時の話ですね。で，それだと，そもそもブロック実行しないから，ブロックで例外が発生することもない",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8ab",
      "text": " nishio: リソース獲得時に失敗したらブロックを実行しないってのは3つ全部の言語で同じだと思われ。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8ac",
      "text": " ko1: ブロックで例外発生してもしなくても，関係無くリソースは close したい気がする",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8ad",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8ae",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8af",
      "text": " >||",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8b0",
      "text": " (ko1:",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8b1",
      "text": " begin",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8b2",
      "text": "   a = open(...)",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8b3",
      "text": "   b = open(...) # ここで失敗",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8b4",
      "text": " ensure",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8b5",
      "text": "   ここで何をするか",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8b6",
      "text": " end",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8b7",
      "text": " ko1: Ruby だとこういうので困ることが)",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8b8",
      "text": " ||<",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8b9",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8ba",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8bb",
      "text": " nishio: それも同じ＞発生しててもしてなくても呼ばれる。で、論点はそのcloseの処理で例外が起きたかどうかを知る必要はないのかどうか。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8bc",
      "text": " ko1: 無いと思うなあ，というのがC# の気持ちだと思うし，俺もそういうシチュエーションが思いつかない。そういう経験あった？",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8bd",
      "text": " nishio: 知る必要がないと断言できるほど詳しくない、が実情。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8be",
      "text": " ko1: __exit__ の構文を知らないんだがそれでエラー内容を使ってるところを探してみるとか。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8bf",
      "text": " nishio: http://www.python.org/dev/peps/pep-0343/ ではジェネレータをラップするのに使ってるなぁ。ブロック内で例外が起きた時にまずはその例外をジェネレータの中に投げ込んでみて、ジェネレータの中のfinallyとかが働くチャンスを作るわけだな。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8c0",
      "text": " ko1: なんか難しいことをしているな。generator ってリソースなんだろうか... よくわからんが，Ruby だと try（rescue）しろよって気がする。ああ，だから Ruby には using 的なものはないのか。先日，ruby にも using 的なものあればいいよね，みたいな話をしてたんだけど自分でブロック作ってイテレータ書けよ，のほうが（open(){ ... } みたいなのを作れ，のほうが）柔軟なんだな",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8c1",
      "text": " nishio: Ruby流の解決方法がいまいちピンとこない。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8c2",
      "text": " ko1: open(...){|f| ...} で block から解放されたら消えるじゃん。それは，open がブロック呼ぶ前に begin/ensure でくるんでるんだけどリソース解放は foo{...} の foo メソッドが責任を持つ，てきな空気がある。で，foo は，HogeException の時はなんかする，みたいなのが書ける。そういう意味で，__exit__ が例外を返す，というのと同じようなものなんだろうか，と思った。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8c3",
      "text": " nishio: まずopenというのは引数とブロックを取るメソッドなの？ファイルのopenかと思ってしまった。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8c4",
      "text": " ko1: ファイルのオープン。f = open(...) としてもいいけどopen(...){|f| ...} とも書ける",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8c5",
      "text": " nishio: なるほど、ブロックを渡された時にはbegin/ensureでくるんで呼び出す、という設計になっているのか。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8c6",
      "text": " ko1: yes．設計にしている",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8c7",
      "text": " nishio: ぶっちゃけwith文はブロック渡しのないPythonのためのブロック渡しなんじゃないのか。ブロックの前と後に実行する内容が__enter__と__exit__になってる。C#とかと違って、ブロックに入る前に実行する__enter__があるのもその辺。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8c8",
      "text": " ko1: なるほどね",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8c9",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8ca",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8cb",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8cc",
      "text": " ko1: 「try/finally statements」とあるのでリソースに特化した話じゃないのね",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8cd",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8ce",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8cf",
      "text": " >||",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8d0",
      "text": " (ko1: loop{...} というメソッドは",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8d1",
      "text": " ko1: def loop",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8d2",
      "text": "   begin",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8d3",
      "text": "     while true",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8d4",
      "text": "       yield",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8d5",
      "text": "     end",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8d6",
      "text": "   rescue StopIteration",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8d7",
      "text": "     # stop",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8d8",
      "text": "   end",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8d9",
      "text": " end",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8da",
      "text": " ko1: こうかいてあり，raise StopIteration とすると止まる",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8db",
      "text": " ko1: 他の raise Foo はそのまま突き抜ける)",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8dc",
      "text": " ||<",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8dd",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8de",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8df",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8e0",
      "text": " ko1: この with 文は，Python ではリソース解放でもよく利用されている？",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8e1",
      "text": " nishio: そもそも、「スコープを抜けるときに必ず実行したい処理」がリソースの解放のことが多いだけで、本質的に解決したかった問題は「例外の導入によって関数だのブロックだのから抜ける場所が予測できなくなったこと」だよね。それをfinallyが解決したわけだけども、その後「それを複数個に対してやりたいこともたくさんあるよね」というニーズに対して、try/finallyで書くとネストがどんどん深くなるからよい方法が欲しくなって、その解決がusingやtry-with-resourceやwith-statementという認識。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8e2",
      "text": " ko1: C# using はネスト深くならない？複数かけるのか，あれ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8e3",
      "text": " nishio: 複数書けるよ、っていうかサンプルコードには複数書いているよ、ほい http://nhiro.org/learn_language/with_statement.html",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8e4",
      "text": " ko1:",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8e5",
      "text": " >||",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8e6",
      "text": "         using (",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8e7",
      "text": "             MyClass c1 = new MyClass(\"first\"),",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8e8",
      "text": "                     c2 = new MyClass(\"second\"))",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8e9",
      "text": "         {",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8ea",
      "text": " ||<",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8eb",
      "text": " ko1: これか",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8ec",
      "text": " nishio: で、どの言語でも確保したのと逆順に開放する",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8ed",
      "text": " ko1: これ，c1は作れて c2 失敗したときは ちゃんと c1 を解放すんのかね",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8ee",
      "text": " nishio: 確認してないけどc1のdisposeが呼ばれるはず",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8ef",
      "text": " ko1: まぁ，すんだろうなあ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8f0",
      "text": " nishio: 呼ばなかったら設計者を殴りに行った方がいいｗ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8f1",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8f2",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8f3",
      "text": " ko1: Java ってこんなこと書けるのか",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8f4",
      "text": " >||",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8f5",
      "text": " try (",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8f6",
      "text": "              AutoCloseable imp1 = new AutoCloseableImpl(\"first\");",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8f7",
      "text": "              AutoCloseable imp2 = new AutoCloseableImpl(\"second\")) {",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8f8",
      "text": " ||<",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8f9",
      "text": " nishio: 7からね。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8fa",
      "text": " ko1: 同じように imp2 でこけても imp1 は close すると",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8fb",
      "text": " nishio: 当然そうなっているだろうと思って確認してない。",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8fc",
      "text": " ko1: ruby だと，open{|f1| open{|f2| ...}} って処理は結構書くから，ネスト深いな",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8fd",
      "text": " ko1: with MyClass(\"first\") as x, MyClass(\"second\") as y: も，同じかなあ（y で失敗して，x で __exit__ する）",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8fe",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc8ff",
      "text": " ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc900",
      "text": " nishio: https://gist.github.com/3106388",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc901",
      "text": " nishio: xのinitが呼ばれて__enter__が呼ばれた後yの__init__で例外が飛んだ場合にbodyは実行されずにxの__exit__がエラー引数付きで呼ばれている。飛ばした例外が意図したものと違ったけどｗ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc902",
      "text": " ko1: ひどい",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc903",
      "text": " nishio: JavaはRuntimeExceptionだから行き来していると混ざるｗ",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc904",
      "text": " ko1: ruby でもなんか考えて見るか",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc905",
      "text": " </body>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc906",
      "text": " <comments>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc907",
      "text": " <comment>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc908",
      "text": " <username>methane</username>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc909",
      "text": " <body>with で例外起こってるかどうかで動作を変えるケースとしては、 with con.begin(): ブロックで、ブロックを抜けるときにトランザクションをコミットするかロールバックするかを例外のあり無しで切り替えるというものがあります。<br>他には、ユニットテストで、 with self.assertRaises(HogeException): のブロック内に HogeException を投げるはずのコードを書いて、<br>ブロックをクリーンに抜けたり、捕まえた例外が HogeException じゃなかったりしたらテストがfailするというものもあります。<br><br>なので、 Python の with 文をリソース解放のための仕組みではなくて、もっと汎用的にブロックの突入と脱出両方をフックするための<br>しくみと考えたほうが良いと思います。<br>Ruby では ブロックで with 相当のことができるというのは全くそのとおりだと思います。</body>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc90a",
      "text": " <timestamp>1342246133</timestamp>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc90b",
      "text": " </comment>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc90c",
      "text": " <comment>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc90d",
      "text": " <username>nishiohirokazu</username>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc90e",
      "text": " <body>>with で例外起こってるかどうかで動作を変えるケースとしては、 with con.begin(): ブロックで、ブロックを抜けるときにトランザクションをコミットするかロールバックするかを例外のあり無しで切り替えるというものがあります。<br><br>たしかに、そのサンプルは僕も見覚えがあります。PEPかと思ったけども見つけられませんでした。</body>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc90f",
      "text": " <timestamp>1342316685</timestamp>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc910",
      "text": " </comment>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc911",
      "text": " <comment>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc912",
      "text": " <username>methane</username>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc913",
      "text": " <body>con.begin(): できる例は SQLAlchemy ですね。<br>assertRaises は標準ライブラリの unittest でも利用されています。</body>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc914",
      "text": " <timestamp>1342344809</timestamp>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc915",
      "text": " </comment>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc916",
      "text": " <comment>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc917",
      "text": " <username>nowokay</username>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc918",
      "text": " <body>「必要なくても空のfinallyを書くことになる」Java7ならtry-with-resourceのときは不要ですよ。</body>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc919",
      "text": " <timestamp>1370280429</timestamp>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc91a",
      "text": " </comment>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc91b",
      "text": " </comments>",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc91c",
      "text": "",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc91d",
      "text": "[はてなダイアリー 2012-07-14 https://nishiohirokazu.hatenadiary.org/archive/2012/07/14]",
      "created": 1342191600,
      "updated": 1342191600,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}