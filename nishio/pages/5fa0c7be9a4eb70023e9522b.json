{
  "id": "5fa0c7be9a4eb70023e9522b",
  "title": "arc076_b",
  "created": 1604372582,
  "updated": 1604376285,
  "lines": [
    {
      "id": "5fa0c7be9a4eb70023e9522b",
      "text": "arc076_b",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604372582,
      "updated": 1604372598
    },
    {
      "id": "5fa0c862aff09e0000639858",
      "text": "https://atcoder.jp/contests/abc065/tasks/arc076_b",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604372582,
      "updated": 1604372582
    },
    {
      "id": "5fa0c864aff09e0000639859",
      "text": "考えたこと",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604372582,
      "updated": 1604372601
    },
    {
      "id": "5fa0c879aff09e000063985b",
      "text": "　[最小全域木]を求める問題だが、素朴にやると辺が10^10だからダメ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604372601,
      "updated": 1604372697
    },
    {
      "id": "5fa0c8d9aff09e000063985e",
      "text": "　一番xの小さい頂点に注目する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604372698,
      "updated": 1604372817
    },
    {
      "id": "5fa0c957aff09e000063985f",
      "text": "　　[端から埋める]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604372824,
      "updated": 1604372830
    },
    {
      "id": "5fa0c95faff09e0000639860",
      "text": "　　この頂点は自分以外のどれかとつながらなければならない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604372831,
      "updated": 1604372856
    },
    {
      "id": "5fa0c979aff09e0000639861",
      "text": "　　xが次に小さい点に繋ぐか、yの近い点に繋ぐか",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604372857,
      "updated": 1604372878
    },
    {
      "id": "5fa0c9b7aff09e0000639862",
      "text": "　　yの最も近い点が高速に見つけられると良い",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604372924,
      "updated": 1604372957
    },
    {
      "id": "5fa0c9f7aff09e0000639863",
      "text": "　　　うーん、[セグメント木]を二分探索かな",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604372984,
      "updated": 1604374431
    },
    {
      "id": "5fa0cfbfaff09e0000639864",
      "text": "　　　でも「xが一定以上で」という条件付きで見つけたいのだよな",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604374463,
      "updated": 1604374484
    },
    {
      "id": "5fa0cfd3aff09e0000639865",
      "text": "　　yでソートして[双方向リスト]に入れておき、xが小さい方から試した後でそのxを取り除いておけば良い",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604374484,
      "updated": 1604375019
    },
    {
      "id": "5fa0d0e9aff09e0000639867",
      "text": "　　　双方向リストは削除がO(1)だし、前後の値を見るのもO(1)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604374762,
      "updated": 1604374783
    },
    {
      "id": "5fa0d1edaff09e0000639868",
      "text": "　　　[削除しかしないリスト]前にも考えたよな、と思ったら[ゼロフィルのリンクトリスト]だった。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604375022,
      "updated": 1604375205
    },
    {
      "id": "5fa0c878aff09e000063985a",
      "text": "　　　この時と違ってi番目の要素にO(1)でアクセスしたい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604372601,
      "updated": 1604375354
    },
    {
      "id": "5fa0d33aaff09e000063986d",
      "text": "　　　リンクトリストはi番目アクセスが遅いと思いがちだが、それは追加削除した後でのi番目にアクセスする場合であって、削除しかしない場合に追加時のiでアクセスするのはO(1)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604375355,
      "updated": 1604375460
    },
    {
      "id": "5fa0d3a4aff09e000063986e",
      "text": "　　これで、前処理O(NlogN)、本処理O(N)になる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604375461,
      "updated": 1604375509
    },
    {
      "id": "5fa0d3d4aff09e000063986f",
      "text": "　公式解説",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604375509,
      "updated": 1604375512
    },
    {
      "id": "5fa0d3d8aff09e0000639870",
      "text": "　　[隣だけを見れば良い]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604375512,
      "updated": 1604375917
    },
    {
      "id": "5fa0d56eaff09e0000639871",
      "text": "　　　これは僕の解法で「xでソートして次」だけ見てるのや「yでソートして前後」だけ見てるところでも使っている",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604375919,
      "updated": 1604376043
    },
    {
      "id": "5fa0d5ebaff09e0000639874",
      "text": "　　各点はx順での前後とy順での前後以外に繋がらない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604376043,
      "updated": 1604376112
    },
    {
      "id": "5fa0d631aff09e0000639875",
      "text": "　　　→辺の本数をNのオーダーまで減らせる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604376113,
      "updated": 1604376129
    },
    {
      "id": "5fa0d643aff09e0000639876",
      "text": "　　　→最小全域木",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604376132,
      "updated": 1604376160
    },
    {
      "id": "5fa0d661aff09e0000639877",
      "text": "　　考察",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604376162,
      "updated": 1604376165
    },
    {
      "id": "5fa0d665aff09e0000639878",
      "text": "　　　最小全域木の問題で辺がN^2オーダーで間に合わない時には辺を削減できないか考えるべきか",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604376165,
      "updated": 1604376228
    },
    {
      "id": "5fa0d6a4aff09e0000639879",
      "text": "　　　[辺の削減→最小全域木]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604376228,
      "updated": 1604376285
    },
    {
      "id": "5fa0d317aff09e000063986c",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604375320,
      "updated": 1604375320
    }
  ]
}