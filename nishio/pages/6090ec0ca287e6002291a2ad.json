{
  "id": "6090ec0ca287e6002291a2ad",
  "title": "Hatena2013-04-28",
  "created": 1367074800,
  "updated": 1367074800,
  "lines": [
    {
      "id": "6090ec30aff09e00003de526",
      "text": "Hatena2013-04-28",
      "created": 1367074800,
      "updated": 1367074800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de527",
      "text": "code:hatena",
      "created": 1367074800,
      "updated": 1367074800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de528",
      "text": " <body>",
      "created": 1367074800,
      "updated": 1367074800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de529",
      "text": " *1367142048*トレイトを勉強していたらクラスの定義の食い違いに気づいた話",
      "created": 1367074800,
      "updated": 1367074800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de52a",
      "text": " 以前自分が書いた記事<a href='http://d.hatena.ne.jp/nishiohirokazu/20130306/1362557967'>Scalaのtraitはmixinか？</a>を元に、トレイトに関する補足記事を書こうとして「そうだ、どうせならば元論文の記述とも照らしあわせたほうがよいな」と「Traits: A Mechanism for Fine-grained Reuse」を読んだ。そこで気づいたのだけども、この件に関して意見が咬み合わないことがあるのは、そもそも「クラス」の定義に食い違いがあるせいではないか？",
      "created": 1367074800,
      "updated": 1367074800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de52b",
      "text": " ",
      "created": 1367074800,
      "updated": 1367074800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de52c",
      "text": " 「Traits: A Mechanism for Fine-grained Reuse」での定義ではクラスとは「空クラスnil」もしくは「属性の集合と、メソッドの集合と、親クラス」と定義されている((著者らはもっと数学的に厳密な方法で定義しようとしているので僕のこの説明で納得出来ない人は原著をどうぞ))",
      "created": 1367074800,
      "updated": 1367074800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de52d",
      "text": " ",
      "created": 1367074800,
      "updated": 1367074800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de52e",
      "text": " で、トレイトとは「メソッドの集合」と定義されている((こちらも厳密には「名前から(メソッドの実体+コンフリクトした状態を表現するための⊥&#8868;)への写像」なんだけども詳細は省く))",
      "created": 1367074800,
      "updated": 1367074800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de52f",
      "text": " ",
      "created": 1367074800,
      "updated": 1367074800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de530",
      "text": " これがどういうことかというと、トレイトなどから作られたクラスは「自分を構成するのにどういうトレイトが使われたか」という情報を持たないってことなんだ。なのでsuperはトレイトに対して何も特別な挙動をしない。クラスの中からsuperした際にはusesしてるトレイトのことは考えないし、トレイトのメソッドからusesした時はそのメソッドが元々トレイトの中にあったという情報とはまったく無関係に「そのトレイトがいまusesされているクラス」の親クラスを指すわけだ。",
      "created": 1367074800,
      "updated": 1367074800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de531",
      "text": " ",
      "created": 1367074800,
      "updated": 1367074800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de532",
      "text": " 僕のクラスのメンタルモデルはPythonに慣れているので「属性の集合と、メソッドの集合と、複数の親クラスへの参照」になっていて、それがトレイトを学んだ際に「属性の集合と、メソッドの集合と、1個の親クラスへの参照と、0個以上のトレイトへの参照」へと更新されたのだけども、それはトレイトを提案した人たちの定義とは食い違っていたということだ。",
      "created": 1367074800,
      "updated": 1367074800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de533",
      "text": " ",
      "created": 1367074800,
      "updated": 1367074800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de534",
      "text": " この辺りの話は以前id:sumimさんがブログに書かれていたように思うけども、「平坦化」とかで検索しても見つけられず…。",
      "created": 1367074800,
      "updated": 1367074800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de535",
      "text": " ",
      "created": 1367074800,
      "updated": 1367074800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de536",
      "text": " 追記: あった： <a href='http://d.hatena.ne.jp/sumim/20130306/p1'>Scalaのトレイトは実はトレイトじゃなくただのミクスイン - Smalltalkのtは小文字です</a> 「リニア化」と「フラット化」だった。",
      "created": 1367074800,
      "updated": 1367074800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de537",
      "text": " </body>",
      "created": 1367074800,
      "updated": 1367074800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de538",
      "text": "",
      "created": 1367074800,
      "updated": 1367074800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de539",
      "text": "[はてなダイアリー 2013-04-28 https://nishiohirokazu.hatenadiary.org/archive/2013/04/28]",
      "created": 1367074800,
      "updated": 1367074800,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}