{
  "id": "5f9d0eb4ce53ba0023396424",
  "title": "abc106_d",
  "created": 1604128439,
  "updated": 1604131837,
  "lines": [
    {
      "id": "5f9d0eb4ce53ba0023396424",
      "text": "abc106_d",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604128439,
      "updated": 1604128446
    },
    {
      "id": "5f9d0eb6aff09e0000c0d7f0",
      "text": "https://atcoder.jp/contests/abc106/tasks/abc106_d",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604128439,
      "updated": 1604128439
    },
    {
      "id": "5f9d0eb7aff09e0000c0d7f1",
      "text": "　考えたこと",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604128439,
      "updated": 1604128452
    },
    {
      "id": "5f9d0ec3aff09e0000c0d7f3",
      "text": "　　区間が20万個与えられて、10万回与えられた区間に完全に包含されるものの個数を答える",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604128452,
      "updated": 1604128540
    },
    {
      "id": "5f9d0f29aff09e0000c0d7f4",
      "text": "　　なんらかの前処理をして定数か対数のオーダーで答えたい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604128554,
      "updated": 1604128573
    },
    {
      "id": "5f9d104caff09e0000c0d7f5",
      "text": "　　一般論として考えて難しいので制約を確認",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604128844,
      "updated": 1604128867
    },
    {
      "id": "5f9d1067aff09e0000c0d7f6",
      "text": "　　　Nが500なので二乗のオーダーのテーブルを確保しても良い",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604128872,
      "updated": 1604131294
    },
    {
      "id": "5f9d191eaff09e0000c0d7fa",
      "text": "　　　二次元の長方形の区間をインクリメントできるデータ構造があればいいのだけど…",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604131103,
      "updated": 1604131183
    },
    {
      "id": "5f9d196faff09e0000c0d7fb",
      "text": "　　　　双対セグメント木が二次元になったようなやつ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604131184,
      "updated": 1604131672
    },
    {
      "id": "5f9d1a28aff09e0000c0d7fc",
      "text": "　公式解説",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604131368,
      "updated": 1604131568
    },
    {
      "id": "5f9d1af0aff09e0000c0d7fd",
      "text": "　　各クエリごとにO(N)でもNが小さいから間に合う",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604131568,
      "updated": 1604131598
    },
    {
      "id": "5f9d1b0eaff09e0000c0d7fe",
      "text": "　　　Nが小さいことには気づいたのに空間計算量の方ばかり考えてた、「定数か対数のオーダーで」も緩まるのか",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604131599,
      "updated": 1604131650
    },
    {
      "id": "5f9d1b49aff09e0000c0d7ff",
      "text": "　　データ構造の方でも範囲インクリメント点取得の双対セグメント木をイメージしてたが、点インクリメント範囲和で考える方が自然だった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604131658,
      "updated": 1604131735
    },
    {
      "id": "5f9d1ba3aff09e0000c0d800",
      "text": "　　そこまで考えが及んでいれば範囲和のO(N^2)を[累積和]でO(N)にするだけ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604131747,
      "updated": 1604131796
    },
    {
      "id": "5f9d0ebfaff09e0000c0d7f2",
      "text": "　　[二次元累積話]を使えばもっと速いがそこまでは求められてない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604128447,
      "updated": 1604131837
    },
    {
      "id": "5f9d1bd7aff09e0000c0d801",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604131800,
      "updated": 1604131800
    }
  ]
}