{
  "id": "6090ec0aa287e6002291a243",
  "title": "Hatena2012-06-19",
  "created": 1340031600,
  "updated": 1340031600,
  "lines": [
    {
      "id": "6090ec2eaff09e00003dc5a6",
      "text": "Hatena2012-06-19",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5a7",
      "text": "code:hatena",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5a8",
      "text": " <body>",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5a9",
      "text": " *1340115934*作りたいもの: プログラミング言語のコア概念を学ぶサイト　その2",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5aa",
      "text": " <a href='http://d.hatena.ne.jp/nishiohirokazu/20120501/1335846610'>作りたいもの: プログラミング言語のコア概念を学ぶサイト</a>の続き。",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5ab",
      "text": " ",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5ac",
      "text": " サイト自体や日本語での解説はまだ完成していないが部品が色々揃ってきた",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5ad",
      "text": " ",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5ae",
      "text": " ** 完成したもの",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5af",
      "text": " ",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5b0",
      "text": " - JavaScriptのASTをリアルタイムにSVGで可視化(Esprimaを使う、見栄えに不満があるので改善の余地がある)",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5b1",
      "text": " - JavaScriptによるLISPの実装(パーサだけのはずだったのに関数定義、レキシカルスコープ、マクロ、までできちゃった)",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5b2",
      "text": " - JavaScriptによる中置記法の数式の再起下降パーサ(演算子の種類や優先度をブラウザ上で変更できる、これも予定以上の出来)",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5b3",
      "text": " - JavaScriptによるBrainf*ckの実装(IO周りに改善の余地がある)",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5b4",
      "text": " ",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5b5",
      "text": " ** 現在進行中のもの",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5b6",
      "text": " ",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5b7",
      "text": " - JavaScriptによるLazyKインタプリタ(SKI記法に限定してパーサ完成、可視化部分を実行部より先に作成中)",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5b8",
      "text": " - JavaScriptによるForthインタプリタ(あと数日で完成する予定)",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5b9",
      "text": " - JavaScriptによるEDSACエミュレータ(Python版の実装がバグって動かない状態。LazyK終わってから直す)",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5ba",
      "text": " ",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5bb",
      "text": " -----",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5bc",
      "text": " ",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5bd",
      "text": " で、次は何だ？というのを考えつつある。",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5be",
      "text": " ",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5bf",
      "text": " ** 前回の引き継ぎ",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5c0",
      "text": " - EDSACくらいの命令数で、アーキテクチャをもっとシンプルにした仮想マシン: どういう設計にする？opcode1バイト、アドレス部1バイト、文字セットはASCII、入出力は両方紙テープで1カラム8ビット、とか？",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5c1",
      "text": " -- 2バイトワードを整数として足し算する命令と浮動小数点数として足し算する命令が別々にあっても良い(EDSACより進んでるけど) それがあれば「間違った命令を使ってひどい結果になる」がデモンストレーションできるから型情報の必要性が説明出来る",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5c2",
      "text": " - Pythonのコードをバイトコードに変換して表示するページ、ページ遷移なし・リアルタイムで動くこと。",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5c3",
      "text": " - PythonのコードをSTとASTにしてそれぞれ可視化するページ、ページ遷移なし・リアルタイムで動くこと。",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5c4",
      "text": " - 数式パーサの出力を使ってFORTHのコードを出力、というデモをやるとバイトコードを吐いてVMで走らせている系の言語の気持ちがわかるようになる？",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5c5",
      "text": " ",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5c6",
      "text": " ** GC",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5c7",
      "text": " ",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5c8",
      "text": " - GCを教える上で必要なデモってなんだろう",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5c9",
      "text": " -- new_obj()とnew_tuple(obj, obj)と変数への束縛とtupleの破壊的な書き換えだけできる言語があれば、とりあえず参照カウント方式で相互参照が出来て消せない状況をデモすることができる",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5ca",
      "text": " -- それを繰り返していてヒープがいっぱいになったらマーク＆スイープが走る、もデモすることができる",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5cb",
      "text": " -- そういえばこんなものも昔作ったな… <a href='http://www.nishiohirokazu.org/narVisualizer/'>NarVisualizer</a> ってメアドがnaist.jpのままだな、もはや著者にメールを送ることすらできない。誰だこれ作ったの（ぉ",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5cc",
      "text": " ",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5cd",
      "text": " ** 並行処理",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5ce",
      "text": " ",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5cf",
      "text": " - どのタイミングでどっちのスレッドを実行するか、を全パターン試してくれる処理系があれば、問題のあるコードとないコードをデモンストレーションできるかなーと思ったが10命令のスレッドが2つあると全パターンは18万だなぁ。さすがに無茶か。",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5d0",
      "text": " - じゃあせめて失敗する例を実際に動かして納得できるように、命令にグローバルな実行順序を付けられる処理系？",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5d1",
      "text": " - 一つのコードでいろんなパターンを実行したいと思うから、実行順序はコードとは別の方法で指定できなきゃいけない。",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5d2",
      "text": " ",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5d3",
      "text": " -----",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5d4",
      "text": " ",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5d5",
      "text": " とまあ、思いついたものを脳からダンプしておいたけども、とりあえずは焦らずに今進行中のものを完了させてスッキリした方が良いかもしれないな。そもそも肝心の解説用サイトがまったくできていないし。",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5d6",
      "text": " </body>",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5d7",
      "text": " <comments>",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5d8",
      "text": " <comment>",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5d9",
      "text": " <username>mad-p</username>",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5da",
      "text": " <body>これが参考になると思います。<br><br>Accelerating Concurrency Bugs<br>https://www.facebook.com/note.php?note_id=226839507361910<br><br>並列実行制御バグを見つけるための加速テスト手法。仮想マシン上で共有メモリのアクセス順序を変えて実行させ、組合せ爆発をおさえる方法。JinxというJavaデバッガに実装されていたそうですが、私は残念ながら使ったことがありません</body>",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5db",
      "text": " <timestamp>1340164327</timestamp>",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5dc",
      "text": " </comment>",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5dd",
      "text": " </comments>",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5de",
      "text": "",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2eaff09e00003dc5df",
      "text": "[はてなダイアリー 2012-06-19 https://nishiohirokazu.hatenadiary.org/archive/2012/06/19]",
      "created": 1340031600,
      "updated": 1340031600,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}