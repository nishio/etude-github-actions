{
  "id": "6090ec05a287e6002291a0e4",
  "title": "Hatena2010-07-28",
  "created": 1280242800,
  "updated": 1280242800,
  "lines": [
    {
      "id": "6090ec29aff09e00003d6c29",
      "text": "Hatena2010-07-28",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c2a",
      "text": "code:hatena",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c2b",
      "text": " <body>",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c2c",
      "text": " *1280318211*講義資料の続き",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c2d",
      "text": " <a href='http://practical-scheme.net/trans/beating-the-averages-j.html'>Beating the Averages</a>",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c2e",
      "text": " >>",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c2f",
      "text": " プログラミング言語は半分技術で、半分は宗教なんだ [注6]",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c30",
      "text": " ...",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c31",
      "text": " 注6: 結果として、プログラミング言語の 比較は宗教戦争になるか、中立であろうとするあまりに 人類学の研究かと見まごうような学部生用の教科書にしかならない。 平和を好むか、大学での終身雇用を手に入れたい人は、この話題を避けて通る。 でも、宗教的な部分はこの問題の半分だけなんだ。他の部分には研究すべき価値がある。 特にあなたが新しい言語を設計したいと思っている時には。 ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c32",
      "text": " <<",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c33",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c34",
      "text": " というわけで、本当はもう少し宗教論争的な意味で炎上することを期待していたんだけどなー。真面目に書きすぎだと複数人に指摘された(苦笑)",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c35",
      "text": " 炎上してから公開するつもりだった原稿の続き:",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c36",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c37",
      "text": " <hr>",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c38",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c39",
      "text": " 賢者は歴史から学ぶ。愚者は経験からしか学ばない。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c3a",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c3b",
      "text": " 自分で適当な設計で作って罠にはまる前に、既存の言語処理系を色々見比べて、どんな設計を採用したのか、どういう失敗をしたのかを学ぶことが重要だ。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c3c",
      "text": " しかし言語間比較は不毛な論争を招きやすい。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c3d",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c3e",
      "text": " なぜか？",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c3f",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c40",
      "text": " <hr>",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c41",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c42",
      "text": " ある設計上の問題に対して解決策Aと解決策Bはどちらがよいのだろうか？",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c43",
      "text": " 例えばGCはデフォルトでONがいいのか、それとも必要な人だけ使えるのがいいのか？",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c44",
      "text": " 文字列は破壊的に変更できる方がいいのかできない方がいいのか？",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c45",
      "text": " 整数や多倍長整数や浮動小数点数や文字列の間の暗黙の型変換はある方がいいのかない方がいいのか？",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c46",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c47",
      "text": " **「選択肢Aが正解だ」",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c48",
      "text": " と言えると思っている？",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c49",
      "text": " それは視野が狭い。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c4a",
      "text": " 現実社会の問題の大部分は簡単に割り切れない「ケースバイケース」な問題だ。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c4b",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c4c",
      "text": " メモリの消費量や実行時間にシビアでないケースではGCまかせにしたほうがプログラマは楽かもしれない。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c4d",
      "text": " しかし組み込みでメモリがとても少ない場合や、例えばシューティングゲームみたいにゲーム中にGCが走るとユーザがイラッとする場合などGCまかせにしたくないケースはいくつもある。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c4e",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c4f",
      "text": " - 議論のしかた　「正しさ」の問題  http://iwatam-server.sakura.ne.jp/software/giron/giron/ar01s05.html",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c50",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c51",
      "text": " 唯一の正解があるはずだという思い込みは不毛な議論を招きやすい。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c52",
      "text": " <hr>",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c53",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c54",
      "text": " よく起こる不毛な議論のパターン：「宗教論争」「自転車置場の議論」",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c55",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c56",
      "text": " ** 宗教論争とは",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c57",
      "text": " 言語Xと言語Yのユーザがそれぞれ「自分の使っている言語の設計/機能が正しい」と考え、相手の言語の設計を「自分の信じる正しい言語と設計/機能が違う」という理由で互いに批判する状態。(一般的には言語の設計に限らずエディタやOS、政治、そして宗教も対象になる)",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c58",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c59",
      "text": " 言語Xの信者が主張する「正しさ」が「言語Xに近いこと」なので、何が正しいのかについて意見がまとまるはずがない。不毛な議論である。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c5a",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c5b",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c5c",
      "text": " ** 宗教論争はなぜ起こるか",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c5d",
      "text": " 全ての言語を均等に知っている人はいないので、どんな人の発言にも「彼の得意な言語がなんであるか」に起因する偏りがある。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c5e",
      "text": " 人間には自分の慣れたものに愛着を感じる傾向があるので、自分の得意な言語をほめすぎることが多い。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c5f",
      "text": " また自分の知らないものの価値を認めることは難しい。よって自分の知らない言語のユーザが自分のよく知らないくだらない機能を高く評価し崇め奉っている「信者」にみえてしまう。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c60",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c61",
      "text": " また、特に1つの言語に愛着が強い場合、その言語の欠点を指摘されるとたとえ的を射ていようが「自分に対する攻撃」と感じてしまい、防衛のための反論をしがち。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c62",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c63",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c64",
      "text": " ** 自転車置場の議論とは",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c65",
      "text": " 駐輪場に屋根をつけるかどうか、何色に塗るか、といった些細な問題ほど議論に参加する人が多くなる現象。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c66",
      "text": " プログラミング言語で言えばsleepの引数が秒であるべきかミリ秒であるべきか、文字列のリストを結合するのはString#joinであるべきかList#joinであるべきか、配列の各要素に関数を適用するメソッドの名前が map であるべきか collect であるべきか、などの議論。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c67",
      "text": " こういう議論が無意味なわけではないが、大勢で考えなければいけないような問題でもないし、必死になって自分の主張を貫くような価値のある対象でもない。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c68",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c69",
      "text": " -自転車置場の議論 - bkブログ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c6a",
      "text": " -http://0xcc.net/blog/archives/000135.html",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c6b",
      "text": " -FreeBSD FAQ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c6c",
      "text": " -http://www.freebsd.org/doc/ja_JP.eucJP/books/faq/misc.html#BIKESHED-PAINTING",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c6d",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c6e",
      "text": " ** 自転車置き場の議論はなぜ起こるか",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c6f",
      "text": " 人間には「他者から関心・注目・反応が欲しい」という承認欲求がある。承認欲求に飢えている生き物にとって、大勢が参加する議論に加わるのはいいエサだし、万が一自分の意見が通りでもしようものならすごいご馳走だ。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c70",
      "text": " だから簡単そうな問題にはまず素早い人が口を挟み、議論の参加者が増えたことで自分も一言噛んでおこうと思う人でますます議論が紛糾し、そして彼らは自分の名誉と注目を守るために必死に他の意見を貶めようと発言する。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c71",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c72",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c73",
      "text": " ** ある種の自然現象",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c74",
      "text": " 宗教論争も駐車場の議論も、人間がそういう性質の生き物だから起きる自然現象だ。自分が起こさないように努力をすることは必要だが、起きてしまったことに嘆いたり怒ったりしても無意味。夏が暑くて時々夕立になることと同じ。夕立をふらせた雲に文句を言っても雨はやまない。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c75",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c76",
      "text": " 夕立に怒るのでも夕立が降るのを嘆くのでもなく、夕立の時には雨宿りをして、濡れて風邪をひかないようにするのが賢明。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c77",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c78",
      "text": " <hr>",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c79",
      "text": " 「PEPのススメ」に続く。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c7a",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c7b",
      "text": " *1280325373*抜粋翻訳 PEP3138 String representation in Python 3000",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c7c",
      "text": " PEP3138 String representation in Python 3000",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c7d",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c7e",
      "text": " **概要",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c7f",
      "text": " この文章では、Python 3000用に文字列の新しい表現方法を提案する。 Python 3000以前のPythonでは、組み込み関数repr()はデバッグやログ出力のために、任意のオブジェクトを画面表示可能なASCIIの文字列に変換していた。 Python 3000ではユニコード標準に基づいて、より広い範囲の文字を「画面表示可能」とみなすべきである。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c80",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c81",
      "text": " **動機",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c82",
      "text": " Python2.*系では「表示可能な文字列を作成する関数」reprは、非ASCII文字をすべてエスケープする。文字列を構成する文字のほとんどがASCIIである場合には問題にならない。しかし、日本語などいくつかの言語ではほとんどの文字が非ASCIIであり、とても不便である。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c83",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c84",
      "text": " 例えば open(japaneseFilemame) が何か例外を投げる場合、エラーメッセージは IOError: [Errno 2] No such file or directory: '\\u65e5\\u672c\\u8a9e' といったものになる。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c85",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c86",
      "text": " Python 3000 には、非ASCII識別子など、ラテン文字以外を使用しているユーザーに優しい特徴がたくさん盛り込まれている。表示可能な文字列の作成に関しても同様に進化できればきっと役に立つことだろう。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c87",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c88",
      "text": " *1280328433*抜粋翻訳 PEP 236 Back to the __future__",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c89",
      "text": " PEP 236 Back to the __future__",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c8a",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c8b",
      "text": " **動機",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c8c",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c8d",
      "text": " 時が立つにつれて、Pythonは言語コアの構造の広く知られた意味づけに互換性のない変更を加えたり、思いがけない(実装依存の)振る舞いを何らかの形で変更したりする。こういう変更は気まぐれには行われず、常に長期的に見て言語を改善する目的で行われるのだが、しかし短期的には論争と混乱を呼ぶものである。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c8e",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c8f",
      "text": " PEP 5, Guidelines for Language Evolution[1] は痛みを減らす方法を提案している。このPEPでは、それを実現するためのメカニズムを導入する。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c90",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c91",
      "text": " **意図",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c92",
      "text": " 言語コア部分の構文や意味論に互換性のない変更を加える際は:",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c93",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c94",
      "text": "     1. その変更が導入されるリリースCでは構文や意味論をデフォルトでは変更しない。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c95",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c96",
      "text": "     2. ある将来のリリースRを、そこでその構文や意味論が強制されるものとする。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c97",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c98",
      "text": "     3. PEP 3, Warning Framework[3] で説明されているメカニズムが、リリースRで意味を変えるであろう操作や構成について、可能な限りいつでも、警告を作成するのに使われる。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c99",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c9a",
      "text": "     4. モジュールMの中のコードが現在のリリースCで新しい構文や意味論を使うことを要求するために、新しい future_statement (後述) を明示的にモジュールMに含めることが出来る。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c9b",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c9c",
      "text": " つまり、古いコードは少なくとも一つのリリースでデフォルトで動き続け、しかし新しい警告メッセージを表示しはじめるようになる。新しい構文や意味論への移行はこの期間中に進めることができ、future_statementを使って、それを含むモジュールがすでに新しい構文と意味論が強制されたあとであるかのように振舞うようにできる。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c9d",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c9e",
      "text": " *1280333246*抜粋翻訳 PEP 3107 Function Annotations ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6c9f",
      "text": " ** 概要",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ca0",
      "text": " このPEPはPythonの関数に、任意のメタデータを追加するための構文を導入する。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ca1",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ca2",
      "text": " ** 根拠",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ca3",
      "text": " Python 2.x 系は関数の引数と返り値を修飾する方法を持たなかったため、数多くのツールやライブラリがそのギャップを埋めるために現れた。いくつかは PEP 318 で導入されたデコレータを使い、他のいくつかは関数のドキュメンテーション文字列をパースしてアノテーションを探す。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ca4",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ca5",
      "text": " このPEPは、このような情報を指定する、唯一の標準的な方法を提供し、今現在幅広い方法と構文のバリエーションが引き起こしている混乱を軽減することを目指している。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ca6",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ca7",
      "text": " ** 関数アノテーションの前提",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ca8",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ca9",
      "text": " -関数アノテーションは、パラメータと戻り値の両方とも、完全に任意。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6caa",
      "text": " -関数アノテーションはコンパイル時に任意のPythonの式を関数のさまざまな部分に関連付ける方法以上のなにものでもない。Pythonそれ自体はアノテーションに特定の意味をもたせることはしない。",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cab",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cac",
      "text": " >|python|",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cad",
      "text": " def compile(source: \"something compilable\",",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cae",
      "text": "             filename: \"where the compilable thing comes from\",",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6caf",
      "text": "             mode: \"is this a single statement or a suite?\"):",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cb0",
      "text": "     ...",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cb1",
      "text": " ||<",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cb2",
      "text": " ",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cb3",
      "text": " >|python|",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cb4",
      "text": " def haul(item: Haulable, *vargs: PackAnimal) -> Distance:",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cb5",
      "text": "     ...",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cb6",
      "text": " ||<",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cb7",
      "text": " </body>",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cb8",
      "text": "",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6cb9",
      "text": "[はてなダイアリー 2010-07-28 https://nishiohirokazu.hatenadiary.org/archive/2010/07/28]",
      "created": 1280242800,
      "updated": 1280242800,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}