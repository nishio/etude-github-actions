{
  "id": "6090ec05a287e6002291a0e1",
  "title": "Hatena2010-07-24",
  "created": 1279897200,
  "updated": 1279897200,
  "lines": [
    {
      "id": "6090ec29aff09e00003d69f6",
      "text": "Hatena2010-07-24",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69f7",
      "text": "code:hatena",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69f8",
      "text": " <body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69f9",
      "text": " *1279982968*Haskellの「fib = 1:1:zipWith (+) fib (tail fib)」がとても遅い件のまとめ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69fa",
      "text": " 前日話の流れを時系列でまとめかけたけど、もはや情報量が多すぎて流れを追っていなかった人にとってはキャッチアップが困難かと思うので改めてまとめてみる。(情報量の多いほうがいい人はこちら: <a href='http://d.hatena.ne.jp/nishiohirokazu/20100720/1279595270'>続:Haskellのfibが遅い件</a>)",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69fb",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69fc",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69fd",
      "text": " Haskellでフィボナッチ数列を定義する方法としては",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69fe",
      "text": " >|haskell|",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69ff",
      "text": " fib = 1:1:zipWith (+) fib (tail fib)",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a00",
      "text": " ||<",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a01",
      "text": " が有名であり、Wikipediaには「次の定義は線形時間でフィボナッチ数列のリストを生成する」と紹介されている。しかし、少なくとも n = 10000 ～ 300000 くらいの範囲ではO(n^2.6)くらいの計算時間が掛かっていて、事実に反する。 (グラフはこちら: <a href='http://shinh.skr.jp/m/?date=20100719#p01'>はじめてのにき(2010-07-19)</a>)",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a02",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a03",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a04",
      "text": " 2.6という値がどこから出てきたのか？これはGCにO(n^3)くらいの時間がかかっていて、それが小さい係数で本来の計算時間O(n^2)に混ざっているため、O(n^2.6)ぐらいに見えている。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a05",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a06",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a07",
      "text": " なぜGCにO(n^3)ぐらいの時間がかかるのか？HaskellのGCは世代別GCであり、固定長のマイナーヒープがいっぱいになるとGCを始める。このとき、スタック上のオブジェクトはGCのルートとして使われるのでスタックの深さをmとしたときにO(m)の時間がかかる。今回のケースでは、スタックの深さをmとした場合にO(m)のメモリを確保するので、i回目のGCが起きたときの消費時間mは係数無視してi^0.5になり、これをiについて足しあわせるので積分してi^1.5になり、iがいくらまで増えるかというとメモリの消費量をマイナーヒープのサイズで割ったものだから係数無視してn^2なので、これを代入してn^3になる。というわけでGCの計算量はO(n^3)になる。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a08",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a09",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a0a",
      "text": " この挙動はGHC 6.10.1以前では再現しないので、6.10.2で行われたGCに関する修正(<a href='http://hackage.haskell.org/trac/ghc/ticket/2747'>#2747 (Excessive Memory Usage: space leak with foldl' on Integer) &#8211; GHC</a>)が原因と思われる。6.10.1ではnの2乗くらいのオーダーになるらしい。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a0b",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a0c",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a0d",
      "text": " また、「スタックの上に大量の巨大なIntegerがある状況」が問題を引き起こしているので、Haskellでも素朴に末尾再帰で書けばO(n^2)になる。計算順序によっても挙動が変わる(<a href='http://d.hatena.ne.jp/mkotha/20100623/1277286946'>無限リストを使っているfibでは30万番目を取るより30万番目までの和を取るほうが速い</a>)し、評価戦略でも変わる(<a href='http://d.hatena.ne.jp/kazu-yamamoto/20100624/1277348961'>正格評価するzipWith'を作れば速い</a>)",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a0e",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a0f",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a10",
      "text": " 無限リストが絡むことで見かけが複雑になっているので、よりシンプルな「末尾再帰でない再帰呼び出しでnに比例して大きくなるメモリを確保しようとしたときにO(n ^ 2.6)の時間がかかる」事例(<a href='http://d.hatena.ne.jp/nishiohirokazu/20100721/1279687613'>Haskellで単にn回7を掛けるだけでもO(n ^ 2.6)の時間がかかる</a>)を先に見たほうが分かりやすいのかも知れない",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a11",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a12",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a13",
      "text": " 「Haskellが遅い」という主張にエアリーディングした人もいたようだが、あくまで「fib = 1:1:zipWith (+) fib (tail fib)が遅い(n = 100000ではPythonで素朴にループで書いたコードよりも！)」ということなので勘違いなさらないよう。実際最初のエントリーでも素朴な末尾再帰で書いて速くなってるわけだし。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a14",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a15",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a16",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a17",
      "text": " こんな感じですかね。なんか間違っていたらご指摘よろしくお願いします。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a18",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a19",
      "text": " *1279985270*今回の件で個人的に学んだことのまとめ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a1a",
      "text": " ** gnuplotの使い方",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a1b",
      "text": " - fit a*(x**b) \"data.txt\" via a, b",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a1c",
      "text": " - plot a*(x**b) \"data.txt\"",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a1d",
      "text": " - using (log ($1)):(log ($2))",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a1e",
      "text": " - set log x",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a1f",
      "text": " - unset log x",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a20",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a21",
      "text": " ** GC",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a22",
      "text": " - GCは想像以上にいろいろな処理のオーダーに影響を与える",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a23",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a24",
      "text": " ** 事実と解釈",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a25",
      "text": " 他人と解釈が食い違う場合、特に自分がある事実Xを見て解釈している場合に、相手は事実を見ていないんじゃないか、と思い込みがちだが、別の事実Yを見ている可能性もある。非生産的な議論を避けるためには速やかに事実を共有する必要がある。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a26",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a27",
      "text": " *1279985390*原稿をブログで書くメソッド",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a28",
      "text": " もうちょっと早く着手すべきだったなー。締切りを知った時点で締め切りが一週間後という。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a29",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a2a",
      "text": " 公平性を重んじて偏りがないように慎重に書くよりも、炎上しそうなことを勢いで書いてしまって反論を受けて修正する方がスピードは速いわけだが、うむむ。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a2b",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a2c",
      "text": " *1279999839*不完全にしてかなり言葉足らずな比較プログラミング言語学",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a2d",
      "text": " プログラミング言語は人が作ったもの。人は誤るもの。なので完璧なプログラミング言語は存在しない。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a2e",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a2f",
      "text": " 「人は誤るもの、しかし誤りに固執するのは馬鹿の所業だ。」(キケロ) プログラミング言語も、間違った設計をして、馬鹿でない人がそれを修正することの繰り返しで発展してきた。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a30",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a31",
      "text": " というわけで言語間での設計判断の食い違いとか失敗した設計とかを収集中。一部抜粋して講義資料に入れるつもりなので他の事例をご存知でしたらぜひ情報をいただけるとありがたいです。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a32",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a33",
      "text": " ** if(x = 0)",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a34",
      "text": " C言語では代入が式であるためif(x == 0)のつもりでif(x = 0)と書いてしまい、常に偽になってしまう。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a35",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a36",
      "text": " - x = 0の値はint、条件式はboolでないといけないので型エラーだよ派: Java",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a37",
      "text": " - x = 0は式ではないので条件式に入れたら構文エラーだよ派: Python",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a38",
      "text": " - 条件式にx = 0をいれたらx == 0と解釈するよ派: HMMMML ((http://twitter.com/HomeiMiyashita/status/19575507867))",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a39",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a3a",
      "text": " ** 値渡し、参照渡し",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a3b",
      "text": " C言語では関数を呼ぶ場合の引数の渡し方に、値渡ししかできなかった。変数のアドレスを取得し、それを値渡しし、呼び出し先でそのアドレスに間接アクセスすることで参照渡し風のことをすることができた。C++では呼び出し先で間接アクセスしないでいい参照渡しが導入された。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a3c",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a3d",
      "text": " Javaでは「変数のアドレスを取得する方法」を取り除いた。オブジェクトへのアクセスはC++の参照のような見かけで、しかし関数に渡す際にはアドレスの値渡しで行う(参照の値渡し)とした。それで十分であった。非オブジェクト(プリミティブ型)は従来通り値渡しにした。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a3e",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a3f",
      "text": " Pythonでは全てがオブジェクトのため、全てが参照の値渡しになった。整数や文字列などのプリミティブなものは変更不可能なオブジェクトにすることで「呼び出し先で破壊的変更を行うこと」を不可能にした。これによって参照が値渡しされていてもただの値渡しと同様になった。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a40",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a41",
      "text": " ** 値の範囲の定義",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a42",
      "text": " C言語では環境によって「intが何ビットであるか」などがまちまちのためプログラマに無駄な労力をさかせていた。Javaでは言語仕様としてintなどのプリミティブ型の大きさと値の範囲が定められている。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a43",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a44",
      "text": " ** 配列",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a45",
      "text": " Cの配列は長さを持たない。ただの「たまたま同じ型のデータが並んでいるメモリ領域の先頭へのポインタ」である。範囲外アクセスによる脆弱性の例は枚挙にいとまがない。Javaの配列は作成時点で長さが定められ、範囲外へのアクセスは例外を投げる。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a46",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a47",
      "text": " Javaの配列はファーストクラスのオブジェクトであり、関数の引数にそれ単体で渡すことができる。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a48",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a49",
      "text": " ** 関数へのポインタ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a4a",
      "text": " Cは関数へのポインタを作成することが出来る。ポインタはファーストクラスのオブジェクトなので関数の引数に関数を渡すことが出来る。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a4b",
      "text": " Javaではそもそも関数がない。リフレクションによってメソッドオブジェクトを取得することは出来る。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a4c",
      "text": " C++では関数の呼び出しオペレータを定義したクラスを作ることが出来る。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a4d",
      "text": " LispやHaskellやPythonの関数はファーストクラスのオブジェクトであり、なんら気兼ねなく関数の引数に渡すことが出来る。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a4e",
      "text": " Pythonでも関数の呼び出しオペレータを定義したクラスを作ることが出来る。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a4f",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a50",
      "text": " ** 関数呼び出しの括弧",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a51",
      "text": " 関数(メソッド)の呼び出しに",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a52",
      "text": " - たとえ引数がなくても括弧が必要派: Python",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a53",
      "text": " - たとえ引数がなくても括弧が必要、ただし外側にな、派: Lisp",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a54",
      "text": " - 引数がないときだけ括弧を省略できるよ派: D (thanks id:Dubhead)",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a55",
      "text": " - 括弧はいらないよ派: Perl, Ruby",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a56",
      "text": " - 括弧はいらないよ、引数が0個の関数？なにそれ定数じゃん派: Haskell",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a57",
      "text": " - 括弧はいらないよ、引数が0個の関数？引数に()を渡せ派: OCaml",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a58",
      "text": " - 関数はおろか演算子の結合順序を変える括弧もいらないよ、(1 + 2) * 3 は 1 2 + 3 * って書けよ派: Postscript, Forth",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a59",
      "text": " - 演算子の結合順序？計算は左からって決めればいいじゃん 1 + 2 * 3でいいよ派: Smalltalk",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a5a",
      "text": " - 演算は右から順だよ派: APL, J (thanks: straggler)",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a5b",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a5c",
      "text": " 引数のない関数呼び出しに括弧がいらない、かつ関数がファーストクラスの言語では、逆に「その関数自体」を意味する式をつくるために新しい文法が必要になる。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a5d",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a5e",
      "text": " たとえばPythonでこう書けるところを:",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a5f",
      "text": " >|python|",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a60",
      "text": " >>> def foo():",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a61",
      "text": " ...     print \"foo!\"",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a62",
      "text": " ... ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a63",
      "text": " >>> bar = foo",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a64",
      "text": " >>> bar()",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a65",
      "text": " foo!",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a66",
      "text": " ||<",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a67",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a68",
      "text": " Rubyではこう書く事になる",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a69",
      "text": " >|ruby|",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a6a",
      "text": " >> def foo",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a6b",
      "text": " >>   p \"foo!\"",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a6c",
      "text": " >> end",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a6d",
      "text": " => nil",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a6e",
      "text": " >> bar = Object.method(:foo)",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a6f",
      "text": " => #<Method: Class(Object)#foo>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a70",
      "text": " >> bar.call",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a71",
      "text": " \"foo!\"",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a72",
      "text": " => nil",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a73",
      "text": " ||<",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a74",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a75",
      "text": " ** 演算子オーバーロード",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a76",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a77",
      "text": " C++では演算子の多重定義が可能である。たとえば「+」が再定義できる。これは乱用するととても読みにくいコードになる。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a78",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a79",
      "text": " Javaでは演算子の多重定義を許さないようにした。結果、独自定義のクラスについてx + yと書きたくてもx.add(y)と書かざるを得なくなり、プログラムの可読性を損ねる結果となった。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a7a",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a7b",
      "text": " PythonやRubyなどでは再び演算子の多重定義を許している。乱用するなよ、みんな大人でしょ、というスタンスである。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a7c",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a7d",
      "text": " ** 多重継承",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a7e",
      "text": " C++は任意のクラスを多重継承できる。これはたまたま同じシグニチャのメソッド実装が複数あった場合にどの実装が選ばれるのか、という問題を引き起こす。((<a href='http://ja.wikipedia.org/wiki/%E8%8F%B1%E5%BD%A2%E7%B6%99%E6%89%BF%E5%95%8F%E9%A1%8C'>菱形継承問題 - Wikipedia</a>))",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a7f",
      "text": " Javaは実装を持ったクラスの継承は1つまでとすることでこの問題を回避した。実装を持たないクラス(インターフェイス)はいくつでも継承できる。しかしこれは「複数のクラスから実装を引き継げない」という不便さと引換である。Javaではこういうシチュエーションで、もっぱら実装のあるクラスFooへの参照を持っておいて自分のbarメソッドが呼ばれたらFooのbarメソッドを呼んでそっちに処理を任せるという書き方をする。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a80",
      "text": " Rubyは実装の継承を部分的に許すためにMix-inという概念を導入した。「インスタンスを作れず、クラスから継承もできない特殊なクラス」である「モジュール」をクラスに「混ぜ込む」構文を用意した。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a81",
      "text": " Pythonは多重継承をサポートして、メソッドの解決順序の決定にC3-Linearizationっていう比較的自然な結果が得られやすいアルゴリズムを採用して、「まあ、多重継承を乱用すると悲惨なことが起こるってみんな知ってるでしょ、大人でしょ、これで普通は問題起きないでしょ」というスタンスである。((PEP 283 -- Python 2.3 Release Schedule http://www.python.org/dev/peps/pep-0283/))",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a82",
      "text": " PerlはPythonと同じC3を併用可能だった。Perl 6からはデフォルトがC3になっている。 (( http://perldoc.jp/docs/modules/mro-1.00/mro.pod ))",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a83",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a84",
      "text": " ** GC",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a85",
      "text": " - GC必要でしょ、メモリのこと気にするのとかめんどくさいでしょ派: Lisp, Java, Python, Ruby, その他最近の言語のほとんど",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a86",
      "text": " - GCみたいなゆとりのための機能を入れて遅くなるとかありえん派: C",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a87",
      "text": " - GCみたいなゆとりのための機能を入れて遅くなるとかありえん、スマートポインタでだいたい用が済むだろ派: C++",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a88",
      "text": " - AutoreleasePoolでだいたい用は済むだろ、だけどやっぱりGCあった方が楽だよね派: Objective-C (thanks id:jmuk)",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a89",
      "text": " - 普通はGCを使うけど必要ならmalloc/freeもできるよ派: D (thanks id:Dubhead)",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a8a",
      "text": " - リージョン推論（region inference）試してみたけれど、リージョン推論だけでは速度が出なかった。なので GC も使う派: Haskell (thanks id:shelarcy)",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a8b",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a8c",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a8d",
      "text": " ** 変数の初期化",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a8e",
      "text": " - 初期化が必要なら必要なときにプログラマがやればいい。デフォルトでやるなどというゆとりのための機能で遅くなるとかありえん派: C, C++",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a8f",
      "text": " - 初期化されていない(値がなんだかわからない)変数の存在は危険なバグのもとであり許してはいけない、勝手に初期化しよう派: Java, D (thanks id:Dubhead)",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a90",
      "text": " - っていうか値を代入することでしか変数を作れないので未初期化の変数とかありえないし派: Python",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a91",
      "text": " - 未定義の変数に謎の値が入ってるのがダメなんだよ、「未定義」って値を入れとけばいいじゃん派: JS",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a92",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a93",
      "text": " ** グローバル変数",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a94",
      "text": " C言語はグローバル変数を定義できる。グローバル変数の乱用に起因する問題はプログラマの責任である。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a95",
      "text": " Javaではグローバル変数を定義できない。もしどこからでもアクセス可能なグローバル変数的なものが必要であれば、クラス名がどこからでもアクセス可能なことを利用する、というトリックがやはり場合により乱用されて問題を起こしたり。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a96",
      "text": " Pythonではグローバル変数を定義できるように見えるが、それはファイル単位のスコープである。グローバル変数を書き換えるには特別の「この関数はグローバル変数fooを書き換えるぞ」宣言が必要である。本当にどのファイルからでも参照できる変数が欲しければ__builtins__モジュールに動的に追加する。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a97",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a98",
      "text": " ** 整除の丸め方向",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a99",
      "text": " C, C++では整数の除算が割り切れなかった場合に0方向に丸めるのかマイナス無限大方向に丸めるのかが環境依存である。つまり、-1/2は0にも-1にもなりえる。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a9a",
      "text": " Javaでは常に0方向に丸める。C99も同様。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a9b",
      "text": " Haskellでは整数同士を「/」で除算することはできない。divとquotという二つの整除関数がありdivが-1, quotが0を返す。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a9c",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a9d",
      "text": " ** x / 0.0",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a9e",
      "text": " x / 0.0 をエラーにすべきか否か",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6a9f",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aa0",
      "text": " Ruby1.8ではNaNやInfinityにする。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aa1",
      "text": " Pythonでは例外を投げる。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aa2",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aa3",
      "text": " ** 0xxx型の8進法リテラル",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aa4",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aa5",
      "text": " >|python|",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aa6",
      "text": " >>> 1000 + 0100 + 0010 + 0001",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aa7",
      "text": " 1073",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aa8",
      "text": " ||<",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aa9",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aaa",
      "text": " - 0100は64だよ派: Python2.*, Java, Scala",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aab",
      "text": " - 0o100と0O100は64だよ派: Python3.0, Haskell",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aac",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aad",
      "text": " Haskellの仕様を見て大文字のOを許容するとかダメだろ、と思ったらPython3.0でも同じだった",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aae",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aaf",
      "text": " ** long intのリテラルに小文字のエルを許す",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ab0",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ab1",
      "text": " 大文字Oで思いついたので:",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ab2",
      "text": " >|python|",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ab3",
      "text": " >>> 100l == 100",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ab4",
      "text": " True",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ab5",
      "text": " ||<",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ab6",
      "text": " - Yes: Python2.6",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ab7",
      "text": " - No: D (>= 0.154 http://www.digitalmars.com/d/1.0/changelog2.html#new0154 ) thanks id:hzkr",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ab8",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ab9",
      "text": " ** 整数演算の結果がintの範囲を超えたときに自動的に表現力の大きい型に変更する",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aba",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6abb",
      "text": " Cで書かれたビット演算のコードとかを丸写しすると、「<<」で上位ビットが捨てられているようなところで長整数型に変わってしまって結果が合わないという罠。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6abc",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6abd",
      "text": " しかし数値をビットの塊として認識していない人にとっては「人間の都合で上限が定められていて、それを超えても例外を投げるでもなく変な値になるってのはおかしい」という主張もまあ一理ある。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6abe",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6abf",
      "text": " -上限のない整数になるべきだ派: Python、Ruby",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ac0",
      "text": " -勝手に変換するのはよくない派: C, Java",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ac1",
      "text": " -ていうか整数なんてないし派: JS",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ac2",
      "text": " -そもそも上限のない方がデフォルトだし派: Haskell",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ac3",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ac4",
      "text": " ** 変数への再代入を許すかどうか",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ac5",
      "text": " - え、当然許すよ何言ってんの派: Python",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ac6",
      "text": " - 定数はあったほうがいいよね。大文字で始まるのは定数。まあ再代入しても警告しか出さないけど派: Ruby",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ac7",
      "text": " - 再代入させたくないものだけconstとかfinalとかつけたらいいじゃん派: C++, Java",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ac8",
      "text": " - 変数への再代入なんて諸悪の根源だ派:",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ac9",
      "text": " -- だから一切認めないッッ派: Haskell",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aca",
      "text": " -- でも完全に禁止すると実用的じゃないから書き込める場所を用意しましたor用意する方法を作りました派: Erlang, OCaml",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6acb",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6acc",
      "text": " ** 演算子の優先順位について",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6acd",
      "text": " Pascalでは加算演算子(+, -, orなど)は乗算演算子(*, /, andなど)より優先順位が低く、比較演算子(==, >など)はさらに低い。つまり 「4 + 1 * 2 == 3 * 2」は「(4 + (1 * 2)) == (3 * 2)」と解釈される。これは自然。しかし「0 < x and x < 9」は「0 < (x and x) < 9」になってコンパイルエラー",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ace",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6acf",
      "text": " 他の多くの言語では条件演算子(and, or)が算術演算子(*, /, +, -など)より低い優先順位になっている。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ad0",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ad1",
      "text": " C では x \u001f== y & z が (x == y) & z となる(thanks @mametter)",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ad2",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ad3",
      "text": " ** 比較演算子の連続について",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ad4",
      "text": " - 0 < x && x <= 9とか頻出パターンだし複数の比較の連続で一つの式って構文にしようよ。 0 < x <= 9 って書けるよ派: Python",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ad5",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ad6",
      "text": " ** 単項演算子のマイナス",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ad7",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ad8",
      "text": " Haskellでは「f -1」が「f - 1」と解釈されるので「f (-1)」と書かなければいけない。逆に演算子の部分適用で(/ 2)は「2で割る関数」になるが(- 1)は-1と解釈される。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ad9",
      "text": " SMLでは ~1、J言語では _1。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ada",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6adb",
      "text": " ** ループ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6adc",
      "text": " - ループをするにはforとかwhileとかgotoとかいろいろな方法があるよ派: C",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6add",
      "text": " - gotoは悪だ、forとwhileだけでいいだろ派: Java",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ade",
      "text": " - 末尾再帰がジャンプに置き換えられるから再帰呼び出しでループするのもありだよ派: Lisp",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6adf",
      "text": " - むしろループいらないよねmapとfoldlあるし派: Haskell",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ae0",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ae1",
      "text": " ** 空リストの型",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ae2",
      "text": " Cambridge LCF の MLではかつてlet x = ref [] で polymorphic な \\forall a. a list ref が作れた",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ae3",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ae4",
      "text": " xにintの値を入れてからポインタとして取り出してアクセスすることができてしまう。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ae5",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ae6",
      "text": " SML '97 Types and Type Checking http://www.smlnj.org/doc/Conversion/types.html",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ae7",
      "text": " thanks id:camlspotter",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ae8",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ae9",
      "text": " ** インデントと実際の構造の不一致",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aea",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aeb",
      "text": " C言語では下のようにif文を書くことができる。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aec",
      "text": " >|c|",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aed",
      "text": " if (x > 0)",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aee",
      "text": "   when_x_is_positive();",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aef",
      "text": " ||<",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6af0",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6af1",
      "text": " x > 0の時に別の処理を追加しようと考えてこんな書き方をしてはいけない",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6af2",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6af3",
      "text": " >|c|",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6af4",
      "text": " if (x > 0)",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6af5",
      "text": "   when_x_is_positive();",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6af6",
      "text": "   another_task();",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6af7",
      "text": " ||<",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6af8",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6af9",
      "text": " これは下のような意味であり、another_task()は常に実行される。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6afa",
      "text": " >|c|",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6afb",
      "text": " if (x > 0) {",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6afc",
      "text": "   when_x_is_positive();",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6afd",
      "text": " }",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6afe",
      "text": " another_task();",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6aff",
      "text": " ||<",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b00",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b01",
      "text": " また下のコードにもインデントと構造の不一致がある。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b02",
      "text": " >|c|",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b03",
      "text": " if (x > 0) ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b04",
      "text": "     if (y > 0)",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b05",
      "text": " \tall_positive();",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b06",
      "text": " else ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b07",
      "text": "     x_isnt_positive();",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b08",
      "text": " ||<",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b09",
      "text": " x == -1の時にx_isnt_positive()は呼ばれない。代わりにx == 1, y == -1の時に呼ばれる。このコードは下のような構造である。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b0a",
      "text": " >|c|",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b0b",
      "text": " if (x > 0) {",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b0c",
      "text": "     if (y > 0) {",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b0d",
      "text": " \tall_positive();",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b0e",
      "text": "     } else {",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b0f",
      "text": "         x_isnt_positive();",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b10",
      "text": "     }",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b11",
      "text": " }",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b12",
      "text": " ||<",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b13",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b14",
      "text": " Cではプログラマが気をつけるか、braces {}を付けろ＆正しくインデントしろというコーディング規約で回避する。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b15",
      "text": " Rubyではendで閉じる。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b16",
      "text": " Pythonでは発想を逆転してインデントをもとに構造を決める。下記のコードは見ためどおりに動く。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b17",
      "text": " >|python|",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b18",
      "text": " if x > 0:",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b19",
      "text": "     if y > 0:",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b1a",
      "text": " \tall_positive()",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b1b",
      "text": " else:",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b1c",
      "text": "     x_isnt_positive()",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b1d",
      "text": " ||<",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b1e",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b1f",
      "text": " QuickBASICやHMMMML(( http://miyashita.com/HMMMML.pdf ))では他の言語における「end」や「}」でのブロック終了がどのブロックの終了であるのか分かりにくい点を改善するため「If ~ End If」(QB)「&lt;/if>」(HMMMML)などを用いる。",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b20",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b21",
      "text": " ** レシーバの受け取り方",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b22",
      "text": " obj.method(arg)的なコードを実行したときにmethodの中ではどうやってobjにアクセスするのかと言う話",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b23",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b24",
      "text": " - レシーバは明示的に仮引数として受け取る派: Python, C (thanks @mametter)",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b25",
      "text": " - メソッド内でanother_method()がobj.another_method()を意味しているのでレシーバを意識する必要はないけどレシーバ自体をどうこうしたい時にはthisに入っているよ派: Java",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b26",
      "text": " - レシーバ？それ単なる引数だろ、特別なものじゃないじゃん派: Common Lisp with CLOS, Haskell",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b27",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b28",
      "text": " ** 文字列オブジェクトは破壊的に変更できるか？",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b29",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b2a",
      "text": " - はい: Ruby, C++",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b2b",
      "text": " - いいえ: Python, Java",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b2c",
      "text": " - 文字列？なにそれ？char*のこと？: C",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b2d",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b2e",
      "text": " ** 文字列と数値を自動変換するか？",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b2f",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b30",
      "text": " PHPの場合",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b31",
      "text": " >||",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b32",
      "text": " $ php -r 'print \"1\" + \"2\";'",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b33",
      "text": " 3",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b34",
      "text": " $ php -r 'print \"1\" . \"2\";'",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b35",
      "text": " 12",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b36",
      "text": " $ php -r 'print \"1\" . 2;'",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b37",
      "text": " 12",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b38",
      "text": " $ php -r 'print \"1\" + 2;'",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b39",
      "text": " 3",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b3a",
      "text": " ||<",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b3b",
      "text": " Perlも同じ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b3c",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b3d",
      "text": " - 文字列と数値は自動的に変換するよ、だから文字列の結合と数値の足し算は別の演算子だよ派: Perl, PHP",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b3e",
      "text": " - それは型エラーにするよ派: Python, Ruby",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b3f",
      "text": " - 数値に限らずオブジェクトは自分の文字列化の方法を知っているはず(toString)だから文字列への変換はしてもいいんじゃない？派: Java",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b40",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b41",
      "text": " ** 1/2は何になる？",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b42",
      "text": " - 整数の0だよ派: Python2.*, Ruby, OCaml",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b43",
      "text": " - 浮動小数点数の0.5だよ派: Python3.*",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b44",
      "text": " - 有理数の1/2だよ派: Scheme",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b45",
      "text": " - 念のために確認するとその1や2ってのは Int じゃなくて (Num a) => a だよな？だったら計算結果は(Fractional a) => a だな。これは浮動小数点数と有理数のどちらでもありうる型クラスで、どちらになるかは型推論で決まる。ちなみに推論によって決定できないときにはDefaultingと(省略されました。続きを読むには<a href=\"http://www.haskell.org/onlinereport/decls.html#sect4.3.4\">こちら</a>): Haskell",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b46",
      "text": " - 数値はデフォルトでBigDecimalだよ派: Groovy",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b47",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b48",
      "text": " ** オブジェクト指向",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b49",
      "text": " - データと手続きを分けて管理するのは面倒だから、ひとまとめにしたオブジェクトとかクラスとかあると幸せになるんじゃない？: Simula",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b4a",
      "text": " - すべてはオブジェクトとその間のメッセージのやりとりで表現できるんだよ!メッセージ！メッセージ！: Smalltalk",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b4b",
      "text": " - なにそれ遅い…: C",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b4c",
      "text": " - ふむ、Simulaのクラスって概念はいいものだ。採用！要するにstructで既存の型を組み合わせて新しい型を作ってたのの延長で、そこに関数も組み合わせてひとかたまりにできればいいわけだよね。あ、あと継承ね。これも便利。採用！アクセス制限？ふむ、これもいれとくか。メッセージ？…なにそれおいしいの？: C++",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b4d",
      "text": " - プログラミングとはクラスを定義してオブジェクトを作ることなんだよ！オブジェクト！オブジェクト！え？プリミティブ型はオブジェクトじゃないじゃんって？えっと、まあ、それはそのパフォーマンスのためとかさ（ごにょごにょ): Java",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b4e",
      "text": " - じゃじゃーん、整数とかもオブジェクトにしたよ！プリミティブ型も自動でオブジェクトに変換するよ！オブジェクト！オブジェクト！: Java 5",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b4f",
      "text": " - っていうか要するにデータを持っておくハッシュと、関数の入っているモジュールを貼り合わせる手段があればいいだけだよね: Perl",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b50",
      "text": " - そもそも関数がファーストクラスのオブジェクトならハッシュにだって入るじゃん。これでいいんじゃない？: JavaScript",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b51",
      "text": " - そもそも名前空間自体が辞書(ハッシュ)だよね。手軽に名前空間を作れて関数を入れられて、ついでに継承とかメソッドとインスタンスのバインディングとか便利な機能がついてくる！これでよし！: Python",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b52",
      "text": " - privateとかいらないよねー派: Perl, JavaScript, Python",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b53",
      "text": " - 世間のスクリプト言語がprivateを軽視しすぎ！許せん！派: Ruby",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b54",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b55",
      "text": " ** 真偽値",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b56",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b57",
      "text": " - 真と偽の値はこちらが用意する。それ以外を条件式に入れたら型エラーだぞ派: Java, Haskell",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b58",
      "text": " - 0がfalse、それ以外は真だよ派: C",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b59",
      "text": " - #fが偽、それ以外は(0も)真だよ派: Scheme",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b5a",
      "text": " - falseとnilが偽、それ以外は(0も)真だよ派: Ruby",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b5b",
      "text": " - falseとnullとundefinedと0と空文字列とNaNが偽だよ: JavaScript",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b5c",
      "text": " - FalseとNoneと0なオブジェクトと空のオブジェクトが偽だよ: Python (( http://www.python.jp/doc/2.4/lib/truth.html ))",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b5d",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b5e",
      "text": " ** スコープ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b5f",
      "text": " - 静的スコープだよ、だって動的スコープとか大変じゃん派: ALGOL, C, Pascal",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b60",
      "text": " - 動的スコープだよ派: 初期のLisp, 初期のPerl",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b61",
      "text": " - 動的スコープと静的スコープ両方あるといいよね派: CommonLisp, Perl(my/local)",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b62",
      "text": " - Lispが動的スコープいれたのって失敗じゃない？派: Scheme, Python ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b63",
      "text": " - スコープ？なにそれおいしいの？: BASIC",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b64",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b65",
      "text": " ** 配列の範囲外アクセス",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b66",
      "text": " ",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b67",
      "text": " - 何か適当なものを返す: Ruby(nil), JavaScript(undefined)",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b68",
      "text": " - 例外を投げる: Python, Java",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b69",
      "text": " - 死ぬかも知れない: C",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b6a",
      "text": " </body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b6b",
      "text": " <comments>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b6c",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b6d",
      "text": " <username>shinichiro_h</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b6e",
      "text": " <body>スタック上の O(n^2) がおかしいです。最大スタックサイズは N に比例してるはずです。同様にスタック上に巨大な Integer は無いと思います。<br><br>GC を呼ぶ頻度の方が O(N) 以上に見える挙動をしていて、その理由は、最初の方は k 回に一度くらいだったのに、後半では allocation のたびに GC が発動している、という話ではないかという話です。</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b6f",
      "text": " <timestamp>1279984844</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b70",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b71",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b72",
      "text": " <username>nishiohirokazu</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b73",
      "text": " <body>GCを呼ぶ頻度がO(n)以上なのは「固定長のマイナーヒープが埋まるとGCが起こる」と「fibがほぼ指数関数なため、1回の呼び出しごとにallocateされるメモリがO(n)になるから、全体としてはO(n^2)のメモリがallocされる」から当たり前のような気がしますが、スタック上にIntegerがないってどういうことでしょう？</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b74",
      "text": " <timestamp>1279986873</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b75",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b76",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b77",
      "text": " <username>shinichiro_h</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b78",
      "text": " <body>えーと Integer はヒープにあるんじゃないでしょうか。それともスタックから参照はされてるという意味でスタックにあると書いておられる？いずれにせよ Haskell みたいな言語で GC が多倍長整数の中をなめるとは思えないので一回の GC のコストは O(N) じゃないでしょうか。</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b79",
      "text": " <timestamp>1279989620</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b7a",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b7b",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b7c",
      "text": " <username>nishiohirokazu</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b7d",
      "text": " <body>なるほどなるほど、O(N^3)になる理由を勘違いしていました。GC自体はO(N)だけどそれの頻度が増えるからO(N^3)なのですね。</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b7e",
      "text": " <timestamp>1279999950</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b7f",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b80",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b81",
      "text": " <username>nishiohirokazu</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b82",
      "text": " <body>修正しました。</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b83",
      "text": " <timestamp>1280000658</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b84",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b85",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b86",
      "text": " <username>ujihisa</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b87",
      "text": " <body>> 関数呼び出しには引数が2個以上の時だけ括弧が必要派: Ruby<br><br>f(a, b)<br>f a, b</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b88",
      "text": " <timestamp>1280021712</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b89",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b8a",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b8b",
      "text": " <username>nishiohirokazu</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b8c",
      "text": " <body>あ、そうか、ありがとう。修正しました！</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b8d",
      "text": " <timestamp>1280022337</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b8e",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b8f",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b90",
      "text": " <username>qnighy</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b91",
      "text": " <body>J言語は演算子としての-とリテラルとしての_があるという面白い仕様ですしほんと面白いですしほんとみんな興味もてばいいと思います<br>例 -2 3 4 5 は _2 _3 _4 _5 と同じ(-はベクトル値全部に対して適用されるため)</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b92",
      "text": " <timestamp>1280032290</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b93",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b94",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b95",
      "text": " <username>どようび</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b96",
      "text": " <body>> 文字列オブジェクトは破壊的に変更できるか？<br>「はい」にC++を追加でお願いします</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b97",
      "text": " <timestamp>1280043571</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b98",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b99",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b9a",
      "text": " <username>たまたま来ました</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b9b",
      "text": " <body>>> def foo<br>>>   p \"foo!\"<br>>> end<br>=> nil<br>foo # => \"foo\"<br><br>だけで十分だと思うのですが</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b9c",
      "text": " <timestamp>1280059226</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b9d",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b9e",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6b9f",
      "text": " <username>kudzu_naoki</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ba0",
      "text": " <body>値渡し、参照渡しの項の最後、Pythonについて、「値渡しされていてもただの値渡しと同様になった」は「値渡しされていてもただの参照渡しと同様になった」ですよね。挙げ脚とりコメントすみません。</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ba1",
      "text": " <timestamp>1280105530</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ba2",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ba3",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ba4",
      "text": " <username>Dubhead</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ba5",
      "text": " <body>D言語の珍しいとこだけ<br>○引数0個なら、関数やメソッド呼び出しの括弧を省略できるよ派<br>○普通はGCを使うけど必要ならmalloc/freeもできるよ派<br>○変数の初期化: 型によって初期値が決まってるよ派 (例: int i; ならiは0。使われない初期値は設定しないようコンパイラががんばる。もちろん int i = 42; とかも出来る。)</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ba6",
      "text": " <timestamp>1280108937</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ba7",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ba8",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ba9",
      "text": " <username>nishiohirokazu</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6baa",
      "text": " <body>qnighy><br>J言語がすごく面白いということには同意します(もちろん変態的な意味で)<br><br>どようび><br>追加しました！ありがとうございます！<br><br>たまたま来ました><br>主張の意図がわかりません。<br><br>kudzu_naoki><br>いいえ。Javaのように参照を値渡しした場合、呼び出し先で破壊的なメソッドを呼ばれると呼び出し元のオブジェクトも影響をうけるわけですが、Pythonはそのあたりをプリミティブなクラスに破壊的なメソッドを付けないという方法で「呼び出し元に影響を与えようがない＝値渡しと同等」となったわけです。日本語分かりにくいですね、いい修正案があればお願いします。<br><br>Dubhead><br>追加しておきます！ありがとうございます！！</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bab",
      "text": " <timestamp>1280110756</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bac",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bad",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bae",
      "text": " <username>とーりすがり</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6baf",
      "text": " <body>> GCみたいなゆとりのための機能をデフォルトで入れるとかありえん、<br>> スマートポインタでだいたい用が済むだろ派: C++<br>C++の設計と進化によれば、C++ に GC が入らない(入らなかった)のは、ゼロオーバヘッドの原則(ある機能を使用するための追加サポートは、その機能を使用しない場合は影響を及ぼさない)に反するからです<br>なので、スマートポインタでだいたい用が済むだろ派というよりは、遅くなるとかありえん派に近いと思いました</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bb0",
      "text": " <timestamp>1280115827</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bb1",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bb2",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bb3",
      "text": " <username>eldesh</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bb4",
      "text": " <body>＞C言語では環境によって「intが何ビットであるか」などがまちまちのためプログラマに無駄な労力をさかせていた。<br>これはまぁ、そうなのかも知れませんが、話が逆なんじゃないかと。<br>つまり、ビット幅に依存しないようなコードをレジスタのビット長が異なるプラットフォーム間でやり取りするためにintのビット長を定めていないのではないでしょうか？<br>現状ではプログラマに無駄な労力を強いているかも知れませんが、「昔の人が間違った」例では無いと思います。<br>(int32_tとか使えばいいわけですし)</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bb5",
      "text": " <timestamp>1280132620</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bb6",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bb7",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bb8",
      "text": " <username>dankogai</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bb9",
      "text": " <body>#Perl:関数呼び出しには基本括弧不要派<br>system 'rm', '-rf', '/';<br># あと、空気読む派読まない派も欲しいな。perlやscalaの_とか<br>Dan the Man with too Many Languages to Speak</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bba",
      "text": " <timestamp>1280141742</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bbb",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bbc",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bbd",
      "text": " <username>nishiohirokazu</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bbe",
      "text": " <body>とーりすがり><br>「デフォルトでいれると遅くなるからありえん」という趣旨が伝わりにくいようなので加筆しました。<br><br>eldesh><br>もっとわかりやすい「昔の人が間違った例」をご存知でしたらぜひご教授いただけると幸いです。<br><br>dankogai><br>ありがとうございます！加筆しました！</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bbf",
      "text": " <timestamp>1280143691</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bc0",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bc1",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bc2",
      "text": " <username>straggler</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bc3",
      "text": " <body>>演算子の結合順序？計算は左からって決めればいいじゃん 1 + 2 * 3でいいよ派: Smalltalk<br>演算は右から順だよ派: APL, J</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bc4",
      "text": " <timestamp>1280340334</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bc5",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bc6",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bc7",
      "text": " <username>ツムジ</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bc8",
      "text": " <body>「関数呼び出しの括弧」の内容について……<br>Ruby でも、<br>irb(main):001:0> def foo<br>irb(main):002:1>   p \"foo!\"<br>irb(main):003:1> end<br>=> nil<br>irb(main):004:0> bar = foo<br>\"foo!\"<br>=> \"foo!\"<br>irb(main):005:0> bar<br>=> \"foo!\"<br>という具合にできますが、これは Python と同じでは？<br><br>ちなみに<br>irb(main):006:0> foo = \"abc\"<br>=> \"abc\"<br>irb(main):007:0> foo<br>=> \"abc\"<br>といったようにメソッド名と変数名がかぶった場合、変数名が優先されますが、<br>その場合でもカッコを付けて呼び出してやれば、きちんとメソッド名として認<br>識されます。<br>irb(main):008:0> foo()<br>\"foo!\"<br>=> \"foo!\"</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bc9",
      "text": " <timestamp>1280396426</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bca",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bcb",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bcc",
      "text": " <username>nishiohirokazu</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bcd",
      "text": " <body>ツムジ> これは Python と同じでは？<br>いいえ。<br>なぜ<br>irb(main):004:0> bar = foo<br>\"foo!\"<br>=> \"foo!\"<br>と出力されているのかを考えてみましょう。あとbar.classも試してみてはどうかと。</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bce",
      "text": " <timestamp>1280397295</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bcf",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bd0",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bd1",
      "text": " <username>ツムジ</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bd2",
      "text": " <body>　ご指摘を受けて、自分の勘違いに気付きました。私のコードでは foo メソッ<br>ドの返値である \"foo!\" が bar に束縛されていただけだったのですね。<br><br>　ところで、もう一度ブログの記事を読み直してみて引っかかったことがあっ<br>たのでついでに……。<br>　Ruby は純粋なオブジェクト指向言語なので、関数型言語のようにメソッドが<br>単独でファーストクラスになることはありません。<br>　今回のようにトップレベルで定義されたメソッドは Object クラスのプラ<br>イベートメソッドになります。トップレベルで foo メソッドを定義した場合、<br>Object.private_methods を実行することで確認できます。</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bd3",
      "text": " <timestamp>1280461562</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bd4",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bd5",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bd6",
      "text": " <username>nishiohirokazu</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bd7",
      "text": " <body>straggler><br>追加しました！ありがとうございます！<br><br>ツムジ> Ruby は純粋なオブジェクト指向言語なので、関数型言語のようにメソッドが<br>単独でファーストクラスになることはありません。<br><br>ご主張の内容が2つの点で理解できません。<br>- 「純粋なオブジェクト指向言語」という言葉の意味が分からない点<br>- 「メソッドが単独でファーストクラスになることはありません」<br><br>>> bar = Object.method(:foo)<br>=> #<Method: Class(Object)#foo><br><br>このメソッドオブジェクトはファーストクラスであるように見えますが、そうではないという主張でしょうか？<br>オブジェクト指向であるかどうかとメソッドや関数がファーストクラスであるかどうかは背反ではなく、Rubyは両立していて、だがそういう関数型言語的なコーディングスタイルを重視していないので、Pythonに比べてそういう書き方がやりづらい文法を採用している、と私は理解しています。</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bd8",
      "text": " <timestamp>1280465633</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bd9",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bda",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bdb",
      "text": " <username>ツムジ</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bdc",
      "text": " <body>コメント欄に書ききれないので、ブログの記事を書きました。http://tsumuji.cocolog-nifty.com/tsumuji/2010/08/ruby-python-108.html</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bdd",
      "text": " <timestamp>1280606229</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bde",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bdf",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6be0",
      "text": " <username>nishiohirokazu</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6be1",
      "text": " <body>なるほどなるほど、そちらは「メソッド」という言葉でMethodオブジェクトを意味 *しない* わけですね。「(インスタンスの情報のない)メソッドが単独でファーストクラスになることはありません」ということをおっしゃっているならそのとおりです。なので、Object.method(:foo)やFoo.new.method(:bar)などとやって「(インスタンスを束縛した)メソッド」を作る必要がある、というのが大本の文章の趣旨でした。括弧の中を省略していたのが誤解の原因ですね。</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6be2",
      "text": " <timestamp>1280645253</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6be3",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6be4",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6be5",
      "text": " <username>ツムジ</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6be6",
      "text": " <body>Rubyの世界では「メソッド」といえば普通「クラスメソッド」や「インスタンスメソッド」を思い浮かべると思います。「メソッド」といわれていきなりMethodオブジェクトを思いつく人はあんまりいないと思いますよ。</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6be7",
      "text": " <timestamp>1280659864</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6be8",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6be9",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bea",
      "text": " <username>nishiohirokazu</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6beb",
      "text": " <body>へえ、そうなのですか、それは知りませんでした。「Rubyの世界ではそういう解釈が普通」と主張されているわけなのですね。ご意見ありがとうございます。</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bec",
      "text": " <timestamp>1280673473</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bed",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bee",
      "text": " <comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bef",
      "text": " <username>sumim</username>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bf0",
      "text": " <body>ツムジさん、<br><br>Smalltalkは、Ruby同様オブジェクト指向パラダイムしかサポートしませんが、Rubyと違ってメソッドはファーストクラスですし（f := Integer compiledMethodAt: #factorial …のように）代入したり、それが属するクラスとは関係なく静的なコールも可能です。参考まで。</body>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bf1",
      "text": " <timestamp>1280833322</timestamp>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bf2",
      "text": " </comment>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bf3",
      "text": " </comments>",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bf4",
      "text": "",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6bf5",
      "text": "[はてなダイアリー 2010-07-24 https://nishiohirokazu.hatenadiary.org/archive/2010/07/24]",
      "created": 1279897200,
      "updated": 1279897200,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}