{
  "id": "6090ec0ca287e6002291a2b1",
  "title": "Hatena2013-06-12",
  "created": 1370962800,
  "updated": 1370962800,
  "lines": [
    {
      "id": "6090ec30aff09e00003de6fb",
      "text": "Hatena2013-06-12",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de6fc",
      "text": "code:hatena",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de6fd",
      "text": " <body>",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de6fe",
      "text": " *1371024081*分布が部分空間に落ちていないかチェックする",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de6ff",
      "text": " 某所で「あるN-bitの列がN次元空間中で均等に分布しているかどうか確認したい」という話題が出てて、面白そうだったので書いてみた。",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de700",
      "text": " ",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de701",
      "text": " まず正しく6次元空間に分布している例。",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de702",
      "text": " >|python|",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de703",
      "text": " >>> from pylab import *",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de704",
      "text": " >>> data1 = [[random_integers(0, 1) for _x in range(6)] for _y in range(100)]",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de705",
      "text": " >>> from matplotlib.mlab import PCA",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de706",
      "text": " >>> PCA(array(data1))",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de707",
      "text": " <matplotlib.mlab.PCA instance at 0x110a23368>",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de708",
      "text": " ",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de709",
      "text": " >>> _.fracs",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de70a",
      "text": " array([ 0.22253508,  0.18659093,  0.17676459,  0.15136027,  0.14785211,",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de70b",
      "text": "         0.11489702])",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de70c",
      "text": " ||<",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de70d",
      "text": " ",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de70e",
      "text": " 主成分分析の結果のfracsは寄与率を返す。だいたい1/6(0.166...)前後になっているのがわかる。データの個数を100個と少ないので0.22～0.11とばらついているけど。",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de70f",
      "text": " ",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de710",
      "text": " 一方、軸の間に相関がある場合。",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de711",
      "text": " >||",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de712",
      "text": " >>> def make_vec():",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de713",
      "text": "     ret = [random_integers(0, 1) for _x in range(3)]",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de714",
      "text": "     return ret + ret",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de715",
      "text": " ",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de716",
      "text": " >>> data2 = [make_vec() for _y in range(100)]",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de717",
      "text": " >>> PCA(array(data2))",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de718",
      "text": " <matplotlib.mlab.PCA instance at 0x111cef7a0>",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de719",
      "text": " ",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de71a",
      "text": " >>> _.fracs",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de71b",
      "text": " array([  3.83213080e-01,   3.30321515e-01,   2.86465405e-01,",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de71c",
      "text": "          3.05496905e-31,   5.77068439e-32,   6.60331164e-33])",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de71d",
      "text": " ||<",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de71e",
      "text": " ",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de71f",
      "text": " このケースでは実質的には3次元の部分空間上にしか分布していないので、主成分分析の結果の寄与率が4～6番目の軸に関してとても小さくなっていることがわかる。",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de720",
      "text": " ",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de721",
      "text": " もちろん「各軸の間に相関はないけども暗号論的には適切でない分布」はこの方法では判別できないけども、この方法は手軽に試せるので最初の一歩として確認してみると良いのではないだろうか。",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de722",
      "text": " ",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de723",
      "text": " 追記: 「各軸ごとの平均値をみたらいいんじゃない？」という質問があったけども、それは「v[0]が常に0」みたいなタイプの潰れ方には有効だが、 この例のような「v[0] == v[3]」という潰れ方に気づくことができません。ただ、この方法でも「v[6] = v[0] ^ v[1] ^ ... ^ v[5]」みたいな潰れ方には気づくことができません。",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de724",
      "text": " </body>",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de725",
      "text": "",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de726",
      "text": "[はてなダイアリー 2013-06-12 https://nishiohirokazu.hatenadiary.org/archive/2013/06/12]",
      "created": 1370962800,
      "updated": 1370962800,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}