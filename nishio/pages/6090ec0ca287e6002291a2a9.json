{
  "id": "6090ec0ca287e6002291a2a9",
  "title": "Hatena2013-04-20",
  "created": 1366383600,
  "updated": 1366383600,
  "lines": [
    {
      "id": "6090ec30aff09e00003de441",
      "text": "Hatena2013-04-20",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de442",
      "text": "code:hatena",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de443",
      "text": " <body>",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de444",
      "text": " *1366388496*評価戦略について",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de445",
      "text": " 「<a href=\"http://www.amazon.co.jp/gp/product/477415654X/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=477415654X&linkCode=as2&tag=nishiohirokaz-22\">コーディングを支える技術</a>」の書評で、評価戦略についていくつかご意見をいただきました。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de446",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de447",
      "text": " >>",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de448",
      "text": " id:dankogai  評価戦略がまるまる抜けてしまったのは残念である。かつては事実上先行評価しかなく、評価戦略において選択肢があること自体ほとんど知られていなかったが、今では遅延評価を主体とする言語も普及したとまでは言えないものの、充分実用的に使われるようになってきている。著者はもちろんHaskellを知っているし、本書にも登場するにも関わらず、これが抜けているというのはなんとももったいない。もし改訂版を著す機会があったら、絶対に一章割いていただきたい。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de449",
      "text": " <<",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de44a",
      "text": " http://blog.livedoor.jp/dankogai/archives/51864510.html",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de44b",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de44c",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de44d",
      "text": " 確かに、世の中の大部分の言語が先行評価なせいで「そういうもんだ」と思い込んでしまっている人も多そうですね。そういう人にHaskellでunsafePerformIOとか使って「ほら違う言語もある」と見せてあげると目からウロコを落とせていいかもしれません。その上でサンクとかの説明に進むか、それとも時代を遡ってALGOL 60の名前渡しとかの話をするか…。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de44e",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de44f",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de450",
      "text": " >>",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de451",
      "text": " id:matarillo 先行／遅延がないという指摘。ifや?:の話にからめて正格／非正格の話をしてもよかったはず。(ifを関数にできるか？とかそういうヤーツ)",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de452",
      "text": " <<",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de453",
      "text": " http://b.hatena.ne.jp/entry/blog.livedoor.jp/dankogai/archives/51864510.html",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de454",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de455",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de456",
      "text": " なるほど、Smalltalkが条件分岐を実現している仕組みを解説するとか、LISPのマクロを使って自分でifを作ってみるっていうのも面白いかもしれませんね。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de457",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de458",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de459",
      "text": " …と普段だとこれくらいで済ませてしまうのですが、これはきっと弾さんのような「わかっている人」を読者として想定しているせいなんですね。このテンションで書籍の原稿を書いてしまうと読者は置いてけぼりになってしまいます。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de45a",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de45b",
      "text": " そこで、本の下書きを書くつもりでブログ記事を書いて公開することにします。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de45c",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de45d",
      "text": " <hr>",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de45e",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de45f",
      "text": " 関数fooと関数barが foo(bar(1)) という形で使われていたら、どちらの関数が先に呼ばれるでしょうか？",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de460",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de461",
      "text": " 例えばPythonで下のようなコードを書いて実行したらどうなるでしょう？",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de462",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de463",
      "text": " >|python|",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de464",
      "text": " def foo(x):",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de465",
      "text": "     print \"foo\"",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de466",
      "text": "     return x + 1",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de467",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de468",
      "text": " def bar(x):",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de469",
      "text": "     print \"bar\"",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de46a",
      "text": "     return x * 2",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de46b",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de46c",
      "text": " print foo(bar(1))",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de46d",
      "text": " ||<",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de46e",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de46f",
      "text": " このコードの実行結果は以下のようになります。barが先に呼ばれているわけです。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de470",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de471",
      "text": " >||",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de472",
      "text": " bar",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de473",
      "text": " foo",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de474",
      "text": " 3",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de475",
      "text": " ||<",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de476",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de477",
      "text": " この結果に驚く人はさほど多くないかなと思います。C言語でもJavaでも同じ挙動ですから。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de478",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de479",
      "text": " でも、この挙動はすべての言語で共通というわけではありません。Haskellの例を見てみましょう。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de47a",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de47b",
      "text": " >|haskell|",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de47c",
      "text": " import System.IO.Unsafe",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de47d",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de47e",
      "text": " foo x = unsafePerformIO $ do",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de47f",
      "text": "           print \"foo\"",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de480",
      "text": "           return (x + 1)",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de481",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de482",
      "text": " bar x = unsafePerformIO $ do",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de483",
      "text": "           print \"bar\"",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de484",
      "text": "           return (x * 2)",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de485",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de486",
      "text": " main = print $ foo(bar(1))",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de487",
      "text": " ||<",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de488",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de489",
      "text": " このコードの実行結果は以下のようになります。先ほどと違ってfooが先に呼ばれていることがわかりますね。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de48a",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de48b",
      "text": " >||",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de48c",
      "text": " \"foo\"",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de48d",
      "text": " \"bar\"",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de48e",
      "text": " 3",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de48f",
      "text": " ||<",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de490",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de491",
      "text": " このように「どこから先に評価するか」（評価戦略）は言語によって異なります。多くの言語は、関数 foo の引数 bar(1) を関数 foo より前に評価します。これを「正格評価」と言います。一方Haskellは正格でない評価（通称「遅延評価」）がデフォルトの挙動です。（脚注：seqや$!などの正格評価をするためだけの関数や演算子が用意されているので、正格評価が必要な時にはこれらを使います。）",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de492",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de493",
      "text": " <hr>",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de494",
      "text": " 続き（予定）",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de495",
      "text": " - 遅延評価のメリット：必要ないものは計算しない",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de496",
      "text": " - 遅延評価の仕組み：「あとでやる」の話",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de497",
      "text": " - 遅延評価のコスト：「あとでやる」を覚えておくために消費されるメモリの話",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de498",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de499",
      "text": " …これだと名前渡しやSmalltalkの出番がないですねぇ。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de49a",
      "text": " <hr>",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de49b",
      "text": " 追記：今回はunsafePerformIOという裏口を使って無理やりどちらが先に評価されているかを観察してますが、コンパイラにとってはfooから評価してもbarから評価しても「計算結果が3になる」という結論は変わりません。そこでコンパイラが何らかの都合で「barを先に評価したいな」と考え、barを先に評価する可能性は否定できません。「bar(1) を関数 foo より前に評価する」のが正格評価、「fooを先に評価するかもしれないし、barを先に評価するかもしれない」のが正格でない評価、というわけです。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de49c",
      "text": " <hr>",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de49d",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de49e",
      "text": " 拙著「<a href=\"http://www.amazon.co.jp/gp/product/477415654X/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=477415654X&linkCode=as2&tag=nishiohirokaz-22\">コーディングを支える技術</a>」の読者から頂いた質問など対して、こんな感じで補足記事を書いて行きたいと思っています。質問・感想はおきがねなくどうぞ。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de49f",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4a0",
      "text": " 拙著に関する他のエントリーは「<a href='http://nhiro.org/langbook/'>「コーディングを支える技術」著者公式ページ</a>」からたどれるようにします。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4a1",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4a2",
      "text": " <iframe src=\"http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=AAFFAA&fc1=000000&lc1=0000FF&t=nishiohirokaz-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=477415654X\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4a3",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4a4",
      "text": " *1366462179*DE0でFPGAのチップ内蔵RAMをVRAMに使おうとしたら上手く行かなかった日記",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4a5",
      "text": " 手順としてはこちらに書かれている通り「<a href='http://d.hatena.ne.jp/nowokay/20130116/1358331649'>DE0でFPGAのチップ内蔵RAMにアクセスする - きしだのはてな</a>」",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4a6",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4a7",
      "text": " 「RAM: 2-PORT」を選んで、1ポートずつread/writeに割り当て。モノクロ640x480ピクセルのVRAMを作りたかったので、How many bits for memoryに307200bitと指定した。Resource Usageは48 lut + 40 M9K + 6 reg。僕が使っているDE0はマニュアルによれば「56 M9K Embedded Memory Blocks」と書いてあるので、40個のM9Kブロックを使うことはおかしくないはずだ。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4a8",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4a9",
      "text": " しかしこれをVRAMに使って絵を描いてみると、なぜか5箇所ぐらいに同じ絵が出たり、絵の表示されないゾーンが出来たり、とおかしな挙動をする。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4aa",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4ab",
      "text": " 試しにメモリの先頭から1024bitずつ0と1で埋めてみた。画面の横幅が640pxなので、1024bitずつ交互に塗れば「太さが1または2の横縞模様」ができるはず。しかし縞模様が10本描かれた(つまり20480bit)後、残りがベタ塗りになってしまった。下の写真で縞模様になっているゾーンが5つあるけど、頭から埋めていく過程で5箇所同時に縞模様が書かれて、青いゾーンには一瞬で青くなった。つまり限界ギリギリの場所にあるおそらく1bitのメモリを埋めるとこの青いゾーンが全部青になってしまうってことか。何が起きているのやらさっぱり。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4ac",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4ad",
      "text": " M9Kメモリブロックはパリティを含んで9216bitのメモリなので、有効に使えるのは8192bit。20480bitとの関連性もさっぱりわからない。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4ae",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4af",
      "text": " [f:id:nishiohirokazu:20130420214711j:image]",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4b0",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4b1",
      "text": " しかたがないので使えそうな前半の20480bitに収まるように、4x4ピクセルで1bitににして160x120の解像度にしたものがこちら。160 * 120は19200だ。メモリがおかしくさえなければちゃんと期待通りに動くんだから、やっぱ問題はRAMの側かなぁ。307200bitも確保することが予想されておらずアドレスの指定に関する回路がおかしくなっているとかなのかなぁ。なにぶんFPGAは素人なのでどう解決したらいいかがわからない。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4b2",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4b3",
      "text": " [f:id:nishiohirokazu:20130420214710j:image]",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4b4",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4b5",
      "text": " ところで160x120のモノクロでも楽しめそうなものはなにかないか考えた結果、ライフゲームを実装しようと思っているのだけど、ダブルバッファリングはどうするのが一般的なのかなぁ。普通に同じサイズのRAMを2つ作って、1bitのフラグでどっちから読んでどっちに書くかをif文で分岐するのでいいのかなぁ。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4b6",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4b7",
      "text": " ルール部分は512bitのROMでテーブル引きにしたらいいと思っている。",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4b8",
      "text": " ",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4b9",
      "text": " とりあえずシンプルに実装すると9クロック掛けて9箇所のピクセルデータを読んで、その値でテーブル引きして書き込む、という形になるかと思うけど、せっかくFPGAなのに1ピクセルに9クロックも掛けるのがもったいないと思うのでもっと並列化したい。どうしたらいいのだろうか。RAMのreadポートを9本にしたりできたらいいんだけどウィザードでは2ポートまでしか作れない。それとも323bitのシフトレジスタを用意して2行+3px分のデータをそこに溜めながらスライドしていく？",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4ba",
      "text": " </body>",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4bb",
      "text": "",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4bc",
      "text": "[はてなダイアリー 2013-04-20 https://nishiohirokazu.hatenadiary.org/archive/2013/04/20]",
      "created": 1366383600,
      "updated": 1366383600,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}