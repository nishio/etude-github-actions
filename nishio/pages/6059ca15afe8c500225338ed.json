{
  "id": "6059ca15afe8c500225338ed",
  "title": "Scratchにおける機能の抽象化",
  "created": 1616497177,
  "updated": 1616594401,
  "lines": [
    {
      "id": "6059ca15afe8c500225338ed",
      "text": "Scratchにおける機能の抽象化",
      "userId": "582e63d27c56960011aff09e",
      "created": 1616497177,
      "updated": 1616497395
    },
    {
      "id": "6059cafeaff09e00008eef4b",
      "text": "[abee2 https://twitter.com/abee2/status/1275263397341196291]による解説がわかりやすかったので転載",
      "userId": "582e63d27c56960011aff09e",
      "created": 1616497406,
      "updated": 1616593932
    },
    {
      "id": "605b440caff09e00007348eb",
      "text": "\tこれを読んで[Scratchで個別のスプライトにメッセージを送る]を作った",
      "userId": "582e63d27c56960011aff09e",
      "created": 1616593932,
      "updated": 1616593950
    },
    {
      "id": "605b440caff09e00007348ec",
      "text": "　\t>オブジェクトを変数に代入できない(第一級オブジェクトではない)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1616593932,
      "updated": 1616594401
    },
    {
      "id": "605b45d7aff09e0000dc9192",
      "text": "　\tこれは事実だが、オブジェクトに一意なIDを振ることはできる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1616594391,
      "updated": 1616594392
    },
    {
      "id": "605b45bcaff09e0000dc9190",
      "text": "\t　そのIDは変数に入れることができる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1616594365,
      "updated": 1616594367
    },
    {
      "id": "605b45beaff09e0000dc9191",
      "text": "\t　メッセージを送る際に宛先変数にIDを入れることで「個別のオブジェクトに対するメッセージ送信」に相当する処理をできる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1616594367,
      "updated": 1616594367
    },
    {
      "id": "605b4540aff09e00007348f2",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1616594240,
      "updated": 1616594240
    },
    {
      "id": "605b4429aff09e00007348ed",
      "text": "[abee2 https://twitter.com/abee2/status/1275263397341196291]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1616593962,
      "updated": 1616593962
    },
    {
      "id": "6059ca19aff09e00008eef46",
      "text": "\t> [Scratch]はテキスト言語です(たとえば、言語設定をアラビア語に変えると読めなくなる)。ブロックを組み立てるのはパーズを飛ばして構文木を作っているのと同じです。パラダイムは[並行分散][イベント駆動]インスタンスベース[オブジェクト指向]型言語なので、同系統であれば論理型や関数型よりも近いです。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1616497177,
      "updated": 1616497443
    },
    {
      "id": "6059cb08aff09e00008eef4d",
      "text": " >  Scratchにおける抽象化はオブジェクト(スプライト)にまとめることですが、継承も移譲もないのでちょっと特殊です。目に付くのは機能抽象で「もし端に着いたら、跳ね返る」が最たる例です。つまり、高機能のライブラリを最初から組み込んでいるので、問題領域に対して抽象的な記述ができるわけです。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1616497416,
      "updated": 1616497416
    },
    {
      "id": "6059cb08aff09e00008eef4e",
      "text": " >  自分で機能の抽象化を行う方法としては、ブロック定義とメッセージがあり、前者はプロシージャを書くのと同じです(関数ではない)。後者は、ブロードキャストを使って、GoFのオブザーバーパターン(送信者と受信者の関係が1:n)と同じことを実現できます。これでポリモフィズムを活かして書くとScratchらしいコードになります。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1616497416,
      "updated": 1616497416
    },
    {
      "id": "6059cb08aff09e00008eef4f",
      "text": " >  Scratchが他のオブジェクト指向型言語と異なるのは、オブジェクト間の結合が極端に疎なことです。オブジェクトを変数に代入できない(第一級オブジェクトではない)ので、オブジェクト間の関係を静的に記述できません。これがScratchの最大のチャレンジです。このアイデアは[StarLogo]からきています。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1616497416,
      "updated": 1616593969
    },
    {
      "id": "6059cb07aff09e00008eef4c",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1616497415,
      "updated": 1616497415
    }
  ]
}