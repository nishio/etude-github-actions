{
  "id": "5e473cad12728600173c7896",
  "title": "最小限の再現",
  "created": 1581726901,
  "updated": 1621834987,
  "lines": [
    {
      "id": "5e473cad12728600173c7896",
      "text": "最小限の再現",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581726901,
      "updated": 1581726920
    },
    {
      "id": "5e473cc8aff09e0000ea2d82",
      "text": "プログラムを書いていてよくわからないことがあった時に「[最小限]の[再現]コードを作ろう」というアプローチを取ることがある。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581726921,
      "updated": 1581835452
    },
    {
      "id": "5e473d7eaff09e0000ea2d84",
      "text": "これは明示的に習った記憶がなく、多分先輩プログラマのデバッグを傍で見てるうちに自然に獲得したのだろう。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581727102,
      "updated": 1581727221
    },
    {
      "id": "5e473e1aaff09e0000ea2d85",
      "text": "これがどういう行為なのか言語化すると問題解決の方法の理解に良さそう。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581727258,
      "updated": 1581727349
    },
    {
      "id": "60ab3ce2aff09e0000aacc11",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1621834978,
      "updated": 1621834981
    },
    {
      "id": "5e48e3cfaff09e00001dbe85",
      "text": "その「よくわからない」は具体的にはどういう状態か？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835215
    },
    {
      "id": "5e48e3cfaff09e00001dbe86",
      "text": "書いたプログラムが期待通りに動かない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835215
    },
    {
      "id": "5e48e3cfaff09e00001dbe87",
      "text": "期待通りに動かないプログラムのどこを修正すれば良いかがわからない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835225
    },
    {
      "id": "5e48e3dbaff09e00001dbefc",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835228,
      "updated": 1581835228
    },
    {
      "id": "5e48e3cfaff09e00001dbe8c",
      "text": "[二分探索デバッグ]ができない。[デバッグ実行も]できない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835234
    },
    {
      "id": "5e48e3e2aff09e00001dbefd",
      "text": "\t順次実行されるプログラムが期待通りでない挙動をした場合は、途中でブレークポイントを置いて「このタイミングでは期待通りの状態か？」を確認することで、問題の場所をそれ以前なのかそれ以降なのか絞り込むことができる。これができない状況。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835234,
      "updated": 1581835236
    },
    {
      "id": "5e48e3e9aff09e00001dbefe",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835241,
      "updated": 1581835241
    },
    {
      "id": "5e48e3cfaff09e00001dbe91",
      "text": "なぜできないのか。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835243
    },
    {
      "id": "5e48e3ebaff09e00001dbeff",
      "text": "それは「分割できない処理」だと認識してるからだな。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835243,
      "updated": 1581835246
    },
    {
      "id": "5e48e3edaff09e00001dbf00",
      "text": "自分の書いたプログラムの場合は分割できるが「信用している外部のコードにXを入れたら、Yが出てくると思ったのにZが出てきた」という状態だからだ。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835246,
      "updated": 1581835246
    },
    {
      "id": "5e48e3cfaff09e00001dbe96",
      "text": "\t「一塊りの処理であって、分割できない」と思い込んでるからだ。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835257
    },
    {
      "id": "5e48e3cfaff09e00001dbe9b",
      "text": "\tこの時に「フレームワークのコードを読む」というアプローチもある。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835258
    },
    {
      "id": "5e48e3cfaff09e00001dbea0",
      "text": " 認知的な負担を減らすために、無意識に抽象化して「一塊りの処理だ」と思い込んでいるのだな",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835264
    },
    {
      "id": "5e48e3cfaff09e00001dbea5",
      "text": " で、読むアプローチもある一方で、しばしば「膨大で、どこを読んだら良いかわからない」になる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835268
    },
    {
      "id": "5e48e3cfaff09e00001dbeaa",
      "text": " 今回は具体的にはTypeScriptの型の仕組みによくわからないところがあるのだが、ここでTypeScriptの関連コードを読むことが「大変」だと無意識に思って避けているわけだ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835271
    },
    {
      "id": "5e48e3cfaff09e00001dbeb0",
      "text": " 「信用している外部のコードにXを入れたら、Yが出てくると思ったのにZが出てきた」という状態で、つまり僕はその外部のコードの挙動を正しく理解できていない。その外部のコードが、実際にはどんな要素の組み合わせでできているのか把握してないので「大きな一塊のタスク」に見えていて、その大きさが見積もらないことによってやる気が出ない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835277
    },
    {
      "id": "5e48e3cfaff09e00001dbeb5",
      "text": "\t というような議論は今までにもしてきたけど、最小限の再現コードを作る話はそれとは少し切り口が違う",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835285
    },
    {
      "id": "5e48e3cfaff09e00001dbeba",
      "text": " 「外部の一塊りの処理」を複数の小さい処理に分割していくのと違って、一塊の処理はそのままで「その処理に渡す入力データ」を小さくしていく作業",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835290
    },
    {
      "id": "5e48e3cfaff09e00001dbebf",
      "text": " 再現性がない時に再現性を求める話とくっついてるけど、今回の場合「再現性はある」「最小限にしたい」だな",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835295
    },
    {
      "id": "5e48e3cfaff09e00001dbec4",
      "text": " 再現性があることが前提で「ここは問題の再現に必要ではないので削ろう」を繰り返していく",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835298
    },
    {
      "id": "5e48e3cfaff09e00001dbeca",
      "text": " 「ここは問題の再現に必要ではないので削ろう(実験)→問題は再現し続けるか？(観察)」",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835302
    },
    {
      "id": "5e48e3cfaff09e00001dbecf",
      "text": " 仮設検証プロセスとか世の中では言うけど、プロセス全体に明確な仮説など立ててなくて「ここは不要では」という小さい仮説があるだけ、プロセス全体は「最小限の再現コードを作ることが問題の解決に有用である」という仮説の検証",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835305
    },
    {
      "id": "5e48e3cfaff09e00001dbed4",
      "text": " 仮設検証プロセスにおいて仮説を「ゼロから作らなければいけない」という思い込みは適当でなくて、しばしば定型的パターンがある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835309
    },
    {
      "id": "5e48e3cfaff09e00001dbed9",
      "text": " 最小限の再現コードを作るプロセスが小さい仮説検証の集まりなので「よくわからない」ものに対して「必要ないはずだ→削る→再現する」なら問題のサイズが小さくなるし、「→再現しない」なら自分の脳内の理解と現実の現象の間のギャップがわかる。どちらにせよ問題解決に対して前進する。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835313
    },
    {
      "id": "5e48e3cfaff09e00001dbede",
      "text": " 「よくわからない」で手が止まるのは有益ではないので、こういうアプローチによって問題解決を進める",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835317
    },
    {
      "id": "5e48e3cfaff09e00001dbee3",
      "text": " このアプローチは、再現性があって、何度も繰り返し実験ができる場合にのみ使える。例えば対人コミュニケーションで、こちらの入力に対して相手が予期しない問題のある挙動をした場合に、繰り返し問題の起こる入力をすることは適切な問題解決ではない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835321
    },
    {
      "id": "5e48e3cfaff09e00001dbee9",
      "text": " 文脈",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835327
    },
    {
      "id": "5e48e3cfaff09e00001dbeef",
      "text": "\t\thttps://www.facebook.com/1129148772/posts/10220683212006738?d=n&sfns=mo",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835328
    },
    {
      "id": "5e48e3cfaff09e00001dbef0",
      "text": "\t 現時点でのメモ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835334
    },
    {
      "id": "5e48e3cfaff09e00001dbef5",
      "text": "\t\t\t問題を最小限にしようとして一部の実装をanyで置き換えたが、それ自身が問題を発生させる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835337
    },
    {
      "id": "5e48e3cfaff09e00001dbef6",
      "text": "\t\t\t単体では問題なく動いてたREVERSEの有無が結果に影響することがわかった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835435
    },
    {
      "id": "5e48e4abaff09e00001dbf03",
      "text": "\t\t\tつまり「ここは検証済みで問題はない」と思ってたところに問題がある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835436,
      "updated": 1581835440
    },
    {
      "id": "5e48e4acaff09e00001dbf04",
      "text": "   要素単体では問題ないが、組み合わせによって問題が起きる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835436,
      "updated": 1581835439
    },
    {
      "id": "5e48e3cfaff09e00001dbef7",
      "text": "\t\tたぶん問題の発生するタイミングが違う。型のインスタンスを作成するタイミングで、与えられた型引数がリテラル型なら無限ループに陥らずに処理できるが、一般の型の場合は「それがいつかは終了すると型である」とわからない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1581835215,
      "updated": 1581835419
    },
    {
      "id": "60ab3ceaaff09e0000aacc12",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1621834987,
      "updated": 1621834987
    },
    {
      "id": "60ab3ceaaff09e0000aacc13",
      "text": "[エンジニア・光成 滋生の「バグを突き止める技術」 | サイボウズ式 https://cybozushiki.cybozu.co.jp/articles/m000349.html]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1621834987,
      "updated": 1621834987
    },
    {
      "id": "60ab3cebaff09e0000aacc14",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1621834987,
      "updated": 1621834987
    }
  ]
}