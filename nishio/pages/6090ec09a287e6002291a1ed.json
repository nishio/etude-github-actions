{
  "id": "6090ec09a287e6002291a1ed",
  "title": "Hatena2012-01-07",
  "created": 1325862000,
  "updated": 1325862000,
  "lines": [
    {
      "id": "6090ec2daff09e00003da5c0",
      "text": "Hatena2012-01-07",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5c1",
      "text": "code:hatena",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5c2",
      "text": " <body>",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5c3",
      "text": " *1325892973*Pythonクラスのメソッド名解決順序",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5c4",
      "text": " 昨日のプロシンで「枝分かれのあるプロトタイプチェーンがあるときにメソッド名の解決はどうなるのか」「PythonではC3直列化でシリアライズして端から探索していく」という話をしたのですけど、PythonのC3直列化が入ったクラスが親クラスを書き換え可能かどうか自信がなかったのでその場では断言出来なかったので、確認して見ました。",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5c5",
      "text": " ",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5c6",
      "text": " Pythonのクラスは親クラスを単なるポインタとして持っていて、定義後に親クラスを変更できるので、プロトタイプチェーンと言って構わないかと思います。で、それでダイヤモンド継承を作ってみます。クラスAをBとCが継承した上で、DがBとCをこの順で継承します。__mro__という属性にMethod Resolution Orderが保存されているのがわかります。",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5c7",
      "text": " ",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5c8",
      "text": " >||",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5c9",
      "text": " >>> class A(object): pass",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5ca",
      "text": " >>> class B(A): pass",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5cb",
      "text": " >>> class C(A): pass",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5cc",
      "text": " >>> class D(B, C): pass",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5cd",
      "text": " >>> D.__mro__",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5ce",
      "text": " (__main__.D, __main__.B, __main__.C, __main__.A, object)",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5cf",
      "text": " ||<",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5d0",
      "text": " ",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5d1",
      "text": " クラスDの親クラスが何かという情報は__bases__属性の中に保管されています。なのでこれを書き換えます。DがCとBをこの順で継承するようにすると、MROの中でBよりもCが先に来るように変わりました。",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5d2",
      "text": " >||",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5d3",
      "text": " >>> D.__bases__",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5d4",
      "text": " >>> (__main__.B, __main__.C)",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5d5",
      "text": " >>> D.__bases__ = (C, B)",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5d6",
      "text": " >>> D.__mro__",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5d7",
      "text": " (__main__.D, __main__.C, __main__.B, __main__.A, object)",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5d8",
      "text": " ||<",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5d9",
      "text": " ",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5da",
      "text": " このC3直列化が単なる幅優先ではないのを確認するためにクラスEを追加してそれも継承するようにしてみます。幅優先探索ならC, B, E, Aの順で検索するわけですが、PythonではC, B, A, Eの順になっていることがわかります。",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5db",
      "text": " >||",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5dc",
      "text": " >>> class E(object): pass",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5dd",
      "text": " >>> D.__bases__ = (C, B, E)",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5de",
      "text": " >>> D.__mro__",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5df",
      "text": " (__main__.D, __main__.C, __main__.B, __main__.A, __main__.E, object)",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5e0",
      "text": " ||<",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5e1",
      "text": " ",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5e2",
      "text": " __bases__に値を設定したタイミングで__mro__が計算され直されます。typeobject.cのtype_set_basesの中からmro_internalやmro_subclassesが呼び出されて、mro_internalからmro_implementationが呼び出されて、ここで計算しなおしている。つまり、あるクラスの親クラスを変更すると、そのクラスとすべてのサブクラスのMROが更新されるわけです。",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5e3",
      "text": " ",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5e4",
      "text": " ** 参考: PyTypeObjectの定義",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5e5",
      "text": " >||",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5e6",
      "text": " typedef struct _typeobject {",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5e7",
      "text": "     (略)",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5e8",
      "text": "     PyObject *tp_bases;",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5e9",
      "text": "     PyObject *tp_mro; /* method resolution order */",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5ea",
      "text": "     PyObject *tp_cache;",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5eb",
      "text": "     PyObject *tp_subclasses;",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5ec",
      "text": "     (略)",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5ed",
      "text": " } PyTypeObject;",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5ee",
      "text": " ||<",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5ef",
      "text": " ",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5f0",
      "text": " *1325898759*コードリーディング観察日記",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5f1",
      "text": " 以前コードリーディングの方法を聞かれて「僕、全然読めないよ」と答えたんだけど、そういう解釈はさておき客観的事実としては30分の空き時間で「<a href='http://d.hatena.ne.jp/nishiohirokazu/20120107/1325892973'>Pythonクラスのメソッド名解決順序</a>」に書いてあるようなことを調べられたわけなので、そのプロセスがどうであったか忘れないうちに観察日記をつけておく。",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5f2",
      "text": " ",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5f3",
      "text": " ** 観察日記",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5f4",
      "text": " - (調べたい内容が、Pythonのリファレンスマニュアルに書いてあった気がしない)",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5f5",
      "text": " - Pythonの処理系で対話的に実行して、挙動を確認。「__bases__を書き換えた時に__mro__を更新するはずだ」と考える",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5f6",
      "text": " - ソースコードは既にダウンロード済み(~/src/にソースを読もうと思ったもののソースコードは入れっぱなしになっている)",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5f7",
      "text": " - Objects/classobject.cを開く。__bases__で検索する。set_basesって関数を見つける。読む。期待に反して__mro__の更新が行われていない。おかしい。",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5f8",
      "text": " - ./configure --with-pydebug してデバッグ情報付きのバイナリを作る。set_basesにブレークポイントをつけて実行。set_basesが呼ばれると考えたPythonコードを実行してもブレークされない。期待に反して呼ばれてない。",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5f9",
      "text": " - ソースルートで ack set_bases する。typeobject.cにtype_set_basesなんてのがあるじゃん！そうか、新スタイルのクラスはtypeobject.cか。",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5fa",
      "text": " - ack type_set_bases する。type_set_basesを読む。mroって単語が出てくるところだけ流し読みする。",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5fb",
      "text": " - r = mro_subclasses(type, temp);が見つかる。",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5fc",
      "text": " - mro_subclassesが自分自身とサブクラスのmroを書き換えるかなと期待したが、期待に反してmro_subclassesの中ではサブクラスをたどりながらmro_internalを呼び出すだけ。",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5fd",
      "text": " - mro_internalがmroを書き換える処理なのか、と思ってtype_set_basesを読みなおしてみると、mro_internalを読み落としていたのが見つかった。",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5fe",
      "text": " - 今思えばmroで検索してハイライトしとけよ自分",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da5ff",
      "text": " - mro_internalを読んでみたらmro_implementationってのを読んでる。mro_implementationを読んだらさがしていたものはこれっぽい。調査終了。",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da600",
      "text": " - PyTypeObjectの定義を書いておこうと考える。Include/type...h を開こうとしたがそんな名前のファイルはない。ack PyTypeObjectする。いっぱい出すぎる。そりゃそうだ。ack PyTypeObject Include/*.hする。object.hのなかにあった。",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da601",
      "text": " ",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da602",
      "text": " ** 使用したツール",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da603",
      "text": " - gdb",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da604",
      "text": " -- b(reakepoint)とr(un)しか使ってない",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da605",
      "text": " - ack",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da606",
      "text": " - emacs",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da607",
      "text": " -- タグジャンプ使いこなせてない…。",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da608",
      "text": " -- インクリメンタルサーチ(Ctrl-sやCtrl-r)と、行番号ジャンプ(僕はCtrl-lにバインドしている)で。",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da609",
      "text": " -- あっ、EmacsでのM-x pdbもこの前教えてもらったのに使うの忘れてた。生でgdbつかってたや。",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da60a",
      "text": " ",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da60b",
      "text": " ** まとめ",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da60c",
      "text": " やっぱりほとんど読んでない。100行未満。",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da60d",
      "text": " ",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da60e",
      "text": " もっと手練の人の観察日記を読みたい！",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da60f",
      "text": " </body>",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da610",
      "text": "",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2daff09e00003da611",
      "text": "[はてなダイアリー 2012-01-07 https://nishiohirokazu.hatenadiary.org/archive/2012/01/07]",
      "created": 1325862000,
      "updated": 1325862000,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}