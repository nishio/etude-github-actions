{
  "id": "6090ec02a287e6002291a021",
  "title": "Hatena2009-10-16",
  "created": 1255618800,
  "updated": 1255618800,
  "lines": [
    {
      "id": "6090ec26aff09e00003d3e85",
      "text": "Hatena2009-10-16",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e86",
      "text": "code:hatena",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e87",
      "text": " <body>",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e88",
      "text": " *1255647268*ひさしぶりにPythonシェイプアップ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e89",
      "text": " http://blog.bestinclass.dk/index.php/2009/10/python-vs-clojure-evolving/",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e8a",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e8b",
      "text": " Clojureで書いたコードに比べてPythonは行数も多くて無様だとか言われた。",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e8c",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e8d",
      "text": " >|python|",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e8e",
      "text": " from itertools import ifilter",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e8f",
      "text": " import operator",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e90",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e91",
      "text": " def mul(nums):",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e92",
      "text": "     return reduce(operator.mul, nums)",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e93",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e94",
      "text": " def icross(*sequences):",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e95",
      "text": "     if sequences:",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e96",
      "text": "         for x in sequences[0]:",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e97",
      "text": "             for y in icross(*sequences[1:]):",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e98",
      "text": "                 yield (x,)+y",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e99",
      "text": "     else: yield ()",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e9a",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e9b",
      "text": " def digits_from_num(num, base=10):",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e9c",
      "text": "     def recursive(num, base):",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e9d",
      "text": "         if num < base:",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e9e",
      "text": "             return [num]",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3e9f",
      "text": "         return [num%base] + recursive(num/base, base)",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ea0",
      "text": "     return list(reversed(recursive(num, base)))",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ea1",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ea2",
      "text": " def is_palindrome(num, base=10):",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ea3",
      "text": "     digitslst = digits_from_num(num, base)",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ea4",
      "text": "     return (digitslst == list(reversed(digitslst)))",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ea5",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ea6",
      "text": " def euler4(lstlst):",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ea7",
      "text": "     canditates = (mul(ns) for ns in icross(*lstlst))",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ea8",
      "text": "     return max(ifilter(is_palindrome, canditates))",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ea9",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eaa",
      "text": " print euler4(2*[range(111, 1000)])",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eab",
      "text": " ||<",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eac",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ead",
      "text": " まずなぜいきなり直積を定義しているのか。",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eae",
      "text": " >|python|",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eaf",
      "text": " def icross(*sequences):",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eb0",
      "text": "     if sequences:",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eb1",
      "text": "         for x in sequences[0]:",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eb2",
      "text": "             for y in icross(*sequences[1:]):",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eb3",
      "text": "                 yield (x,)+y",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eb4",
      "text": "     else: yield ()",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eb5",
      "text": " ||<",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eb6",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eb7",
      "text": " clojureの方では",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eb8",
      "text": " >||",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eb9",
      "text": "             (for [x (range 100 1000)",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eba",
      "text": "                   y (range 100 1000)]",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ebb",
      "text": "               (* x y))))",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ebc",
      "text": " ||<",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ebd",
      "text": " って書いているのに。pythonでだって「for x in range(100, 1000) for y in range(100, 1000)」って書けばいいじゃん。全削除。",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ebe",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ebf",
      "text": " 次に数字を文字列表記でひっくり返す関数。",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ec0",
      "text": " >|python|",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ec1",
      "text": " def digits_from_num(num, base=10):",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ec2",
      "text": "     def recursive(num, base):",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ec3",
      "text": "         if num < base:",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ec4",
      "text": "             return [num]",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ec5",
      "text": "         return [num%base] + recursive(num/base, base)",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ec6",
      "text": "     return list(reversed(recursive(num, base)))",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ec7",
      "text": " ||<",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ec8",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ec9",
      "text": " いやいや。なにしてんの、しかも再帰呼び出しとか。Clojureの側で(= (seq s) (reverse s))ってやってんだからPythonでもlist(a) == list(reversed(a))でいいじゃん。全削除。",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eca",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ecb",
      "text": " 次mul。リストを受け取ってその中身を全部掛け算する関数。",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ecc",
      "text": " >|python|",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ecd",
      "text": " def mul(nums):",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ece",
      "text": "     return reduce(operator.mul, nums)",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ecf",
      "text": " ||<",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ed0",
      "text": " これ自体はいい。でもClojureの側って(* x y)じゃん。引数の個数が2個に固定なんだったらこんなの定義しなくていいじゃん。全削除。",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ed1",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ed2",
      "text": " ここまでで中間報告",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ed3",
      "text": " >|python|",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ed4",
      "text": " from itertools import ifilter",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ed5",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ed6",
      "text": " def is_palindrome(num):",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ed7",
      "text": "     digitslst = str(num)",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ed8",
      "text": "     return (list(digitslst) == list(reversed(digitslst)))",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ed9",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eda",
      "text": " def euler4(xs, ys):",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3edb",
      "text": "     canditates = (x * y for x in xs for y in ys)",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3edc",
      "text": "     return max(ifilter(is_palindrome, canditates))",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3edd",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ede",
      "text": " print euler4(range(111, 1000), range(111, 1000))",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3edf",
      "text": " ||<",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ee0",
      "text": " 半分以下に縮みましたが。",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ee1",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ee2",
      "text": " でもってClojureの側は名前を付けて関数を定義したりしないでぜんぶ1つにまとめてるよね。フェアじゃないのでPythonでもそうしよう。なるべくこれに見かけを似せて:",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ee3",
      "text": " >||",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ee4",
      "text": " (reduce max",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ee5",
      "text": "     (filter #(let [s (str %)]",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ee6",
      "text": "                (= (seq s) (reverse s)))",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ee7",
      "text": "             (for [x (range 100 1000)",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ee8",
      "text": "                   y (range 100 1000)]",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ee9",
      "text": "               (* x y))))",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eea",
      "text": " ||<",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eeb",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eec",
      "text": " こうなった",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eed",
      "text": " >|python|",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eee",
      "text": " print max(v for v in (x * y ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eef",
      "text": "                       for x in range(100, 1000) ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ef0",
      "text": "                       for y in range(100, 1000))",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ef1",
      "text": "           if list(str(v)) == list(reversed(str(v))))",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ef2",
      "text": " ||<",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ef3",
      "text": " あれ？Pythonの方が短いよ？",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ef4",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ef5",
      "text": " <hr>",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ef6",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ef7",
      "text": " と日本語で書いてもしょうがないので英語でも書いた",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ef8",
      "text": " http://blog.hackers-cafe.net/2009/10/re-python-vs-clojure.html",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3ef9",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3efa",
      "text": " <hr>",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3efb",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3efc",
      "text": " 行数だけ縮めて、速度の面ではめんどくさくなったのでチェックしなかったのだけどまともとさんによるとこの改良によってPythonの方が早くなっていたみたい。追記：というのは勘違いでした(コメント欄参照)",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3efd",
      "text": " ",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3efe",
      "text": " >>",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3eff",
      "text": " ということは、こういうことか。p [*100..1000].product([*100..1000]).map{|x,y| x*y}.select{|s|s=s.to_s; s==s.reverse}.max",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f00",
      "text": " <<",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f01",
      "text": " >>",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f02",
      "text": " 速度比較をすると、オリジナルPython版(2.6)で12.2秒、西尾版で4.9秒、Ruby版(1.8.7)で2.8秒、1.9 trunkで0.9秒であった。Pythonは3.1にするともうちょっとだけ速いみたい。",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f03",
      "text": " <<",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f04",
      "text": " >>",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f05",
      "text": " もと記事では「(オリジナル)PythonはClojureより300%遅い」って書いてたけど、それってつまり1.9はClojureの4倍速いってことだよね。要するに、つまらない比較ってこと",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f06",
      "text": " <<",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f07",
      "text": " http://twitter.com/yukihiro_matz/status/4901341641",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f08",
      "text": " http://twitter.com/yukihiro_matz/status/4901791131",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f09",
      "text": " http://twitter.com/yukihiro_matz/status/4901849726",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f0a",
      "text": " </body>",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f0b",
      "text": " <comments>",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f0c",
      "text": " <comment>",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f0d",
      "text": " <username>まつもと</username>",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f0e",
      "text": " <body>「Pythonの方が300%遅い」というのは、「３倍遅い」か「4倍遅い(差分を見た場合)」のいずれかでしょうから、西尾版の方がClojureより速いってことはないんじゃないかな、たぶん。</body>",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f0f",
      "text": " <timestamp>1255793919</timestamp>",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f10",
      "text": " </comment>",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f11",
      "text": " <comment>",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f12",
      "text": " <username>nishiohirokazu</username>",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f13",
      "text": " <body>ありゃ、たしかに12.2→4.9だから3倍にはなってないですね。勘違いしました。</body>",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f14",
      "text": " <timestamp>1255797571</timestamp>",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f15",
      "text": " </comment>",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f16",
      "text": " </comments>",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f17",
      "text": "",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec26aff09e00003d3f18",
      "text": "[はてなダイアリー 2009-10-16 https://nishiohirokazu.hatenadiary.org/archive/2009/10/16]",
      "created": 1255618800,
      "updated": 1255618800,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}