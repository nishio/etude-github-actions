{
  "id": "6090ec04a287e6002291a0cc",
  "title": "Hatena2010-06-22",
  "created": 1277132400,
  "updated": 1277132400,
  "lines": [
    {
      "id": "6090ec28aff09e00003d653e",
      "text": "Hatena2010-06-22",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d653f",
      "text": "code:hatena",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6540",
      "text": " <body>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6541",
      "text": " *1277208908*Haskellの「fib = 1:1:zipWith (+) fib (tail fib)」はとても遅い",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6542",
      "text": " ラボの昼休みに光成さん、中谷さんとご飯を食べながら話した内容を一応ざっくりとまとめておく。",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6543",
      "text": " 発端はたしか最近Haskellを勉強の光成さんが、Haskellのかっこいいsieveは実はとても遅い(<a href='http://d.hatena.ne.jp/camlspotter/20100128/1264678903'>俺は Haskell の　sieve についてとんでもない思い違いをしていたようだ...</a>)という話を見て、同様にかっこいいけど遅い下記のフィボナッチ数列の定義の速度を調べてみたら2.5乗くらいのオーダーになっていたという話だったかと思う。",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6544",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6545",
      "text": " >|haskell|",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6546",
      "text": " fib = 1:1:zipWith (+) fib (tail fib)",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6547",
      "text": " ||<",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6548",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6549",
      "text": " 僕も確認するために、コマンドライン引数でNを与えられるフィボナッチ数列のN番目を求めるコードを書いた。",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d654a",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d654b",
      "text": " >|haskell|",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d654c",
      "text": " import System",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d654d",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d654e",
      "text": " fib = 1:1:zipWith (+) fib (tail fib)",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d654f",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6550",
      "text": " main = do",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6551",
      "text": "   args <- getArgs",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6552",
      "text": "   print $ (0 *) $ (fib !!) $ read $ args !! 0",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6553",
      "text": " ||<",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6554",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6555",
      "text": " (0 *)は大量の数字の列をコンソールに表示するところで時間がかかると測りたいものが測れないからつけてある。人間には常に0になるのがわかるけどもHaskell処理系にはわからないので、きちんとfibを計算してから0を掛けて結果の0を表示してくれる。これをghc -O3でコンパイルする。そのまま走らせると「Stack space overflow」というエラーで死んでしまうので+RTS -K200Mをつけて走らせる。",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6556",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6557",
      "text": " >||",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6558",
      "text": " $ time ./a.out 100000 +RTS -K200M",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6559",
      "text": " 0",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d655a",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d655b",
      "text": " real\t0m1.080s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d655c",
      "text": " user\t0m1.045s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d655d",
      "text": " sys\t0m0.029s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d655e",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d655f",
      "text": " $ time ./a.out 200000 +RTS -K200M",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6560",
      "text": " 0",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6561",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6562",
      "text": " real\t0m6.420s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6563",
      "text": " user\t0m6.313s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6564",
      "text": " sys\t0m0.072s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6565",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6566",
      "text": " $ time ./a.out 300000 +RTS -K200M",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6567",
      "text": " 0",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6568",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6569",
      "text": " real\t0m18.477s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d656a",
      "text": " user\t0m18.264s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d656b",
      "text": " sys\t0m0.145s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d656c",
      "text": " ||<",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d656d",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d656e",
      "text": " これはおおよそO(N ** 2.6)のオーダーである。ちなみにfib(1000000)は5分経っても終わらなかったので中断した。",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d656f",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6570",
      "text": " >|python|",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6571",
      "text": " >> log(6.42 / 1.08) / log(2)",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6572",
      "text": " 2.5715419849588343",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6573",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6574",
      "text": " >> log(18.477 / 6.42) / log(1.5)",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6575",
      "text": " 2.6071505945442417",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6576",
      "text": " ||<",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6577",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6578",
      "text": " この時点で「次の定義は線形時間でフィボナッチ数列のリストを生成する」っていうWikipediaの記述は事実に反するということがわかった。それで終りにしてもよかったのだけどもまだお弁当が残っていたので「いつからこの間違った記述があるんだろう」という話題に。",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6579",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d657a",
      "text": " それは履歴を見ればわかりますよ、と見つけてきたのがこれ。<a href=\"http://ja.wikipedia.org/w/index.php?title=Haskell&diff=6496514&oldid=6110644\">2006年7月5日の更新</a>。そしてこの更新のコメントで英語版からの翻訳であることがわかる。当時の英語版を見ると確かにlinearって書いてある。そして<a href=\"http://en.wikipedia.org/w/index.php?title=Haskell_%28programming_language%29&diff=342998324&oldid=342993329\">2010年の2月に修正されている</a>。\"linear time\"から\"efficient implementation\"へ。efficientって何に比べてだよ…。",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d657b",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d657c",
      "text": " ちなみにPythonで素朴にループするコードを書いてみる。",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d657d",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d657e",
      "text": " >|python|",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d657f",
      "text": " import sys",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6580",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6581",
      "text": " def fib(n):",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6582",
      "text": "     if n == 0 or n == 1: return 1",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6583",
      "text": "     x = y = 1",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6584",
      "text": "     while n > 1:",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6585",
      "text": "         x, y = y, x + y",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6586",
      "text": "         n -= 1",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6587",
      "text": "     return y",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6588",
      "text": "         ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6589",
      "text": "         ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d658a",
      "text": " print 0 * fib(int(sys.argv[1]))",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d658b",
      "text": " ||<",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d658c",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d658d",
      "text": " これの実行結果は下のようになる。驚いたことにN = 100000でHaskellよりわずかに速く、N = 300000だと2倍以上速い。むしろコンパイルしてあるくせにインタプリタのPythonに負けるくらいHaskellのコードが遅い。",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d658e",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d658f",
      "text": " >||",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6590",
      "text": " $ time python fib.py 100000",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6591",
      "text": " 0",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6592",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6593",
      "text": " real\t0m0.968s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6594",
      "text": " user\t0m0.937s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6595",
      "text": " sys\t0m0.013s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6596",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6597",
      "text": " $ time python fib.py 200000",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6598",
      "text": " 0",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6599",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d659a",
      "text": " real\t0m3.687s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d659b",
      "text": " user\t0m3.658s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d659c",
      "text": " sys\t0m0.016s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d659d",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d659e",
      "text": " $ time python fib.py 300000",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d659f",
      "text": " 0",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65a0",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65a1",
      "text": " real\t0m8.205s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65a2",
      "text": " user\t0m8.169s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65a3",
      "text": " sys\t0m0.020s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65a4",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65a5",
      "text": " $ time python fib.py 1000000",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65a6",
      "text": " 0",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65a7",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65a8",
      "text": " real\t1m31.549s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65a9",
      "text": " user\t1m29.910s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65aa",
      "text": " sys\t0m0.148s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65ab",
      "text": " ||<",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65ac",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65ad",
      "text": " これはおよそO(N ** 2)のオーダーだ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65ae",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65af",
      "text": " >|python|",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65b0",
      "text": " >> log(3.687 / 0.968) / log(2)",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65b1",
      "text": " 1.9293684638192232",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65b2",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65b3",
      "text": " >> log(8.205 / 3.687) / log(1.5)",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65b4",
      "text": " 1.9728716214877173",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65b5",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65b6",
      "text": " >> log(91.549 / 8.205) / log(10 / 3.0)",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65b7",
      "text": " 2.0034760044903011",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65b8",
      "text": " ||<",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65b9",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65ba",
      "text": " なぜO(N)ではなく2乗のオーダーになるかと言うと、フィボナッチ数がO(1.618 ** N)のオーダーで増えるからその数の桁数はO(N)のオーダーで増え、1回の足し算にかかる時間がO(N)のオーダーで増えるから。だから順番に足していく方式では2乗のオーダーまではしかたない。だけどHaskellの2.6乗の0.6はどこから来たんだ。",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65bb",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65bc",
      "text": " Haskellでefficientなコードを書いてみた。泥臭く自前で末尾再帰している。",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65bd",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65be",
      "text": " >|haskell|",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65bf",
      "text": " import System",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65c0",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65c1",
      "text": " fib 0 = 1",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65c2",
      "text": " fib 1 = 1",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65c3",
      "text": " fib n = fib' n 1 1",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65c4",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65c5",
      "text": " fib' 1 _ y = y",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65c6",
      "text": " fib' n x y = fib' (n - 1) y (x + y)",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65c7",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65c8",
      "text": " main = do",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65c9",
      "text": "   args <- getArgs",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65ca",
      "text": "   print $ (0 *) $ fib $ read $ args !! 0",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65cb",
      "text": " ||<",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65cc",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65cd",
      "text": " これならPythonの素朴なコードに比べて10倍速いし、ちゃんと2乗のオーダーだ。",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65ce",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65cf",
      "text": " >||",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65d0",
      "text": " $ time ./a.out 100000",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65d1",
      "text": " 0",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65d2",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65d3",
      "text": " real\t0m0.088s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65d4",
      "text": " user\t0m0.075s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65d5",
      "text": " sys\t0m0.006s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65d6",
      "text": " etude$ time ./a.out 200000",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65d7",
      "text": " 0",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65d8",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65d9",
      "text": " real\t0m0.346s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65da",
      "text": " user\t0m0.329s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65db",
      "text": " sys\t0m0.011s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65dc",
      "text": " etude$ time ./a.out 300000",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65dd",
      "text": " 0",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65de",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65df",
      "text": " real\t0m0.814s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65e0",
      "text": " user\t0m0.789s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65e1",
      "text": " sys\t0m0.019s",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65e2",
      "text": " ||<",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65e3",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65e4",
      "text": " >|python|",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65e5",
      "text": " >> log(0.346 / 0.088) / log(2)",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65e6",
      "text": " 1.9751966089994275",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65e7",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65e8",
      "text": " >> log(0.814 / 0.346) / log(1.5)",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65e9",
      "text": " 2.1099758618849926",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65ea",
      "text": " ||<",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65eb",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65ec",
      "text": " ** まとめ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65ed",
      "text": " - Haskellの有名なフィボナッチ数列の定義「fib = 1:1:zipWith (+) fib (tail fib)」はWikipediaに「線形時間」と書かれているが事実ではない",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65ee",
      "text": " - 英語版には「An efficient implementation」と書かれているが、N = 100000でインタプリタ言語であるPythonより遅く、O(N ** 2.6)である。",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65ef",
      "text": " - この定義より10倍以上速く、O(N ** 2)であるような実装も容易",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65f0",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65f1",
      "text": " というわけで「fib = 1:1:zipWith (+) fib (tail fib)」は「Haskellらしさをアピールできるトリッキーなコードであるが、速度は遅い」と認識するのが正しい。",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65f2",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65f3",
      "text": " ** まとめ追記",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65f4",
      "text": " - <a href='http://d.hatena.ne.jp/mkotha/20100623/1277286946'>fib = 1 : 1 : zipWith (+) fib (tail fib) が遅いかどうかは、使い方に依存する - www.kotha.netの裏</a>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65f5",
      "text": " -- fibを先頭から順に使って行った場合(例:sum (take 300000 fib))の方が、fib !! 300000よりずっと速いという話",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65f6",
      "text": " -- 僕の書いた早いバージョンのfibは正格性が(コード上には明記されていないが)コンパイラによって推論されているという話",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65f7",
      "text": " - <a href='http://homepage1.nifty.com/herumi/diary/1006.html#23'>melancholic afternoon</a>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65f8",
      "text": " -- 巨大なリストから要素1つだけを取り出す時と2つ以上取り出すときではかかる時間や消費メモリがぜんぜん違うという話",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65f9",
      "text": " - <a href='http://d.hatena.ne.jp/kazu-yamamoto/20100624/1277348961'>Haskellの神話 - あどけない話</a>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65fa",
      "text": " -- 正格評価するzipWith'を作ればよい、という話など",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65fb",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65fc",
      "text": " *1277215680*47キロ捨てた",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65fd",
      "text": " 本を47.0キロ捨てた。",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65fe",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d65ff",
      "text": " そして前回何キロ捨てたかチェックしたら前回もちょうど47.0キロだったようだ。<a href='http://d.hatena.ne.jp/nishiohirokazu/20100302/1267547582'>本を捨てる活動の成果の可視化と定量化</a>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6600",
      "text": " ",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6601",
      "text": " 合計で94.0キロか。100キロ超えたいな。定量化するとこうしてきりのいい数字を超えたいというモチベーションがわくのである。",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6602",
      "text": " </body>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6603",
      "text": " <comments>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6604",
      "text": " <comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6605",
      "text": " <username>kazu-yamamoto</username>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6606",
      "text": " <body>!! の代わりに head . drop n<br>zipWith の代わりに以下の zipWith' を使ったらどうなりますか？<br><br>{-# LANGUAGE BangPatterns #-}<br>zipWith' :: (a -> b -> c) -> [a] -> [b] -> [c]<br>zipWith' f (a:as) (b:bs) = let !x = f a b<br>                           in x : zipWith' f as bs<br>zipWith' _ _ _ = []</body>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6607",
      "text": " <timestamp>1277270213</timestamp>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6608",
      "text": " </comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6609",
      "text": " <comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d660a",
      "text": " <username>kazu-yamamoto</username>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d660b",
      "text": " <body>!! は、!! のままでいいようです。zipWith' のみを使って下さい。</body>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d660c",
      "text": " <timestamp>1277273731</timestamp>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d660d",
      "text": " </comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d660e",
      "text": " <comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d660f",
      "text": " <username>nuc</username>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6610",
      "text": " <body>これは呼び出し回数ではなくてメモリーヒエラルキーを原因とした減速ですよね。<br>そういう時には、O(n**2.6)くらいというような表記はしないと思うのですが。</body>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6611",
      "text": " <timestamp>1277359050</timestamp>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6612",
      "text": " </comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6613",
      "text": " <comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6614",
      "text": " <username>nishiohirokazu</username>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6615",
      "text": " <body>それは「実行時間がO(n ** 2.6)くらい」という使い方は正しくない、O表記は呼び出し回数について使うものだ、という趣旨のご意見でしょうか？<br>寡聞にしてそういうご意見は初耳なのですが、何かソースがあれば教えていただければ幸いです。</body>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6616",
      "text": " <timestamp>1277370005</timestamp>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6617",
      "text": " </comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6618",
      "text": " <comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6619",
      "text": " <username>nuc</username>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d661a",
      "text": " <body>呼び出し回数というか、もうちょいと一般的に「アルゴリズムの計算量」と言いたかったのです。<br>別に呼び出し回数に使っても実行時間に使っても構わないです。<br>つまり、ランダウの記号 O(f(n)) は n が無限大でどのような関数で押さえられるか、についての表現ですよね。<br>なので実行時間を論じているときには、n が 10^6 みたいな小さい値の周辺でフィットする行為は実行時間のオーダーを推測する補助手段でしかないはずです。<br>この場合、2次キャッシュやメモリーが溢れて下の階層が使われるという n が小さいところで一度ずつしか起きないことが原因と推測されるので、その周囲で(極限で評価する)実行時間のオーダーをフィットして求めるのは、「3日でドルが1円安くなったから1年後には0円になる」というようなものです。<br><br>蛇足ですが、現在の標準的マシンとコンパイラで、N=10^5 周辺では、Haskell の例のコードは、上に書かれた python よりもはるかに遅いコードだ、というのは正しいと思います。</body>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d661b",
      "text": " <timestamp>1277385698</timestamp>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d661c",
      "text": " </comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d661d",
      "text": " <comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d661e",
      "text": " <username>nishiohirokazu</username>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d661f",
      "text": " <body>>ランダウの記号 O(f(n)) は n が無限大でどのような関数で押さえられるか、についての表現<br>>実行時間のオーダーを推測する補助手段でしかないはずです。<br><br>ここまではわかるのですが、そこから先が何をおっしゃりたいのかよくわかりません。<br><br>>N=10^5 周辺では、Haskell の例のコードは、上に書かれた python よりもはるかに遅いコードだ、というのは正しいと思います。<br><br>これには同意できません。どこからそう判断されたのかわかりませんが、このエントリーに書かれた観測事実から判断するとN=10^5周辺ではHaskellの方が早いという結論になりますよね？</body>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6620",
      "text": " <timestamp>1277390687</timestamp>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6621",
      "text": " </comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6622",
      "text": " <comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6623",
      "text": " <username>nuc</username>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6624",
      "text": " <body>> 推測する補助手段<br>ここまで分かってくださったなら、まず「実行時間がO(n ** 2.6)くらい」というのは小さい値からの推定でしかないのですよね。しかも、3点でしか確認していない。<br><br>そちらの環境にもよると思いますが、n=10**4 から n=10**5 のあたりで同じ実験をしてフィットすれば、O(n**2) という推測ができると思います。では、こっちのほうが n の値が小さいから不正確なのか、というとそうではなく、こっちのほうが正確だろうと思われます。その理由がメモリ階層です。<br><br>蛇足以降は忘れてください。</body>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6625",
      "text": " <timestamp>1277397674</timestamp>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6626",
      "text": " </comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6627",
      "text": " <comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6628",
      "text": " <username>nishiohirokazu</username>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6629",
      "text": " <body>n = 10 ** 6 周辺での実験より n = 10 ** 5 周辺での実験が正確である、という主張かと読めますが、その根拠は何ですか？実験データの恣意的な取捨選択に見えてしまいます。</body>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d662a",
      "text": " <timestamp>1277425996</timestamp>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d662b",
      "text": " </comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d662c",
      "text": " <comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d662d",
      "text": " <username>nuc</username>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d662e",
      "text": " <body>そのとおりで、10**4 から 10**5 でのフィットのほうが正確だと考えられます。少なくとも、10**5 から 3*10**5 で3点取るのは、まさに恣意的な取捨選択ですよね。<br><br>それは、メモリ階層が理由で n={1,2,3}*10**5 付近で特異的な動きをしていることが予想されるからです。<br>要するに、メモリーが足りなくなってハードディスクスワップを始めているのではないでしょうか。そして、n がもっと大きいところでは、主にハードディスクの速度で計算をするので、やっぱり O(n**2) となるでしょう。<br><br>たとえるならば、<br>n<10**5 では t=1*(n**2)<br>n>10**7 では t=10*(n**2)<br>あいだは滑らかにつながる、そのような振る舞いをしていると思われます。</body>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d662f",
      "text": " <timestamp>1277482174</timestamp>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6630",
      "text": " </comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6631",
      "text": " <comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6632",
      "text": " <username>nishiohirokazu</username>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6633",
      "text": " <body>>要するに、メモリーが足りなくなってハードディスクスワップを始めているのではないでしょうか。<br>要するに、それは根拠のないあなたの想像です。<br>コードも検証方法も公開されているのだから間違ったことを書く前に確認してみるといいですよ。<br><br>実行時のオプションに-K200Mを付けていることは書いていましたが、実験機にいくらメモリが載っているかは書いていませんでしたね。まあいまどき150MBしかメモリが無いマシンってわけではなくて、普通に2GBのメモリが載っています。-M200Mに変更してもn = 300000が問題なく終了するのでメモリを200MB以上は消費していないかと思います。</body>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6634",
      "text": " <timestamp>1277518285</timestamp>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6635",
      "text": " </comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6636",
      "text": " <comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6637",
      "text": " <username>nuc</username>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6638",
      "text": " <body>いえ、もちろん実験しました。私のデータとそれの生成用スクリプトが欲しければ差し上げますよ。<br>id:nishiohirokazu さんより広範囲で実験した上で、上記記事の実験考察はまずいな、と思っているのです。少なくとも3点しか取らないのはどうみてもだめでしょう。<br><br>そちらのマシンの環境が分かりませんから、スワップであるのは推測であり例でした(スワップならメモリ階層の例として誰でもご存知でしょう)が、キャッシュか(ページングか GC か)もしれませんね。<br>メモリ階層の類を原因とする理由はいくらでも考えられるでしょう。失礼ですが、メモリ階層はご存知ですか。<br><br><br>もう一回、一から行きましょう。<br><br>0. zipWith のコードは、3点から実行時間のオーダーが O(n**2.6) と id:nishiohirokazu さんは推測した。(以下の記述。ちなみに私のデータでは同じ解析方法で2.38。)<br>> 英語版には「An efficient implementation」と書かれているが、N = 100000でインタプリタ言語であるPythonより遅く、O(N ** 2.6)である。<br><br>1. zipWith のコードは、n がもう少し小さい範囲で調べると O(n**2.0) であると実験的に推測できる。<br><br>2. まず、0. の実験は範囲を恣意的に切り出したものであり、zipWith のコードは「O(N ** 2.6)である」とはいえない。<br><br>3. 一方、zipWith のコードの計算回数は、理論的に計算すると O(n**2) となると考えられる。(\"順番に足していく方式では2乗のオーダーまではしかたない。\"とあるのでここも認めているのですよね。内部でやっていることはサンクへのポインタを作ることなので遅延評価でも一緒です。)<br><br>4. そう考えると、n={1,2,3}*10**5 で O(n**2) よりも遅くなったのは、メモリ階層が影響を与えたからと考えるのが自然だ。メモリ階層が原因ならば、オーダーには影響を与えない。<br><br>とりあえず、2. まで分かってくだされば十分だと思います。</body>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6639",
      "text": " <timestamp>1277543888</timestamp>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d663a",
      "text": " </comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d663b",
      "text": " <comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d663c",
      "text": " <username>nishiohirokazu</username>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d663d",
      "text": " <body>ふむふむ、実験されたデータがあるのであればまずそれをご自分のブログなどで公開されてはいかがでしょう？こちらは何も実験せずに解釈だけで主張されているのかデータに基づくものなのかがわかりませんからね。<br><br>実験をせずに思い込みで主張されているものだと勘違いしてしまい失礼なことを申し上げた件に関してお詫びさせていただきます。</body>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d663e",
      "text": " <timestamp>1277550866</timestamp>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d663f",
      "text": " </comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6640",
      "text": " <comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6641",
      "text": " <username>nishiohirokazu</username>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6642",
      "text": " <body>おっと書き忘れました。メモリ階層についてですが、たとえばキャッシュに乗ってるデータにアクセスするのはメモリにアクセスしにいくより速く、ディスクにアクセスするよりはメモリにアクセスする方が速い、という意味に理解していたのですがnucさんの表現によるとGCもメモリ階層であるという主張に読めます。これは初耳ですので、明確に何をメモリ階層と読んでいるのか定義していただければ幸いです。</body>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6643",
      "text": " <timestamp>1277551154</timestamp>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6644",
      "text": " </comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6645",
      "text": " <comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6646",
      "text": " <username>nuc</username>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6647",
      "text": " <body>すみません、遅くなりました。<br><br>私としてはコードの解釈だけで十分だと思うのですが、実験もしました。そのために分かりにくい書き方になったと思います。<br><br>メモリ階層は仰る通りのことですが、空間計算量がいくつかの閾値で時間計算量の係数に影響を与える現象の代表とみなして、もう少し広くメモリ階層の類と書きました。<br><br>分かりました。すこししましたら blog で私の結果の方もまとめましょう。<br>これからもよろしくお願いします。</body>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6648",
      "text": " <timestamp>1278263876</timestamp>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6649",
      "text": " </comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d664a",
      "text": " <comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d664b",
      "text": " <username>nishiohirokazu</username>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d664c",
      "text": " <body>どうも、そろそろ議論が収束してきたようなのでまとめ記事を作りました。<br><br>Haskellの「fib = 1:1:zipWith (+) fib (tail fib)」がとても遅い件のまとめ<br>http://d.hatena.ne.jp/nishiohirokazu/20100724/1279982968<br><br>結局、GHCの6.10.1以前ではO(n^2)、6.10.2以降ではO(n^2.6)、という環境依存の現象だったわけですね。<br><br>実は最初のコメント返答の時点でこちらでも10000から300000までの10000きざみの実験をしてO(n^2.6)なのを確認していまして、それで「ろくに実験もしないで絡んできた」という思い込みをしてしまい上のような対応になったわけなのでした。めんどくさがらずにその実験データを公開していればもっと速くバージョンの違いが原因だと気づけたはずですね。すみません。</body>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d664d",
      "text": " <timestamp>1279984108</timestamp>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d664e",
      "text": " </comment>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d664f",
      "text": " </comments>",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6650",
      "text": "",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6651",
      "text": "[はてなダイアリー 2010-06-22 https://nishiohirokazu.hatenadiary.org/archive/2010/06/22]",
      "created": 1277132400,
      "updated": 1277132400,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}