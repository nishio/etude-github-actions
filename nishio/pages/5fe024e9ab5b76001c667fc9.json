{
  "id": "5fe024e9ab5b76001c667fc9",
  "title": "Disjoint Sparse Table",
  "created": 1608525034,
  "updated": 1608528771,
  "lines": [
    {
      "id": "5fe024e9ab5b76001c667fc9",
      "text": "Disjoint Sparse Table",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608525034,
      "updated": 1608525034
    },
    {
      "id": "5fe024eaaff09e0000bc2d20",
      "text": "長さNの静的な値の列が与えられた時に、前処理O(NlogN)で、その列の上の区間に対する演算がO(1)で計算できるようになるデータ構造",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608525035,
      "updated": 1608527908
    },
    {
      "id": "5fe0301baff09e0000d79b57",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608527900,
      "updated": 1608527900
    },
    {
      "id": "5fe02fb3aff09e0000d79b56",
      "text": "演算に要求される条件",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608527796,
      "updated": 1608528052
    },
    {
      "id": "5fe030caaff09e0000d79b59",
      "text": "　[結合則]: [$ (a * b) * c = a * (b * c)]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528074,
      "updated": 1608528150
    },
    {
      "id": "5fe030b1aff09e0000d79b58",
      "text": "　単位元や逆元は必要ない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528049,
      "updated": 1608528256
    },
    {
      "id": "5fe0316faff09e0000d79b5b",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528239,
      "updated": 1608528239
    },
    {
      "id": "5fe03181aff09e0000d79b5c",
      "text": "加算のような逆元のある演算についてはこれを使う必要はない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528257,
      "updated": 1608528363
    },
    {
      "id": "5fe031ebaff09e0000d79b5e",
      "text": "　[累積和]を使って構築O(N)で同じことができるから",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528363,
      "updated": 1608528409
    },
    {
      "id": "5fe0321eaff09e0000d79b5f",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528415,
      "updated": 1608528415
    },
    {
      "id": "5fe0321eaff09e0000d79b60",
      "text": "逆元のない乗算などで[左右から累積積]で[一つ除き積]を実現できる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528415,
      "updated": 1608528745
    },
    {
      "id": "5fe032bfaff09e0000d79b61",
      "text": "　これをたくさんの累積積を組み合わせて任意の区間の積を計算できるようにしたのがDisjoint Sparse Table",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528576,
      "updated": 1608528764
    },
    {
      "id": "5fe031deaff09e0000d79b5d",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528350,
      "updated": 1608528350
    },
    {
      "id": "5fe03314aff09e0000bc2d21",
      "text": "[Disjoint Sparse Table と セグ木に関するポエム - noshi91のメモ https://noshi91.hatenablog.com/entry/2018/05/08/183946]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528660,
      "updated": 1608528660
    },
    {
      "id": "5fe03382aff09e0000bfc15d",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528770,
      "updated": 1608528770
    },
    {
      "id": "5fe03315aff09e0000bc2d23",
      "text": "[Sparse Table]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528661,
      "updated": 1608528771
    },
    {
      "id": "5fe03315aff09e0000bc2d24",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528661,
      "updated": 1608528661
    },
    {
      "id": "5fe03314aff09e0000bc2d22",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528660,
      "updated": 1608528660
    }
  ]
}