{
  "id": "613ecca8164b20001d850915",
  "title": "Runtypes / io-ts",
  "created": 1631505602,
  "updated": 1632298319,
  "lines": [
    {
      "id": "613ecca8164b20001d850915",
      "text": "Runtypes / io-ts",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631505602,
      "updated": 1631505706
    },
    {
      "id": "613eccc1aff09e0000b88c7e",
      "text": ">[whitphx_ja: https://twitter.com/whitphx_ja/status/1436946766167826437] Runtypes推し",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631505602,
      "updated": 1631505715
    },
    {
      "id": "613ecccbaff09e0000b88c80",
      "text": "\t> 型定義がそのまま型チェッカの実装にもなって楽なので ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631505612,
      "updated": 1631505617
    },
    {
      "id": "613ecccbaff09e0000b88c81",
      "text": "\t> interfaceが増えてきたり複雑なinterfaceが登場したりしたらいちいち自分でチェッカを書いていられない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631505612,
      "updated": 1631505618
    },
    {
      "id": "613eccc1aff09e0000b88c7f",
      "text": "\t\thttps://github.com/pelotom/runtypes",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631505602,
      "updated": 1631505647
    },
    {
      "id": "613eccefaff09e0000b88c84",
      "text": "\t>io-tsの方がstar多いけど、関数型の匂いが強すぎてよわよわな自分には合わなかった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631505648,
      "updated": 1631505664
    },
    {
      "id": "613eccfeaff09e0000b88c85",
      "text": "\t\thttps://github.com/gcanti/io-ts",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631505662,
      "updated": 1631505683
    },
    {
      "id": "613ecd13aff09e0000b88c86",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631505683,
      "updated": 1631505684
    },
    {
      "id": "613eccdeaff09e0000b88c82",
      "text": "自分でJSONの型チェックするコードを書いてしまったが、自動化できるのか。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631505631,
      "updated": 1631505631
    },
    {
      "id": "613eccdfaff09e0000b88c83",
      "text": "人間が書くとバグるからこれを使う方向に進むか〜",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631505631,
      "updated": 1631505631
    },
    {
      "id": "613ecf70aff09e0000b88c87",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631506288,
      "updated": 1631506288
    },
    {
      "id": "613ecf70aff09e0000b88c88",
      "text": "Runtypes / io-tsのどっちを使うか、小さい(けど自分の使う複雑な構造を含んだ)型を使って比較する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631506288,
      "updated": 1631506327
    },
    {
      "id": "613ecf70aff09e0000b88c89",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631506288,
      "updated": 1631506288
    },
    {
      "id": "61443f41aff09e0000fcc59d",
      "text": "code:ts",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631862594,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc59f",
      "text": " test(\"io-ts, use implemented type\", () => {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5a0",
      "text": "   const obj_string = JSON.parse(`\"hello\"`); // is any",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5a1",
      "text": "   const obj_number = JSON.parse(`123`); // is any",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5a2",
      "text": " ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5a3",
      "text": "   expect(isRight(t.string.decode(obj_string))).toBeTruthy();",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5a4",
      "text": "   expect(isRight(t.string.decode(obj_number))).toBeFalsy();",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5a5",
      "text": " ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5a6",
      "text": "   const ret = t.string.decode(obj_string);",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5a7",
      "text": "   let string_value: string;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5a8",
      "text": "   if (isRight(ret)) {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5a9",
      "text": "     string_value = ret.right;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5aa",
      "text": "   } else {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5ab",
      "text": "     throw new Error(\"not string\");",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5ac",
      "text": "   }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5ad",
      "text": "   expect(string_value).toBe(\"hello\");",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5ae",
      "text": " });",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5af",
      "text": " ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5b0",
      "text": " test(\"runtypes, use implemented type\", () => {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5b1",
      "text": "   const obj_string = JSON.parse(`\"hello\"`); // is any",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5b2",
      "text": "   const obj_number = JSON.parse(`123`); // is any",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5b3",
      "text": " ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5b4",
      "text": "   expect(String.guard(obj_string)).toBeTruthy();",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5b5",
      "text": "   expect(String.guard(obj_number)).toBeFalsy();",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5b6",
      "text": " ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5b7",
      "text": "   let string_value: string;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5b8",
      "text": "   if (String.guard(obj_string)) {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5b9",
      "text": "     string_value = obj_string;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5ba",
      "text": "   } else {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5bb",
      "text": "     throw new Error(\"not string\");",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5bc",
      "text": "   }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5bd",
      "text": "   expect(string_value).toBe(\"hello\");",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5be",
      "text": " });",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869203
    },
    {
      "id": "61445913aff09e0000fcc5bf",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1631869203,
      "updated": 1631869205
    },
    {
      "id": "61498171aff09e0000f6d1ec",
      "text": "現実の「複雑な型」をio-tsとruntypesで書き比べ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207217,
      "updated": 1632207246
    },
    {
      "id": "6149818daff09e0000f6d20b",
      "text": "\thttps://gist.github.com/nishio/a5f8bdbc7961f3c0a569653e2dacfdd3",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207246,
      "updated": 1632207247
    },
    {
      "id": "61498186aff09e0000f6d20a",
      "text": "\tどちらのライブラリも2時間前に同時にインストールしたばかりの経験ゼロなので、同等にポンコツだと思って良い。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207238,
      "updated": 1632207260
    },
    {
      "id": "6149819caff09e0000f6d20c",
      "text": "\t疑問点1: io-ts、optionalのサポートがなくてpartialとのintersectionを作れとか書いてあるけど、ほんとにそれでいいの？振る舞いとしては同じだけど生成される型は酷い見た目だよ？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207260,
      "updated": 1632207260
    },
    {
      "id": "61498171aff09e0000f6d1f1",
      "text": "\t疑問点2: runtypesでio-tsのrecord相当のことをする方法がドキュメントを見てもよくわからない。自明だと思ったのかなのか省略されてる。(runtypesのRecordはio-tsのtypeなので別物)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207217,
      "updated": 1632207266
    },
    {
      "id": "61498171aff09e0000f6d1f3",
      "text": "\t\tキーがBrandedである場合、というこれまた現実によくあるやつの解決方法を参考にしたが、あってるかわからない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207217,
      "updated": 1632207268
    },
    {
      "id": "61498171aff09e0000f6d1f4",
      "text": "\t\t実際に僕の書いてるやつでもキーはBrandedなのだが、JSONから読んだもののチェックをする目的で使おうと思ってるのでその段階ではstringでいいやーとなってる。Branded typesはどちらでも明示的にサポートしてる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207217,
      "updated": 1632207274
    },
    {
      "id": "61498171aff09e0000f6d1f6",
      "text": "\truntypesの側はPattern matchingの章に書かれてる通りunion型に対するそれぞれの型のための処理を関数オーバーロード的に一つに束ねて書ける。「へー、面白いじゃん」的な感じ。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207217,
      "updated": 1632207281
    },
    {
      "id": "61498171aff09e0000f6d1f8",
      "text": "\truntypesは通常の型チェックではできないような「正の数」なども「Numberに、正である制約をつけたもの」として型オブジェクトにすることができる。もちろん型にした時には制約が外れたnumberになるが、型ガードではちゃんとチェックされる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207217,
      "updated": 1632207292
    },
    {
      "id": "61498171aff09e0000f6d1fa",
      "text": "\t\truntypesでは、関数に契約をつけることができる。例えばゼロになってはいけない制約をつけることができる。この時の書き方はコンパクトではあるが、ちょっとabuseっぽさがある。言語内DSLで英文法に寄せてる感じがある。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207217,
      "updated": 1632207297
    },
    {
      "id": "61498171aff09e0000f6d1fc",
      "text": "\tio-tsは裸のEither型を返してくるのでギョッとする人も多いかもしれない。内部構造もろだし感。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207217,
      "updated": 1632207305
    },
    {
      "id": "614981c9aff09e0000f6d20d",
      "text": "\t\tだけどまぁ現実の利用の際には自分で好きなようにラップすれば良いだろうとも思う。中身が出てるから扱いやすくなることもあると思う。runtypesでどうなってるのかは知らない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207305,
      "updated": 1632207305
    },
    {
      "id": "61498171aff09e0000f6d1fe",
      "text": "\t\t例えば「これからTypeScriptでプログラミング言語を実装します」という場合だったら、どこでどんなエラーが起きたとか何件起きたなどを取得できるio-tsの方が向いてるかも。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207217,
      "updated": 1632207358
    },
    {
      "id": "614981feaff09e0000c6d2ef",
      "text": "\t\t一方で僕は「壊れてないはずのJSONを読むが、壊れてた時に素通しすると問題究明しにくいから読むタイミングでチェックしたい」程度のことなので、まあruntypesの方が向いてそうかなと思う。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207358,
      "updated": 1632207367
    },
    {
      "id": "61498207aff09e0000c6d2f0",
      "text": "\t\t　io-tsでも自分の好むインターフェースになるようにユーティリティ関数を実装すれば良い、そこまで労力かける気がないってだけ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207367,
      "updated": 1632207431
    },
    {
      "id": "614984c5aff09e0000f6d210",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632208070,
      "updated": 1632208070
    },
    {
      "id": "61498207aff09e0000c6d2f1",
      "text": "io-tsのoptional型に対する対処法が気持ち悪すぎる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207368,
      "updated": 1632208068
    },
    {
      "id": "61498265aff09e0000f6d20e",
      "text": "\t逆にまあ「optional型なんて気持ち悪いもの使わねえよ」と言い切れるようなケースでならio-tsはフィットすると思う。これは結局のところ型との付き合い方のスタンスの違いだと思う。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207462,
      "updated": 1632208073
    },
    {
      "id": "61498171aff09e0000f6d205",
      "text": "\t>[odiak_ https://twitter.com/odiak_/status/1438822559290589186]: `const optional=(tp)=>t.union([tp, t.undefined])`というようなやつを定義して、`t.type({a: optional(t.string),b:t.number})`などと書くと良いと思います。これは`{a?: string, b: number}`とは厳密には違うんですが、`{b: 3}`のような値も受け付けてくれて実用上問題ないです。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207217,
      "updated": 1632208068
    },
    {
      "id": "61498171aff09e0000f6d206",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207217,
      "updated": 1632207217
    },
    {
      "id": "614984cbaff09e0000f6d211",
      "text": "\t[Runtypes と io-ts のoptionalの比較]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632208076,
      "updated": 1632208884
    },
    {
      "id": "614982d2aff09e0000f6d20f",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207570,
      "updated": 1632207570
    },
    {
      "id": "61498171aff09e0000f6d207",
      "text": ">[odiak_ https://twitter.com/odiak_/status/1438823161064091651]: あと、io-tsはcustom typeを定義すると色々やれて楽しいです。値に制約を付けた型や、特定のオブジェクトに変換する型、T|null|undefinedをT|undefinedに変換する型など。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207217,
      "updated": 1632207217
    },
    {
      "id": "61498171aff09e0000f6d208",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632207217,
      "updated": 1632207217
    },
    {
      "id": "614ae4afaff09e0000f3401d",
      "text": "Runtypesにcheckってメソッドがある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632298159,
      "updated": 1632298222
    },
    {
      "id": "614ae4c1aff09e0000f34027",
      "text": "\tbefore",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632298177,
      "updated": 1632298180
    },
    {
      "id": "614ae4b3aff09e0000f3401f",
      "text": " code:ts",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632298164,
      "updated": 1632298181
    },
    {
      "id": "614ae4b6aff09e0000f34020",
      "text": "  let string_value: string;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632298166,
      "updated": 1632298181
    },
    {
      "id": "614ae4b6aff09e0000f34021",
      "text": "  if (String.guard(obj_string)) {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632298166,
      "updated": 1632298181
    },
    {
      "id": "614ae4b6aff09e0000f34022",
      "text": "    string_value = obj_string;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632298166,
      "updated": 1632298181
    },
    {
      "id": "614ae4b6aff09e0000f34023",
      "text": "  } else {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632298166,
      "updated": 1632298181
    },
    {
      "id": "614ae4b6aff09e0000f34024",
      "text": "    throw new Error(\"not string\");",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632298166,
      "updated": 1632298181
    },
    {
      "id": "614ae4b6aff09e0000f34025",
      "text": "  }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632298166,
      "updated": 1632298181
    },
    {
      "id": "614ae4b6aff09e0000f34026",
      "text": "\tafter",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632298166,
      "updated": 1632298183
    },
    {
      "id": "614ae4c7aff09e0000f34029",
      "text": "\tcode:ts",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632298183,
      "updated": 1632298198
    },
    {
      "id": "614ae4d6aff09e0000f3402a",
      "text": "\t   {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632298198,
      "updated": 1632298199
    },
    {
      "id": "614ae4d6aff09e0000f3402b",
      "text": "      const string_value = String.check(obj_string);",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632298199,
      "updated": 1632298199
    },
    {
      "id": "614ae4d6aff09e0000f3402c",
      "text": "      expect(string_value).toBe(\"hello\");",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632298199,
      "updated": 1632298199
    },
    {
      "id": "614ae4d6aff09e0000f3402d",
      "text": "    }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632298199,
      "updated": 1632298199
    },
    {
      "id": "614ae4d6aff09e0000f3402e",
      "text": "    // const string_value = String.check(obj_number);",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632298199,
      "updated": 1632298199
    },
    {
      "id": "614ae4d6aff09e0000f3402f",
      "text": "    // throws: `ValidationError: Expected string, but was number`",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632298199,
      "updated": 1632298319
    },
    {
      "id": "614ae4d6aff09e0000f34030",
      "text": "　親切なエラーメッセージだ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632298199,
      "updated": 1632298258
    },
    {
      "id": "614ae4c6aff09e0000f34028",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1632298182,
      "updated": 1632298182
    }
  ]
}