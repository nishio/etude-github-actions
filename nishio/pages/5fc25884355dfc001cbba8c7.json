{
  "id": "5fc25884355dfc001cbba8c7",
  "title": "ARC109",
  "created": 1606572166,
  "updated": 1607081930,
  "lines": [
    {
      "id": "5fc25884355dfc001cbba8c7",
      "text": "ARC109",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606572166,
      "updated": 1606572167
    },
    {
      "id": "5fc25fadaff09e0000dc8032",
      "text": "3問でした。Dに1時間使えそうだったので「落ち着いてやれば大丈夫」と素朴解法を実装して状態遷移図を作り始め、残り15分くらいでミスに気づいて落ち着きを失ってアウト(苦笑)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606573998,
      "updated": 1606573998
    },
    {
      "id": "5fc25887aff09e0000dc802e",
      "text": "[https://gyazo.com/d2eb8e41a1e38f0e23cc2c8254dd5a8a]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606572167,
      "updated": 1606572170
    },
    {
      "id": "5fc25889aff09e0000dc802f",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606572170,
      "updated": 1606572170
    },
    {
      "id": "5fc25c0caff09e0000dc8030",
      "text": "[https://gyazo.com/e6a070f0d5974b30af3ad656f0bdda8c]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606573069,
      "updated": 1606573072
    },
    {
      "id": "5fc25c0faff09e0000dc8031",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606573072,
      "updated": 1606573072
    },
    {
      "id": "5fc25fbaaff09e0000dc8033",
      "text": "[A - Hands https://atcoder.jp/contests/arc109/tasks/arc109_a]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574010,
      "updated": 1606574138
    },
    {
      "id": "5fc25ff0aff09e00002df242",
      "text": "　どのタイミングでビルを移ってもコストは変わらないのだから最初に移ると考えて良い",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574064,
      "updated": 1606574091
    },
    {
      "id": "5fc2607daff09e00002df245",
      "text": "　　[操作の順番によらない]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574206,
      "updated": 1606574214
    },
    {
      "id": "5fc2600baff09e00002df243",
      "text": "　ビルを移った後の上下移動に、廊下を使うコスト2xの方法と階段を使うコストyの方法がある。どちらが安いのか判断して安い方を使う",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574091,
      "updated": 1606574195
    },
    {
      "id": "5fc25fbbaff09e0000dc8035",
      "text": "\tcode:python",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574011,
      "updated": 1606574031
    },
    {
      "id": "5fc25fcfaff09e0000dc8036",
      "text": "\t def solve(a, b, x, y):",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574031,
      "updated": 1606574032
    },
    {
      "id": "5fc25fd0aff09e0000dc8037",
      "text": "      ret = x",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574032,
      "updated": 1606574032
    },
    {
      "id": "5fc25fd0aff09e0000dc8038",
      "text": "      if b < a:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574032,
      "updated": 1606574032
    },
    {
      "id": "5fc25fd0aff09e0000dc8039",
      "text": "          a -= 1",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574032,
      "updated": 1606574032
    },
    {
      "id": "5fc25fd0aff09e0000dc803a",
      "text": "  ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574032,
      "updated": 1606574032
    },
    {
      "id": "5fc25fd0aff09e0000dc803b",
      "text": "      if 2 * x < y:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574032,
      "updated": 1606574032
    },
    {
      "id": "5fc25fd0aff09e0000dc803c",
      "text": "          up = 2 * x",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574032,
      "updated": 1606574032
    },
    {
      "id": "5fc25fd0aff09e0000dc803d",
      "text": "      else:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574032,
      "updated": 1606574032
    },
    {
      "id": "5fc25fd0aff09e0000dc803e",
      "text": "          up = y",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574032,
      "updated": 1606574032
    },
    {
      "id": "5fc25fd0aff09e0000dc803f",
      "text": "  ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574032,
      "updated": 1606574032
    },
    {
      "id": "5fc25fd0aff09e0000dc8040",
      "text": "      ret += abs(a - b) * up",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574032,
      "updated": 1606574032
    },
    {
      "id": "5fc25fd0aff09e0000dc8041",
      "text": "      return ret",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574032,
      "updated": 1606574032
    },
    {
      "id": "5fc25fd0aff09e0000dc8042",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574032,
      "updated": 1606574199
    },
    {
      "id": "5fc26077aff09e00002df244",
      "text": "[B - log https://atcoder.jp/contests/arc109/tasks/arc109_b]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574199,
      "updated": 1606574252
    },
    {
      "id": "5fc260acaff09e0000dc8043",
      "text": "\t小さい方から考えて行って1〜5が欲しい時に6を買って1+2+3に分割するとお得だと気づく",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574253,
      "updated": 1606574323
    },
    {
      "id": "5fc260f3aff09e00002df246",
      "text": "\tつまりn+1を超えない最大の三角数を求める問題",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574324,
      "updated": 1606575112
    },
    {
      "id": "5fc263efaff09e00002df24a",
      "text": "\t　[$ n + 1 \\le T_x] であるようなxを求める問題になる　[三角数]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606575088,
      "updated": 1606575088
    },
    {
      "id": "5fc25fbaaff09e0000dc8034",
      "text": "　code:python",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574011,
      "updated": 1606574580
    },
    {
      "id": "5fc261f4aff09e0000dc8044",
      "text": "　 def solve(N):",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574581,
      "updated": 1606574581
    },
    {
      "id": "5fc261f4aff09e0000dc8045",
      "text": "      from math import sqrt",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574581,
      "updated": 1606574581
    },
    {
      "id": "5fc261f4aff09e0000dc8046",
      "text": "      x = int(sqrt(2 * N + 2)) - 1",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574581,
      "updated": 1606574581
    },
    {
      "id": "5fc261f4aff09e0000dc8047",
      "text": "      if (x + 2) * (1 + x) // 2 <= N + 1:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574581,
      "updated": 1606574583
    },
    {
      "id": "5fc261f4aff09e0000dc8049",
      "text": "          x += 1",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574581,
      "updated": 1606574581
    },
    {
      "id": "5fc261f4aff09e0000dc804a",
      "text": "  ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574581,
      "updated": 1606574581
    },
    {
      "id": "5fc261f4aff09e0000dc804b",
      "text": "      return N - x + 1",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574581,
      "updated": 1606574581
    },
    {
      "id": "5fc261f4aff09e0000dc804c",
      "text": "\t平方根を取ることが精度的にアリなのかは怪しい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574581,
      "updated": 1606574956
    },
    {
      "id": "5fca1e27aff09e0000b07af3",
      "text": "\t　Nが10^18で、倍精度浮動小数点数の仮数部が52ビット、10進で16桁未満なので単純に計算すれば当然精度が足りない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607081511,
      "updated": 1607081734
    },
    {
      "id": "5fca1fb8aff09e0000b07af5",
      "text": "\t　　https://ja.m.wikipedia.org/wiki/倍精度浮動小数点数",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607081916,
      "updated": 1607081916
    },
    {
      "id": "5fca1eadaff09e0000b07af4",
      "text": "\t　なので1つ増やしたものが解であるかどうか確認してるわけなのだが、これで本当に十分であるかはきちんと考察してない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607081645,
      "updated": 1607081692
    },
    {
      "id": "5fca1fbeaff09e0000b07af6",
      "text": "\t　　減る方向にズレるケースがあるのかないのか。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607081919,
      "updated": 1607081930
    },
    {
      "id": "5fc261faaff09e0000dc804d",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606574586,
      "updated": 1606574586
    },
    {
      "id": "5fc26756aff09e0000dc805b",
      "text": "[C - Large RPS Tournament https://atcoder.jp/contests/arc109/tasks/arc109_c]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606575958,
      "updated": 1606575972
    },
    {
      "id": "5fc26766aff09e0000dc805c",
      "text": "\tSが周期的なのだから勝負の結果ももちろん周期的",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606575975,
      "updated": 1606576132
    },
    {
      "id": "5fc26804aff09e0000dc805d",
      "text": "\t細かい計算節約をしなくてもたかだか10000回勝敗判定すれば良いので富豪的に解いた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606576132,
      "updated": 1606576132
    },
    {
      "id": "5fc2674faff09e0000dc804e",
      "text": " code:python",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606575952,
      "updated": 1606575958
    },
    {
      "id": "5fc26752aff09e0000dc8050",
      "text": "  def solve(N, K, S):",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606575955,
      "updated": 1606575958
    },
    {
      "id": "5fc26753aff09e0000dc8051",
      "text": "      last = [0 if c == \"R\" else 1 if c == \"P\" else 2 for c in S]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606575955,
      "updated": 1606575958
    },
    {
      "id": "5fc26753aff09e0000dc8052",
      "text": "      match = [0, 1, 0, 1, 1, 2, 0, 2, 2]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606575955,
      "updated": 1606575958
    },
    {
      "id": "5fc26753aff09e0000dc8053",
      "text": "  ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606575955,
      "updated": 1606575958
    },
    {
      "id": "5fc26753aff09e0000dc8054",
      "text": "      for _k in range(K - 1, -1, -1):",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606575955,
      "updated": 1606575958
    },
    {
      "id": "5fc26753aff09e0000dc8055",
      "text": "          next = []",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606575955,
      "updated": 1606575958
    },
    {
      "id": "5fc26753aff09e0000dc8056",
      "text": "          for i in range(0, 2 * N, 2):",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606575955,
      "updated": 1606575958
    },
    {
      "id": "5fc26753aff09e0000dc8057",
      "text": "              next.append(match[last[i % N] * 3 + last[(i + 1) % N]])",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606575955,
      "updated": 1606575958
    },
    {
      "id": "5fc26753aff09e0000dc8058",
      "text": "          last = next",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606575955,
      "updated": 1606575958
    },
    {
      "id": "5fc26753aff09e0000dc8059",
      "text": "      return \"RPS\"[last[0]]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606575955,
      "updated": 1606575958
    },
    {
      "id": "5fc26753aff09e0000dc805a",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606575955,
      "updated": 1606576176
    },
    {
      "id": "5fc26871aff09e0000dc805e",
      "text": "[D - く https://atcoder.jp/contests/arc109/tasks/arc109_d]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606576241,
      "updated": 1606576241
    },
    {
      "id": "5fc268f4aff09e0000dc8060",
      "text": "\t1時間使えそうだったので「落ち着いてやれば大丈夫」と素朴解法を実装して状態遷移図を作り始め、残り15分くらいでミスに気づいて落ち着きを失ってアウト(苦笑)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606576372,
      "updated": 1606576376
    },
    {
      "id": "5fc26905aff09e0000dc8062",
      "text": "\t「最低2手でどの向きにもなれる」「3手以内に解があるかを探索して、なければ2手以下で平行移動に都合のいい向きになって2手以下で戻れば良い」と考えてたけど、途中で都合の良い向きが変わるケースがあるのでは？と気づいて以下略",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606576389,
      "updated": 1606576390
    },
    {
      "id": "5fc2694caff09e00002df24c",
      "text": "\t考えたこと",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606576460,
      "updated": 1606576464
    },
    {
      "id": "5fc269cfaff09e00002df252",
      "text": "\t　中心の位置と4方位で状態遷移図を作ろう",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606576591,
      "updated": 1606576591
    },
    {
      "id": "5fc2694faff09e00002df24d",
      "text": "\t　小さい範囲の状態遷移を手で描いてみる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606576464,
      "updated": 1606576573
    },
    {
      "id": "5fc269c9aff09e00002df250",
      "text": "\t　　ミスしそう",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606576586,
      "updated": 1606576597
    },
    {
      "id": "5fc269a7aff09e00002df24e",
      "text": "\t　1ステップ後の遷移先を出力するコードを作った",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606576551,
      "updated": 1606576650
    },
    {
      "id": "5fc26a0aaff09e00002df253",
      "text": "\t　　各状態7つの状態に遷移する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606576651,
      "updated": 1606576665
    },
    {
      "id": "5fc26b09aff09e00002df255",
      "text": "\t　2ステップでどの向きにもなれる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606576909,
      "updated": 1606576918
    },
    {
      "id": "5fc26a1baff09e00002df254",
      "text": "\t　3ステップ後まで前計算しておいて、それに含まれない4ステップ以上の解なら、スタートから2ステップ、ゴールから2ステップ、間は姿勢を維持して移動、で行けるだろう…行けるか？？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606576667,
      "updated": 1606577021
    },
    {
      "id": "5fc268f6aff09e0000dc8061",
      "text": "\t公式解説",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606576374,
      "updated": 1606576453
    },
    {
      "id": "5fc26941aff09e00002df24b",
      "text": "\t　初期状態から1〜3ステップ後にどの状態にいるかを求めるコード( step→(position, rotation) )は作ったのだが、それを反転させたもの( (position, rotation)→step )を観察することは思いつかなかった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606576449,
      "updated": 1606576449
    },
    {
      "id": "5fc26b9aaff09e00002df256",
      "text": "\t　[値域と定義域の交換]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606577050,
      "updated": 1606577055
    },
    {
      "id": "5fc26750aff09e0000dc804f",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606575953,
      "updated": 1606575953
    }
  ]
}