{
  "id": "6090ec08a287e6002291a1ca",
  "title": "Hatena2011-11-03",
  "created": 1320246000,
  "updated": 1320246000,
  "lines": [
    {
      "id": "6090ec2caff09e00003d9d33",
      "text": "Hatena2011-11-03",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d34",
      "text": "code:hatena",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d35",
      "text": " <body>",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d36",
      "text": " *1320313043*意外",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d37",
      "text": " 結婚式の動画のために自分の顔写真が必要で、Googleで自分の名前でイメージ検索していたらいろいろなものが発見される。",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d38",
      "text": " ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d39",
      "text": " <a href='http://www.nishiohirokazu.org/blog/2006/07/post_74.html#003627'>2006年7月の自分のブログエントリー</a>にこんなことが書いてあった。",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d3a",
      "text": " >>",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d3b",
      "text": " 意外。最近しばらくJavaとPythonばっかり使っていて、多くの人に「JavaとPythonを使う人(っていうかJython使い)」と思われているのですが、その「最近」ってのは意外と短いようです。2004/09/03 13:24:52に書かれた日記にはこんなことが",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d3c",
      "text": " >>",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d3d",
      "text": "     あー、やっぱJavaを勉強しようかな(こうしてRubyの勉強がどんどん後回しになる)",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d3e",
      "text": " ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d3f",
      "text": "     そうか、しばらくDelphiを封印して、今までのDelphi+Pythonでの開発をJava+Pythonでやるようにしてみればいいのかな、Jythonもあるし。 ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d40",
      "text": " <<",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d41",
      "text": " なんて書いてあるので、Jython歴はまだ2年に達していないようです。意外意外。つまり今から2年後に僕がC#とかIronPythonとか使っていても何もおかしくないと言うことですね。っていうか2年前から「Ruby勉強しなきゃ」って言い続けてるのか自分…。 ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d42",
      "text": " <<",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d43",
      "text": " ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d44",
      "text": " その3年後に自分がPythonではなくRubyの処理系をハックするクラスで授業を受け持つとか4年後にRubyのバグにパッチを書くことになるとか誰が予想できたであろうか。というわけで3年後にはまた何かぜんぜん違うことをしているんじゃないかなぁ、自分。っていうか自分が結婚したのが一番予想外か。",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d45",
      "text": " ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d46",
      "text": " *1320317172*NumPyで行列を各column単位でイテレートするには",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d47",
      "text": " 追記：結論としてはtransposeはデータのコピーをしないので気兼ねなく使ってOK。",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d48",
      "text": " ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d49",
      "text": " まず「各column単位でイテレートしたい」が理解してもらいにくいので簡単に説明する。",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d4a",
      "text": " ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d4b",
      "text": " ある行列matがあったとする。",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d4c",
      "text": " >||",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d4d",
      "text": " In [125]: array([[1, 2], [3, 4]])",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d4e",
      "text": " Out[125]: ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d4f",
      "text": " array([[1, 2],",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d50",
      "text": "        [3, 4]])",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d51",
      "text": " ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d52",
      "text": " In [126]: mat = _",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d53",
      "text": " ||<",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d54",
      "text": " ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d55",
      "text": " これを普通にイテレートすると各row単位でイテレートする。",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d56",
      "text": " ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d57",
      "text": " >||",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d58",
      "text": " In [139]: for v in mat: print v",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d59",
      "text": " [1 2]",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d5a",
      "text": " [3 4]",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d5b",
      "text": " ||<",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d5c",
      "text": " ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d5d",
      "text": " で、そうじゃなくて[1 3] [2 4]とcolumn単位でイテレートしたい場合には、どうするのがスマートだろうか？もちろんtransposeしてしまうというのはひとつの手。",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d5e",
      "text": " ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d5f",
      "text": " >||",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d60",
      "text": " In [140]: for v in mat.transpose(): print v",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d61",
      "text": " [1 3]",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d62",
      "text": " [2 4]",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d63",
      "text": " ||<",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d64",
      "text": " ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d65",
      "text": " だけど、array#transposeはイテレータではなく、行列をまるっとコピーしてしまう。将来的に行列が大きくなった場合のことを考えると、イテレートのためだけにtransposeはしたくない。追記：これは事実誤認でtransposeでコピーはされない。",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d66",
      "text": " ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d67",
      "text": " shapeとrangeとスライシングで作るというのはもう一つの手だ。これは関数にまとめておくことができるので可読性をあまり損ねることなく使える。",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d68",
      "text": " ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d69",
      "text": " >||",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d6a",
      "text": " In [141]: [mat[:, i] for i in range(mat.shape[1])]",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d6b",
      "text": " Out[141]: [array([1, 3]), array([2, 4])]",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d6c",
      "text": " ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d6d",
      "text": " In [142]: def iter_column(mat):",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d6e",
      "text": "    .....:     return (mat[:, i] for i in xrange(mat.shape[1]))",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d6f",
      "text": "    .....: ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d70",
      "text": " ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d71",
      "text": " In [143]: for v in iter_column(mat): print v",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d72",
      "text": " [1 3]",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d73",
      "text": " [2 4]",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d74",
      "text": " ||<",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d75",
      "text": " ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d76",
      "text": " で、疑問なのは、なんでこれがarrayのメソッドになってないのかということ。それともどこかにユーティリティ関数として置かれてたりするのかな？まだ見つけられていない。",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d77",
      "text": " ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d78",
      "text": " *1320318891*iMovieで静止画の自動スクロールを調整したい場合",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d79",
      "text": " iMovieは写真をポンポンとドロップするだけで、画像の重要そうなところを判断して適当にスクロールするイフェクトをつけてくれます。素人に優しいシステムですね。だけどたまに自動判定に失敗するので調整したいことがあります。それがどこからいじれるのかわからなかったのでメモ。",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d7a",
      "text": " ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d7b",
      "text": " クリップの上にマウスオーバーしたときには、上に切り取りマークのアイコン、中央にクリップの継続時間、下に歯車マークのアイコンが出る。歯車マークから色々な詳細設定などのメニューが出るのでこの中にあるかな？と思ってしまうのが罠。上の切り取りアイコンにマウスオーバーすると「クリップに切り取り、回転、またはKen Burnsエフェクトが適用されている」という旨のメッセージが。このアイコンをダブルクリックすると調整画面が出る。「Ken Burnsエフェクト」ってのが画像がスクロールするエフェクトの名前らしい。",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d7c",
      "text": " ",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d7d",
      "text": " ref. <a href='http://en.wikipedia.org/wiki/Ken_Burns_effect'>Ken Burns effect - Wikipedia, the free encyclopedia</a>",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d7e",
      "text": " </body>",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d7f",
      "text": "",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2caff09e00003d9d80",
      "text": "[はてなダイアリー 2011-11-03 https://nishiohirokazu.hatenadiary.org/archive/2011/11/03]",
      "created": 1320246000,
      "updated": 1320246000,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}