{
  "id": "5efd529d8c7d24001e45204e",
  "title": "全方位木DP",
  "created": 1593660067,
  "updated": 1594393891,
  "lines": [
    {
      "id": "5efd529d8c7d24001e45204e",
      "text": "全方位木DP",
      "userId": "582e63d27c56960011aff09e",
      "created": 1593660067,
      "updated": 1593660070
    },
    {
      "id": "5f06fe57aff09e0000d77e53",
      "text": "全頂点を根として[木DP]をする場合、有向辺を定義域とすれば結果の使い回しができてO(N)になるというテクニック",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594293852,
      "updated": 1594294191
    },
    {
      "id": "5f06fa6faff09e0000d77e46",
      "text": "[https://gyazo.com/5f02c5706cebeceb42cc0f5e7ed2843f]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594292848,
      "updated": 1594292849
    },
    {
      "id": "5f06fa70aff09e0000d77e47",
      "text": "　通常の木DPは特定の根について辺の本数をNとしてO(N)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594292849,
      "updated": 1594292913
    },
    {
      "id": "5f06fab1aff09e0000d77e4a",
      "text": "　　木なので辺は頂点-1本",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594292913,
      "updated": 1594292929
    },
    {
      "id": "5f06fac7aff09e0000d77e4b",
      "text": "　すべての頂点について木DPをしたい時、単純に繰り返すとN^2のオーダーになる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594292936,
      "updated": 1594292999
    },
    {
      "id": "5f06fb06aff09e0000d77e4c",
      "text": "　　最初の木DPの時の結果を再利用すると2Nステップになる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594292999,
      "updated": 1594389261
    },
    {
      "id": "5f06fb6baff09e0000d77e4d",
      "text": "　図では「Aを通る最長パスを求めよ」をまず7ステップの木DPで求めている",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594293100,
      "updated": 1594293160
    },
    {
      "id": "5f070263aff09e0000d77e56",
      "text": "　　ある特定の根から子供の木の深さを調べて、その大きい方から二つを足したものがその頂点を通る最長パス",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594294884,
      "updated": 1594294941
    },
    {
      "id": "5f06fba8aff09e0000d77e4e",
      "text": "　　次に「Bを通る最長パスを求めよ」を解く際に、Aについての木DPの結果を再利用して1ステップで完了している",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594293160,
      "updated": 1594389242
    },
    {
      "id": "5f06fc15aff09e0000d77e4f",
      "text": "　この再利用が容易な形で計算結果を持つには頂点ではなく有向辺が定義域である必要がある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594293270,
      "updated": 1594293346
    },
    {
      "id": "5f06fc62aff09e0000d77e50",
      "text": "　　Aが親である時のEとFが親である時のEは別物なので",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594293347,
      "updated": 1594293400
    },
    {
      "id": "5f06fc97aff09e0000d77e51",
      "text": "　　[https://gyazo.com/7b2da7c244be0051fd9755847b7e7d22]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594293400,
      "updated": 1594293486
    },
    {
      "id": "5f06fceeaff09e0000d77e52",
      "text": "　　逆の言い方をすると、単独の木DPの時は「有向辺の根本」と「根以外の頂点」が一対一対応するので頂点を定義域にできているだけ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594293486,
      "updated": 1594294725
    },
    {
      "id": "5f07016daff09e0000d77e54",
      "text": "　　有向辺を文字通り「始点と終点のタプル」で持っても動くのだけど、辺を「根に近づく勉強」「根から遠ざかる辺」の2つに分けるとそれぞれ始点と終点が根以外の頂点と一対一対応するので楽",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594294639,
      "updated": 1594388613
    },
    {
      "id": "5f087085aff09e0000f2848c",
      "text": "　　　見かけた実装では最初に無向グラフを頂点から幅優先探索して「根に近づく辺」を取り除いてた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594388613,
      "updated": 1594388700
    },
    {
      "id": "5f0870dbaff09e0000f2848d",
      "text": "　　　探索順を保管することで、再帰呼び出しなく実装できる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594388700,
      "updated": 1594388733
    },
    {
      "id": "5f0884e4aff09e0000f284a8",
      "text": "　　　最初の木DPは幅優先の逆順で処理できる、次のフェーズで正順で処理して完了",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594393828,
      "updated": 1594393891
    },
    {
      "id": "5f0870feaff09e0000f2848e",
      "text": "　集計に工夫が必要",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594388735,
      "updated": 1594389275
    },
    {
      "id": "5f08731baff09e0000f2848f",
      "text": "　　ある頂点に辺が1万本つながっている(位数1万)とする、この頂点から出る有向辺の値は残りの9999本から求められる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594389275,
      "updated": 1594389429
    },
    {
      "id": "5f08735eaff09e0000f28490",
      "text": "　　この集計処理が位数のオーダーだと位数をNとしてO(N^2)のオーダー",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594389343,
      "updated": 1594389517
    },
    {
      "id": "5f08740daff09e0000f28491",
      "text": "　　　一つの頂点に辺が集中しているグラフの時に大変なことになる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594389517,
      "updated": 1594389522
    },
    {
      "id": "5f087413aff09e0000f28492",
      "text": "　　　素朴に「木」と言った時に多くの人の脳内に浮かぶのは位数が小さいグラフ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594389524,
      "updated": 1594389605
    },
    {
      "id": "5f087465aff09e0000f28493",
      "text": "　　　問題条件で明示的に除外していない以上テストケースはこのパターンを突いてくる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594389605,
      "updated": 1594389605
    },
    {
      "id": "5f087471aff09e0000f28494",
      "text": "　　この集計をO(1)にするテクニックは全方位木DPとは無関係",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594389617,
      "updated": 1594389687
    },
    {
      "id": "5f0874c3aff09e0000f28496",
      "text": "　　　集計処理の性質に依存する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594389700,
      "updated": 1594389720
    },
    {
      "id": "5f08749baff09e0000f28495",
      "text": "　　　「N個の数から一つを取り除いたものの和を取りたい」",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594389659,
      "updated": 1594389743
    },
    {
      "id": "5f0874efaff09e0000f28497",
      "text": "　　　　総和を求めておいて、一つ引く",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594389744,
      "updated": 1594390071
    },
    {
      "id": "5f087506aff09e0000f28498",
      "text": "　　　　一般化すると「[逆元]が存在する二項演算」ならこれが使える",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594389767,
      "updated": 1594389836
    },
    {
      "id": "5f08754caff09e0000f28499",
      "text": "　　　「N個の数から一つを取り除いたものの積を取りたい」",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594389836,
      "updated": 1594389888
    },
    {
      "id": "5f08757faff09e0000f2849a",
      "text": "　　　　乗算は逆元がない(0で割れない)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594389888,
      "updated": 1594389936
    },
    {
      "id": "5f087667aff09e0000f2849d",
      "text": "　　　　[単位元]があって[結合則]が成り立つなら[左右から累積積]できる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594390120,
      "updated": 1594390168
    },
    {
      "id": "5f0875deaff09e0000f2849c",
      "text": "　　　　剰余がついててもこのクラスになる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594389982,
      "updated": 1594390083
    },
    {
      "id": "5f07016daff09e0000d77e55",
      "text": "　根に集まる計算をした後、根から順に上記の「子に降りる矢印をO(N)で計算」する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594294639,
      "updated": 1594393686
    },
    {
      "id": "5f088455aff09e0000f284a3",
      "text": "　　[https://gyazo.com/9cdfd1567858c3214c5f7147643700fe]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594393686,
      "updated": 1594393689
    },
    {
      "id": "5f088458aff09e0000f284a4",
      "text": "　　図ではAの子に対して一括で計算している",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594393689,
      "updated": 1594393713
    },
    {
      "id": "5f088471aff09e0000f284a5",
      "text": "　　そうすると子B,D,Eはそこに集まる矢印が全部確定したので最終結果を出すのに必要な情報が揃う",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594393713,
      "updated": 1594393759
    },
    {
      "id": "5f08849faff09e0000f284a6",
      "text": "　　これを繰り返していくことで幅優先探索の順で答えが確定していく",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594393760,
      "updated": 1594393805
    },
    {
      "id": "5f0884cfaff09e0000f284a7",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594393807,
      "updated": 1594393808
    },
    {
      "id": "5f06fa75aff09e0000d77e48",
      "text": "参考",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594292854,
      "updated": 1594293515
    },
    {
      "id": "5f087fc5aff09e000010d0df",
      "text": "\t[木DPと全方位木DPを基礎から抽象化まで解説【競技プログラミング】 | アルゴリズムロジック https://algo-logic.info/tree-dp/]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594392518,
      "updated": 1594392518
    },
    {
      "id": "5f06fa75aff09e0000d77e49",
      "text": "\t[†全方位木DP†について - ei1333の日記 https://ei1333.hateblo.jp/entry/2017/04/10/224413]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594292854,
      "updated": 1594293555
    },
    {
      "id": "5f06fd2faff09e0000fd5d54",
      "text": "\t[F - Distributing Integers https://atcoder.jp/contests/abc160/tasks/abc160_f]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1594293552,
      "updated": 1594293555
    },
    {
      "id": "5efd52a6aff09e00009c436e",
      "text": "\thttps://maspypy.com/atcoder-参加感想-2019-03-28abc-160",
      "userId": "582e63d27c56960011aff09e",
      "created": 1593660071,
      "updated": 1594293556
    },
    {
      "id": "5efd52a9aff09e00009c4370",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1593660073,
      "updated": 1593660073
    },
    {
      "id": "5efd52a9aff09e00009c4371",
      "text": "[動的計画法]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1593660073,
      "updated": 1593660076
    }
  ]
}