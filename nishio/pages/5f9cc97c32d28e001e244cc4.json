{
  "id": "5f9cc97c32d28e001e244cc4",
  "title": "ABC134E",
  "created": 1604110719,
  "updated": 1610265439,
  "lines": [
    {
      "id": "5f9cc981aff09e0000c0d79e",
      "text": "ABC134E",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604110721,
      "updated": 1610265439
    },
    {
      "id": "5ffab314aff09e000067b650",
      "text": "[E - Sequence Decomposing https://atcoder.jp/contests/abc134/tasks/abc134_e]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1610265364,
      "updated": 1610265365
    },
    {
      "id": "5ffab30baff09e000067b64e",
      "text": "[https://gyazo.com/3f50fa55b41f2b055b35ff78691f2614]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1610265355,
      "updated": 1610265358
    },
    {
      "id": "5ffab30daff09e000067b64f",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1610265358,
      "updated": 1610265358
    },
    {
      "id": "5f9cc9cdaff09e0000c0d7a1",
      "text": "　考えたこと",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604110797,
      "updated": 1604110847
    },
    {
      "id": "5f9cc9ffaff09e0000c0d7a3",
      "text": "　　同じ色のグループに着目すると単調増加列になっている",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604110847,
      "updated": 1604110867
    },
    {
      "id": "5f9cc9fcaff09e0000c0d7a2",
      "text": "　　先頭から見ていって単調増加なら同じ色で塗る、という貪欲法でOKなのかを考える",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604110847,
      "updated": 1604111034
    },
    {
      "id": "5f9ccb73aff09e0000c0d7a5",
      "text": "　　ある最良解である値xが単調増加なのに選択されてないとする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604111220,
      "updated": 1604111262
    },
    {
      "id": "5f9ccb9daff09e0000c0d7a6",
      "text": "　　　列がxの手前で終わってるか、xの先でxより大きい値yになってる時、コストを増やさずにxを追加できる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604111262,
      "updated": 1604111469
    },
    {
      "id": "5f9ccbeaaff09e0000c0d7a7",
      "text": "　　　そうでない時",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604111338,
      "updated": 1604111457
    },
    {
      "id": "5f9ccc61aff09e0000c0d7a8",
      "text": "　　　　yではなくxを選択することでyから開始する列が1つ増えるが、xから始まる列が1つ減るので損はしない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604111457,
      "updated": 1604111806
    },
    {
      "id": "5f9ccdbeaff09e0000c0d7a9",
      "text": "　　　　　ただしxがもっと手前から始まる別の列に入ってる場合は別",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604111806,
      "updated": 1604111829
    },
    {
      "id": "5f9ccddeaff09e0000c0d7aa",
      "text": "　　よって下記の貪欲法でOK",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604111838,
      "updated": 1604111859
    },
    {
      "id": "5f9ccdf2aff09e0000c0d7ab",
      "text": "　　 先頭から見ていく、既に存在するどの単調増加列にも入らないなら新しい単調増加列を追加する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604111859,
      "updated": 1604111921
    },
    {
      "id": "5f9ce7beaff09e0000c0d7c9",
      "text": "　　 追記: 入る場合の入れ方に関して考察漏れ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604118462,
      "updated": 1604118477
    },
    {
      "id": "5f9cce33aff09e0000c0d7ac",
      "text": "　公式解説",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604111924,
      "updated": 1604112670
    },
    {
      "id": "5f9cd11eaff09e0000c0d7b7",
      "text": "　　最長の広義単調減少列に一致する、としてO(Nlog N)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604112670,
      "updated": 1604112733
    },
    {
      "id": "5f9cd1a3aff09e0000c0d7b8",
      "text": "　　LIS([最長増加部分列])問題に帰着",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604112807,
      "updated": 1604112832
    },
    {
      "id": "5f9cea72aff09e0000ae91bb",
      "text": "　　[Dilworthの定理]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604119155,
      "updated": 1604119155
    },
    {
      "id": "5f9cca15aff09e0000c0d7a4",
      "text": "　自分実装",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604110869,
      "updated": 1604119231
    },
    {
      "id": "5f9ce56caff09e0000c0d7c1",
      "text": "　　既に存在する単調増加列の複数に入りうる時に自由に入れられるわけではないと気づいた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604117868,
      "updated": 1604119236
    },
    {
      "id": "5f9ce59baff09e0000c0d7c2",
      "text": "　　　2,1,4,5,3で、5は4の入った列に入れなければならない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604117915,
      "updated": 1604117946
    },
    {
      "id": "5f9ce5baaff09e0000c0d7c3",
      "text": "　　　つまりこれ、入れる数より小さくて最大の値を見つけなければならない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604117946,
      "updated": 1604117977
    },
    {
      "id": "5f9ce671aff09e0000c0d7c4",
      "text": "　　　線形探索すると最悪ケースでTLEしそう",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604118129,
      "updated": 1604118149
    },
    {
      "id": "5f9ce6d0aff09e0000c0d7c6",
      "text": "　　　対象が静的でないからソートして二分探索というわけにはいかない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604118224,
      "updated": 1604118240
    },
    {
      "id": "5f9ce685aff09e0000c0d7c5",
      "text": "　　　フェニック木で二分探索か…値の範囲が10^9だなぁ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604118149,
      "updated": 1604118254
    },
    {
      "id": "5f9ce714aff09e0000c0d7c7",
      "text": "　　　この方針でやるなら[座標圧縮]→[フェニック木]→[二分探索]という流れになるな",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604118292,
      "updated": 1604118326
    },
    {
      "id": "5f9cd34baff09e0000c0d7b9",
      "text": "　　　この前処理や、本処理で二分探索が必要になるところから計算量は公式解説と同じオーダーになる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604113231,
      "updated": 1604118423
    },
    {
      "id": "5f9ce770aff09e0000c0d7c8",
      "text": "　公式解説",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604118385,
      "updated": 1604118628
    },
    {
      "id": "5f9ce864aff09e0000c0d7cb",
      "text": "　　僕と逆に後ろから見ている",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604118629,
      "updated": 1604118638
    },
    {
      "id": "5f9ce918aff09e0000c0d7cc",
      "text": "　　　制約を満たす中で最小のものを選ぶのは僕の「入れる数より小さくて最大の値」を選ぶ方法の裏返し",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604118808,
      "updated": 1604118885
    },
    {
      "id": "5f9ce967aff09e0000c0d7cd",
      "text": "　　フェニック木を使う方法は[最長増加部分列]の解法の一つ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604118887,
      "updated": 1604119263
    },
    {
      "id": "5f9ceadfaff09e0000c0d7ce",
      "text": "　　なるほど、「xを超えない最大の値をxに更新」はソートされた状態を維持するのか",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604119263,
      "updated": 1604121822
    },
    {
      "id": "5f9cf60eaff09e0000c0d7cf",
      "text": "　　[更新され二分探索できる配列]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604122127,
      "updated": 1604122145
    },
    {
      "id": "5f9ce861aff09e0000c0d7ca",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604118626,
      "updated": 1604118626
    },
    {
      "id": "5f9cea4aaff09e0000ae91b6",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604119115,
      "updated": 1604119115
    },
    {
      "id": "5f9cea4aaff09e0000ae91b7",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604119115,
      "updated": 1604119153
    }
  ]
}