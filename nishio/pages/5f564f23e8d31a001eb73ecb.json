{
  "id": "5f564f23e8d31a001eb73ecb",
  "title": "AtCoder Library",
  "created": 1599491876,
  "updated": 1602262013,
  "lines": [
    {
      "id": "5f564f23e8d31a001eb73ecb",
      "text": "AtCoder Library",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599491876,
      "updated": 1599491876
    },
    {
      "id": "5f564f24aff09e0000bd4a9f",
      "text": ">様々なアルゴリズムを [AtCoder] 側で実装した",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599491876,
      "updated": 1599493215
    },
    {
      "id": "5f564f33aff09e0000bd4aa1",
      "text": "\thttps://atcoder.jp/posts/517",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599491891,
      "updated": 1599491908
    },
    {
      "id": "5f564f25aff09e0000bd4aa0",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599491877,
      "updated": 1599491877
    },
    {
      "id": "5f6cd12eaff09e0000fd1387",
      "text": "[AtCoder Library Practice Contest]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1600966959,
      "updated": 1600966973
    },
    {
      "id": "5f6cd13eaff09e0000fd1388",
      "text": " 練習用コンテストで一通りACした解説",
      "userId": "582e63d27c56960011aff09e",
      "created": 1600966974,
      "updated": 1600966990
    },
    {
      "id": "5f6cd13eaff09e0000fd1389",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1600966974,
      "updated": 1600966974
    },
    {
      "id": "5f565d4faff09e0000cb5417",
      "text": "とりあえず確認してみたら1/3から1/2くらい既に実装してあった。今はリポジトリにバラバラに散らばってるので後でACLと同じディレクトリ構造にしてMITライセンスにしとこう。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599495504,
      "updated": 1599495554
    },
    {
      "id": "5f565d64aff09e0000cb5419",
      "text": "残りの未実装なものは公式が「これは頻出アルゴリズムだ」と言ってるわけだからなるはやで実装する。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599495525,
      "updated": 1599495534
    },
    {
      "id": "5f565d4faff09e0000cb5418",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599495504,
      "updated": 1599495504
    },
    {
      "id": "5f5695cbaff09e00005fac3a",
      "text": ">AtCoder Library の Python 実装，普通にいろんなアルゴリズムを実装するとかはすでにいっぱいある（≒ yosupo judge や AOJ から取ってこればよい）はずだから，numpy/scipy/networkx とか cython とかでゴリゴリに高速化したものができてほしい [src https://twitter.com/n_knuu6/status/1303026130279047168]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599509963,
      "updated": 1599509998
    },
    {
      "id": "5f5695d6aff09e00005fac3c",
      "text": "\tPractice ContestのAll Submitの所要時間順ランキングがライブラリ速度を競い合う場になるのではないかと思ってる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599509975,
      "updated": 1599509986
    },
    {
      "id": "5f569620aff09e0000df2d55",
      "text": "\t僕は以前[Numba]や[Cython]での高速化にハマってたのだけど、最近は一周回ってPyPyで柔軟性を犠牲にせずに速くすることに興味がある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599510048,
      "updated": 1599516296
    },
    {
      "id": "5f5695cbaff09e00005fac3b",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599509963,
      "updated": 1599509963
    },
    {
      "id": "5f564f45aff09e0000bd4aa2",
      "text": "内容",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599491909,
      "updated": 1599492141
    },
    {
      "id": "5f56502daff09e0000cb5403",
      "text": "　[フェニック木]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492141,
      "updated": 1599492157
    },
    {
      "id": "5f565473aff09e0000cb540e",
      "text": "　　部分和の計算と要素の更新の両方を効率的に行える木構造(Binary Indexed Treeとも呼ばれる)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599493235,
      "updated": 1599493310
    },
    {
      "id": "5f5694f8aff09e00005fac36",
      "text": "　　[B: 600ms https://atcoder.jp/contests/practice2/submissions/16567562] PyPy暫定一位",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599509752,
      "updated": 1599510284
    },
    {
      "id": "5f56503eaff09e0000cb5404",
      "text": "　[セグメント木] [J - Segment Tree https://atcoder.jp/contests/practice2/tasks/practice2_j] [454 ms https://atcoder.jp/contests/practice2/submissions/16567936]PyPy暫定一位  [K - Range Affine Range Sum https://atcoder.jp/contests/practice2/tasks/practice2_k]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492158,
      "updated": 1599514163
    },
    {
      "id": "5f5654b4aff09e0000bd4abf",
      "text": "　\t固定個数の要素がランダムアクセスで更新される時に総和や最小値をO(logN)で求めることができる木",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599493300,
      "updated": 1599493322
    },
    {
      "id": "5f565047aff09e0000cb5405",
      "text": "　[遅延伝搬セグメント木] [L - Lazy Segment Tree https://atcoder.jp/contests/practice2/tasks/practice2_l]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492168,
      "updated": 1599510482
    },
    {
      "id": "5f565055aff09e0000cb5406",
      "text": "　文字列アルゴリズム詰め合わせ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492181,
      "updated": 1599492198
    },
    {
      "id": "5f565065aff09e0000cb5407",
      "text": "　　[接尾辞配列]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492198,
      "updated": 1599492207
    },
    {
      "id": "5f565070aff09e0000cb5409",
      "text": "　　[LCP array] [I - Number of Substrings https://atcoder.jp/contests/practice2/tasks/practice2_i]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492208,
      "updated": 1599510414
    },
    {
      "id": "5f569502aff09e00005fac37",
      "text": "　　\t[752ms https://atcoder.jp/contests/practice2/submissions/16567345] PyPy暫定一位",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599509762,
      "updated": 1599510288
    },
    {
      "id": "5f56507baff09e0000cb540a",
      "text": "　　z_algorithm",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492220,
      "updated": 1599492232
    },
    {
      "id": "5f56502caff09e0000cb5402",
      "text": "\t数学アルゴリズム詰め合わせ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492141,
      "updated": 1599492311
    },
    {
      "id": "5f5650c4aff09e0000cb540b",
      "text": "\t\tpow_mod",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492292,
      "updated": 1599493969
    },
    {
      "id": "5f565750aff09e0000cb5413",
      "text": "\t\tinv_mod",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599493969,
      "updated": 1599493969
    },
    {
      "id": "5f5656c6aff09e0000cb5412",
      "text": "\t\t　[Pythonでの累乗・逆数・階乗・階乗逆数・組み合わせ]で実装した",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599493830,
      "updated": 1599493874
    },
    {
      "id": "5f5650e1aff09e0000bd4aa6",
      "text": "\t\tcrt",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492321,
      "updated": 1599492334
    },
    {
      "id": "5f6cd0ffaff09e0000fd1385",
      "text": "\t\t　[中国剰余定理]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1600966911,
      "updated": 1600966928
    },
    {
      "id": "5f5650eeaff09e0000bd4aa7",
      "text": "\t\t[floor_sum]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492335,
      "updated": 1601131749
    },
    {
      "id": "5f5695b8aff09e00005fac39",
      "text": "\t\t\t[C - Floor Sum https://atcoder.jp/contests/practice2/tasks/practice2_c]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599509946,
      "updated": 1599509946
    },
    {
      "id": "5f5650f8aff09e0000bd4aa8",
      "text": "\t畳み込み [F - Convolution https://atcoder.jp/contests/practice2/tasks/practice2_f]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492344,
      "updated": 1599510359
    },
    {
      "id": "5f5654fcaff09e0000bd4ac0",
      "text": "\t\tPythonだと[np.convolve]とかに相当するやつ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599493373,
      "updated": 1599493491
    },
    {
      "id": "5f565581aff09e0000bd4ac1",
      "text": "\t\t[Two Snuke]ではint64に収まらなくて自前でやった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599493505,
      "updated": 1599493553
    },
    {
      "id": "5f565108aff09e0000bd4aa9",
      "text": "\tModint 自動でmodを取る構造体",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492360,
      "updated": 1599492401
    },
    {
      "id": "5f5655b2aff09e0000cb5410",
      "text": "\t　Pythonだと演算子のオーバーロードで実現したら見た目は綺麗だけど、これを使うシチュエーションは関数呼び出しのオーバーヘッドを払えない状況だと思う",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599493554,
      "updated": 1599493707
    },
    {
      "id": "5f5655fdaff09e0000cb5411",
      "text": "\t　[長整数が速い]を使った攻略が良さそう",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599493629,
      "updated": 1599493660
    },
    {
      "id": "5f5650d9aff09e0000bd4aa4",
      "text": "\tグラフ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492313,
      "updated": 1599492420
    },
    {
      "id": "5f565144aff09e0000bd4aab",
      "text": "\t\t[DSU]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492421,
      "updated": 1601131754
    },
    {
      "id": "5f565169aff09e0000bd4aac",
      "text": "\t  無向グラフに対して、辺の追加、頂点が連結かの判定、をならし O(α(n)) 時間で処理",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492457,
      "updated": 1599492489
    },
    {
      "id": "5f5651e8aff09e0000cb540d",
      "text": "\t  [UnionFind]ってこと？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492584,
      "updated": 1599492595
    },
    {
      "id": "5f569520aff09e00005fac38",
      "text": "\t  [A: 277ms https://atcoder.jp/contests/practice2/submissions/16567503] PyPy暫定一位",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599509793,
      "updated": 1599510296
    },
    {
      "id": "5f565186aff09e0000bd4ab1",
      "text": "\t\tMaxflow [最大流] [D - Maxflow https://atcoder.jp/contests/practice2/tasks/practice2_d]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492486,
      "updated": 1600277534
    },
    {
      "id": "5f56519aaff09e0000bd4ab2",
      "text": "\t\tMinCostFlow [最小費用流] [E - MinCostFlow https://atcoder.jp/contests/practice2/tasks/practice2_e]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492507,
      "updated": 1599510334
    },
    {
      "id": "5f5651d5aff09e0000cb540c",
      "text": "\t\t[SCC] [G - SCC https://atcoder.jp/contests/practice2/tasks/practice2_g]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492566,
      "updated": 1602262013
    },
    {
      "id": "5f565205aff09e0000bd4ab6",
      "text": "\t\t\t有向グラフを強連結成分分解",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492613,
      "updated": 1599492620
    },
    {
      "id": "5f56520caff09e0000bd4ab7",
      "text": "\t\t[2-SAT] [H - Two SAT https://atcoder.jp/contests/practice2/tasks/practice2_h]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492620,
      "updated": 1602262011
    },
    {
      "id": "5f565250aff09e0000bd4ab8",
      "text": "\t\t\t[$ \\bigvee (x_{i0} = v_{i0} \\wedge x_{i1} = v_{i1}) ]の形の論理式を充足する割当が存在するかを判定し、する場合にはその割当の一つを得る",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492689,
      "updated": 1599504315
    },
    {
      "id": "5f5651c1aff09e0000bd4ab4",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599492546,
      "updated": 1599492546
    },
    {
      "id": "5f567f9faff09e0000df2d53",
      "text": "ここで練習できる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599504288,
      "updated": 1599504293
    },
    {
      "id": "5f567fa5aff09e0000df2d54",
      "text": "　https://atcoder.jp/contests/practice2",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599504293,
      "updated": 1599504294
    },
    {
      "id": "5f565d41aff09e0000cb5414",
      "text": "Python関連記事",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599495490,
      "updated": 1599495499
    },
    {
      "id": "5f565d45aff09e0000cb5416",
      "text": " [AtCoder Library Practice Contest 参戦記 (Python) - Qiita https://qiita.com/c-yan/items/46845ba9deea43930544]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1599495493,
      "updated": 1600247463
    },
    {
      "id": "5f61d6a7aff09e00002cba2c",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1600247463,
      "updated": 1600247463
    }
  ]
}