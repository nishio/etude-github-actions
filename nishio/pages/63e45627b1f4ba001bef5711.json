{
  "id": "63e45627b1f4ba001bef5711",
  "title": "プログラミングの変化勉強会",
  "created": 1675908651,
  "updated": 1677229665,
  "lines": [
    {
      "id": "63e45627b1f4ba001bef5711",
      "text": "プログラミングの変化勉強会",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675908651,
      "updated": 1675908659
    },
    {
      "id": "63e45633aff09e0000db294f",
      "text": "2023-02-10",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675908659,
      "updated": 1675908665
    },
    {
      "id": "63e45667aff09e0000db2952",
      "text": "　先日、眼科健診の待ち時間で「[この10年のプログラミング言語の変化]」にツイートしたら予想以上に反響があった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675908712,
      "updated": 1675908751
    },
    {
      "id": "63e4568faff09e0000db2953",
      "text": "　　箇条書きでまとめた上記ページは1万PV以上見られている",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675908752,
      "updated": 1675915035
    },
    {
      "id": "63e456d4aff09e0000db2954",
      "text": "　これを[かんがえをまとめるデジタル文房具Kozaneba]でまとめた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675908821,
      "updated": 1675914775
    },
    {
      "id": "63e46e24aff09e0000275dd1",
      "text": "　 [Kozaneba:この10年のプログラミング言語の変化]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675914789,
      "updated": 1675914809
    },
    {
      "id": "63e46e17aff09e0000275dd0",
      "text": "　　(先週Kozanebaにつけた手軽に線を引く機能の動作テストを兼ねて)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675914775,
      "updated": 1675914787
    },
    {
      "id": "63e46f1caff09e0000275dd2",
      "text": "　今日はそれをざっくり解説してから重要なポイントについてコードを交えて解説する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675915037,
      "updated": 1675915063
    },
    {
      "id": "63e45731aff09e0000db2955",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675908914,
      "updated": 1675908914
    },
    {
      "id": "63e45731aff09e0000db2956",
      "text": "[** まずは全体像]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675908914,
      "updated": 1677217384
    },
    {
      "id": "63e45c29aff09e00001aad62",
      "text": "\t[https://gyazo.com/69c8676477b96050ae696d51b7206796]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675910185,
      "updated": 1675910202
    },
    {
      "id": "63e45c69aff09e00002b8acd",
      "text": "\t　これが本当の全体像",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675910249,
      "updated": 1675910255
    },
    {
      "id": "63e45c3aaff09e00001aad63",
      "text": "\t[https://gyazo.com/b4784d52c52797355c8566cf07125941]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675910202,
      "updated": 1675910221
    },
    {
      "id": "63e45c4daff09e00001aad64",
      "text": "　　少しズーム",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675910221,
      "updated": 1675910260
    },
    {
      "id": "63e45c74aff09e00002b8ace",
      "text": "　　当初「この10年の間にあったプログラミング言語の仕様変更で大きなものってなんですかねー」という問いでスタートした",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675910261,
      "updated": 1675910388
    },
    {
      "id": "63e45cf4aff09e00002b8acf",
      "text": "　　が、集まった意見を見るとどうも「プログラミング言語の仕様」という枠組みに収まらないものがある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675910388,
      "updated": 1677217324
    },
    {
      "id": "63e45d16aff09e00002b8ad0",
      "text": "　　　一番大きなもの: ブラウザ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675910422,
      "updated": 1675910443
    },
    {
      "id": "63e45d2caff09e00002b8ad2",
      "text": "　　　他には機械学習やコンテナ技術がこの10年でプログラミングというアクティビティに大きな影響を与えた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675910444,
      "updated": 1677217365
    },
    {
      "id": "63e45639aff09e0000db2950",
      "text": "　　プログラミング言語の仕様の話に入る前にまずこれをざっと見る",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675908665,
      "updated": 1677217370
    },
    {
      "id": "63e45d58aff09e00002b8ad4",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675910488,
      "updated": 1675910488
    },
    {
      "id": "63e45d58aff09e00002b8ad5",
      "text": "[** ブラウザ]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675910488,
      "updated": 1677217387
    },
    {
      "id": "63e45d5caff09e00002b8ad6",
      "text": "　[https://gyazo.com/93b2e5ee8df55544778ed45a0f64b700]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675910492,
      "updated": 1675910567
    },
    {
      "id": "63e45da6aff09e00001aad65",
      "text": "　10年前の2013年にiPhone5Sが出た",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675910567,
      "updated": 1675910614
    },
    {
      "id": "63e45ddbaff09e00002b8ad7",
      "text": "　　その後10年でスマートフォンが普及した",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675910620,
      "updated": 1675910633
    },
    {
      "id": "63e45decaff09e00002b8ad8",
      "text": "　　スマートフォンアプリを作る仕事が増えた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675910636,
      "updated": 1677217435
    },
    {
      "id": "63f84e9aaff09e00000a204b",
      "text": "　　一方でiOS向けとAndroid向けを個別に作るのは高コスト",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677217435,
      "updated": 1677217435
    },
    {
      "id": "63e45e17aff09e00002b8ad9",
      "text": "　　WebView(ブラウザコンポーネント)でやろうという動きが生まれる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675910679,
      "updated": 1677217453
    },
    {
      "id": "63e45e44aff09e00002b8ada",
      "text": "　時を同じくしてデスクトップ環境にも似たことが起こっていた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675910725,
      "updated": 1675910754
    },
    {
      "id": "63e45e63aff09e00002b8adb",
      "text": "　　2013年、Electron登場",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675910756,
      "updated": 1675910771
    },
    {
      "id": "63e45e73aff09e00002b8adc",
      "text": "　　GUIアプリケーションを、Windows、Mac、Linuxと作り分けるのは高コスト",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675910771,
      "updated": 1677217480
    },
    {
      "id": "63f84ec7aff09e00000a204c",
      "text": "　　ChromiumレンダリングエンジンとNode.jsで実現しようという動きが生まれる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677217480,
      "updated": 1677217505
    },
    {
      "id": "63e45efcaff09e00002b8add",
      "text": "　　これが現実的な選択肢であることがElectronベースで作られているMicrosoftのIDE「Visual Studio Code」(2015)で如実に示された",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675910908,
      "updated": 1675911005
    },
    {
      "id": "63f84f04aff09e00000a204e",
      "text": "　　IDEのような複雑なものがまともなパフォーマンスで動く、ならばこれでいいじゃないか、となった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677217540,
      "updated": 1677217564
    },
    {
      "id": "63e45d47aff09e00002b8ad3",
      "text": "　この10年で起こったこと",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675910472,
      "updated": 1677217585
    },
    {
      "id": "63f84f30aff09e00000a204f",
      "text": "　　ブラウザの技術的進歩",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677217585,
      "updated": 1677217587
    },
    {
      "id": "63f84f33aff09e00000a2050",
      "text": "　　これが「Webサービスの提供」という狭い範囲ではなく",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677217587,
      "updated": 1677217590
    },
    {
      "id": "63f84f36aff09e00000a2051",
      "text": "　　「GUIの提供」という広い範囲に影響を与えた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677217590,
      "updated": 1677217590
    },
    {
      "id": "63f850feaff09e0000c6ec49",
      "text": "　Q&A",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677218047,
      "updated": 1677218048
    },
    {
      "id": "63e46068aff09e00002b8adf",
      "text": " 　[human.icon]相対的にOSの重要性が下がった？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675911273,
      "updated": 1677218050
    },
    {
      "id": "63f84f6daff09e00000a2052",
      "text": " 　[nishio.icon]「オペレーションをするシステム」としてのOSの「オペレーション」をブラウザがだいぶ奪っていった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677217645,
      "updated": 1677218064
    },
    {
      "id": "63f84f9daff09e00000a2053",
      "text": " 　\t最近、InstaChordって電子楽器を買ったんですけど、これのファームアップデートの時にもうネイティブアプリなんかいらなくて、ブラウザからUSB接続した周辺機器と直接シリアル通信するの",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677217693,
      "updated": 1677218050
    },
    {
      "id": "63f85036aff09e0000c6ec47",
      "text": " 　\t>Web Serial API は、ウェブサイトがシリアルデバイスからデータを受信したり、シリアルデバイスにデータを送信したりする方法を提供します。対象は、シリアルポートで接続されたデバイスのことも、シリアルポートとして振る舞う USB や Bluetooth のデバイスのこともあります。[MDN https://developer.mozilla.org/ja/docs/Web/API/Web_Serial_API]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677217846,
      "updated": 1677218050
    },
    {
      "id": "63f8506caff09e00000a2054",
      "text": " 　\t10年前なら「Windowsでこのexeファイルを実行してください」とか言われてたようなことがもうOSと無関係にできちゃう時代",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677217900,
      "updated": 1677218050
    },
    {
      "id": "63f8503caff09e0000c6ec48",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677217852,
      "updated": 1677217864
    },
    {
      "id": "63e460aaaff09e00002b8ae0",
      "text": "視線を戻す",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675911338,
      "updated": 1675911384
    },
    {
      "id": "63e460b7aff09e00002b8ae1",
      "text": "\t[https://gyazo.com/2b3acb8b22ae82979a0687e63a677081]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675911351,
      "updated": 1675911368
    },
    {
      "id": "63e460c8aff09e00001aad66",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675911368,
      "updated": 1675911368
    },
    {
      "id": "63e45f8aaff09e00002b8ade",
      "text": "\t　大きなトピック3つある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675911050,
      "updated": 1677217614
    },
    {
      "id": "63e46598aff09e00002b8ae8",
      "text": "\t　　やっばり型が欲しい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675912600,
      "updated": 1675912610
    },
    {
      "id": "63e465a2aff09e00002b8ae9",
      "text": "\t　　async/await",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675912611,
      "updated": 1675912626
    },
    {
      "id": "63e465b9aff09e00002b8aea",
      "text": "\t　　破壊的更新を避ける",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675912633,
      "updated": 1675912652
    },
    {
      "id": "63e465daaff09e00002b8aeb",
      "text": "\t　破壊的更新を避けるプログラミングスタイルに関してはさらに様々な要素が絡んでいる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675912667,
      "updated": 1677217622
    },
    {
      "id": "63e4667baff09e00002b8aec",
      "text": "\t　　この講義資料を作ってる段階ではまだ整理し切れてないが、ざっくり見ていこう",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675912828,
      "updated": 1675912877
    },
    {
      "id": "63e4705daff09e0000275dd3",
      "text": "\t　　(注: 図では「脱オブジェクト指向」が大きく表示されているが、これは「オブジェクト指向」という言葉でイメージするものが人によってマチマチな曖昧なフレーズなので避けることにした)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675915358,
      "updated": 1675915642
    },
    {
      "id": "63e470b6aff09e0000275dd4",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675915447,
      "updated": 1675915447
    },
    {
      "id": "63e470b6aff09e0000275dd5",
      "text": "GUI開発と破壊的更新を避ける動き",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675915447,
      "updated": 1675915476
    },
    {
      "id": "63f8516aaff09e00000a2055",
      "text": "　破壊的更新を避けるプログラミングスタイルの話はGUIの話と結構関連している",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677218155,
      "updated": 1677218177
    },
    {
      "id": "63e46554aff09e00002b8ae7",
      "text": "\t[https://gyazo.com/770ae9733b7c4e687a5bdd3a71a8d588]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675912532,
      "updated": 1675912532
    },
    {
      "id": "63e46121aff09e00001aad67",
      "text": "　かつてGUIはオブジェクト指向の重要な応用領域だった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675911458,
      "updated": 1675911555
    },
    {
      "id": "63e46184aff09e00002b8ae4",
      "text": "　　個別のボタンは、ボタンクラスのインスタンス、個別のラベルは、ラベルクラスのインスタンス、…",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675911557,
      "updated": 1675911585
    },
    {
      "id": "63f85190aff09e00000a2056",
      "text": "　　GUIはオブジェクト指向のメリットを素直に理解しやすい応用ドメインだった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677218192,
      "updated": 1677218217
    },
    {
      "id": "63e4621baff09e00002b8ae6",
      "text": "　　しかし10年前の時点でその使い方には変化の兆しがあった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675911707,
      "updated": 1677218234
    },
    {
      "id": "63e46283aff09e00001aad68",
      "text": " 　　>Java 周辺には「実装の再利用を目的とした継承」を避ける方 向への動きが見られます。たとえばグラフィックツールキットの実装がそ うです。1995年にリリースされたAbstract Window Toolkit(AWT)では「継承して各種メソッドをオーバーライドして使う」ルールでした。しかし、今 Eclipseなどで使われているStandard Widget Toolkit(SWT)は「継承してはいけない」というルールです。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675911812,
      "updated": 1675997000
    },
    {
      "id": "63e4628daff09e00001aad69",
      "text": "   > 代わりに発達したのが「委譲」の概念です",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675911822,
      "updated": 1675915320
    },
    {
      "id": "63e461c7aff09e00002b8ae5",
      "text": " 　　\t([コーディングを支える技術] p.222)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675911624,
      "updated": 1675915320
    },
    {
      "id": "63e5af5faff09e000047fad7",
      "text": " 　　\t(余談: 文章に「今」と書いたのは失敗だったな、2023年の今の読者はEclipseがわからないかも…)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675997023,
      "updated": 1677218280
    },
    {
      "id": "63e46140aff09e00002b8ae3",
      "text": "　　2019年、React「Hooks API」",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675911489,
      "updated": 1677218449
    },
    {
      "id": "63e47485aff09e0000275dd7",
      "text": "　　　プログラマが状態のあるGUIコンポーネントを定義する際に、クラスを使わない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675916422,
      "updated": 1677218342
    },
    {
      "id": "63f85225aff09e00000a2057",
      "text": "　　　代わりに状態を持たない関数を使う",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677218342,
      "updated": 1677218349
    },
    {
      "id": "63f85293aff09e00000a205a",
      "text": "　　　この関数コンポーネントが、クラスコンポーネントと同等のことができるようにする仕組みがHooks API",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677218451,
      "updated": 1677218475
    },
    {
      "id": "63f85236aff09e00000a2059",
      "text": "　　　関数コンポーネントの方を標準的な使い方とみなしていく",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677218358,
      "updated": 1677218399
    },
    {
      "id": "63e47b3baff09e0000275de4",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675918140,
      "updated": 1675918140
    },
    {
      "id": "63e47b3baff09e0000275de5",
      "text": "Hooks APIと関数コンポーネント",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675918140,
      "updated": 1675918437
    },
    {
      "id": "63e47cbbaff09e000020a789",
      "text": "\t状態のあるGUIコンポーネント",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675918524,
      "updated": 1675918524
    },
    {
      "id": "63e47637aff09e0000275ddc",
      "text": "\t　「例えばクリックするとオンオフが切り替わるスイッチ」を考えてみよう",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675916856,
      "updated": 1675918528
    },
    {
      "id": "63e47cbfaff09e000020a78a",
      "text": "\t　これは「オンオフ」が状態",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675918528,
      "updated": 1675918528
    },
    {
      "id": "63e47412aff09e0000275dd6",
      "text": "　クラスでコンポーネントを定義する場合、素朴に考えるとコンポーネントの状態はメンバ変数として持つことになる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675916306,
      "updated": 1675918462
    },
    {
      "id": "63e475c8aff09e0000275ddb",
      "text": "　関数コンポーネントでは、状態をReact側が持つ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675916744,
      "updated": 1675918462
    },
    {
      "id": "63e476b2aff09e0000275ddd",
      "text": "　　Hooks APIと呼ばれる仕組みによって、状態の現在の値とsetterを取得する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675916978,
      "updated": 1675918882
    },
    {
      "id": "63e47595aff09e0000275dda",
      "text": "\t\t[https://gyazo.com/a16e89398f997015f385a40f8fed22ef]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675916694,
      "updated": 1675918462
    },
    {
      "id": "63e47e24aff09e0000275de6",
      "text": "\t\t状態を更新する時にはそのsetterを呼ぶ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675918885,
      "updated": 1675918895
    },
    {
      "id": "63f852eeaff09e00000a205b",
      "text": "\t\t状態の変更をReactに任せることで、コンポーネントの側が状態を持たなくなった、なので関数で良くなった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677218543,
      "updated": 1677218573
    },
    {
      "id": "63e477d0aff09e00000648a3",
      "text": "　これの何が嬉しいのか",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675917265,
      "updated": 1675918462
    },
    {
      "id": "63e478d6aff09e0000275de0",
      "text": "　　Reactの側が「状態が更新されたこと」を知ることができる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675917526,
      "updated": 1675918462
    },
    {
      "id": "63f85324aff09e00000a205c",
      "text": "　　　クラスがメンバ変数を書き換える実装スタイルだとフレームワークが変化を察知しにくい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677218597,
      "updated": 1677218675
    },
    {
      "id": "63f8533eaff09e00000a205d",
      "text": "　　　特に過去のオブジェクト指向の考え方だと「メンバーをprivateにして外から見えないようにしよう」となりがち",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677218622,
      "updated": 1677218657
    },
    {
      "id": "63e47e41aff09e0000275de7",
      "text": "　　Reactは「その状態を参照するコンポーネント」も知っている",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675918914,
      "updated": 1675918935
    },
    {
      "id": "63f853a4aff09e00000a205f",
      "text": "　　 その状態をReadしてきたコンポーネントだけがその状態に依存した振る舞いをする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677218725,
      "updated": 1677218759
    },
    {
      "id": "63e47e61aff09e0000275de8",
      "text": "　　　再描画が必要なのはこのコンポーネントだけ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675918945,
      "updated": 1675918971
    },
    {
      "id": "63e478b1aff09e0000275ddf",
      "text": "　　\t[https://gyazo.com/34daca8ccd87549b9ce7fa42076fabbd]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675917489,
      "updated": 1675918995
    },
    {
      "id": "63e478ccaff09e00000648a5",
      "text": "　　　対象の関数コンポーネントをReactが呼び出し、その結果を使って再描画をする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675917517,
      "updated": 1677218806
    },
    {
      "id": "63f8540baff09e00000a2061",
      "text": "　　　Q: 状態を管理する責任を負わず、状態遷移の方法だけ記述する？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677218827,
      "updated": 1677218942
    },
    {
      "id": "63f8544daff09e00000a2062",
      "text": "　　　A: まあそうですね。状態管理をあちこちのオブジェクトが各自でやってるとカオスなわけです。なのでReactの一箇所にまとめる的な話",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677218893,
      "updated": 1677219003
    },
    {
      "id": "63f853dfaff09e00000a2060",
      "text": "　　関数コンポーネントはHooks APIによって最新の状態を得てレンダリング結果(仮想DOM)を返す、状態を持たない関数として設計できるようになる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677218784,
      "updated": 1677219023
    },
    {
      "id": "63f854d5aff09e00000a2063",
      "text": "　　　プログラマがちゃんと書けば副作用を持たない関数になる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677219030,
      "updated": 1677219092
    },
    {
      "id": "63e47a35aff09e0000275de2",
      "text": "　　　つまり状態の更新回数と同じ回数呼ぶ必要がない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675917877,
      "updated": 1675918462
    },
    {
      "id": "63e47ab0aff09e0000275de3",
      "text": "　　　状態の更新と同期的である必要もない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675918000,
      "updated": 1675918553
    },
    {
      "id": "63e47cd8aff09e000020a78b",
      "text": "　　　例えばボタンを押すと101回オンオフが切り替わるコードを書いたとしても、レンダリングは1回だけ実行される、などということが可能になる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675918553,
      "updated": 1675918705
    },
    {
      "id": "63f85520aff09e00000a2064",
      "text": "　　　これがパフォーマンスに対して重要、これができるようにするためにみんな関数コンポーネントを使おうね、そうするともっと速くなるよ、という流れ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677219104,
      "updated": 1677219170
    },
    {
      "id": "63e47cd8aff09e000020a78c",
      "text": "　[human.icon]Q: Webアプリは状態を持たずに、状態はデータベースにある的な作り方も一般的ですね",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675918553,
      "updated": 1677220343
    },
    {
      "id": "63f85647aff09e00000a2065",
      "text": " 　[nishio.icon]A: うーん、それは「状態」という言葉で指してるものが違うような。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677219399,
      "updated": 1677221943
    },
    {
      "id": "63f8565daff09e00000a2066",
      "text": " 　　状態にも「永続化する状態」と「しない状態」がある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677219422,
      "updated": 1677221943
    },
    {
      "id": "63f8566baff09e00000a2067",
      "text": " 　　GUIにおける「状態」はどのテキストボックスにフォーカスが当たってるかとかも含んでいる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677219435,
      "updated": 1677221943
    },
    {
      "id": "63f856c0aff09e00000a2068",
      "text": " 　　ブラウザ上のすべての状態をデータベースに送るのは現実的ではない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677219520,
      "updated": 1677221943
    },
    {
      "id": "63f85733aff09e00000a2069",
      "text": " 　　ブラウザ上にしかない状態も存在しているはず",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677219636,
      "updated": 1677221943
    },
    {
      "id": "63f85753aff09e00000a206a",
      "text": " 　[human.icon]Reactのモデルでも関数コンポーネントの中にローカル変数があって細かい状態はそこで持っていると言える",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677219668,
      "updated": 1677221943
    },
    {
      "id": "63f85770aff09e00000a206b",
      "text": " 　[nishio.icon]関数のローカル変数は関数を抜けるとアクセスできなくなるわけなので、それを状態とはあまり考えないのでは",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677219697,
      "updated": 1677221943
    },
    {
      "id": "63f857caaff09e00000a206c",
      "text": " 　　Reactの状態の一部に関して更新をウォッチして、更新があったらデータベースに書き込みにいくという画面に表示されないコンポーネントがあってもいい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677219787,
      "updated": 1677221943
    },
    {
      "id": "63f85849aff09e00000a206d",
      "text": " 　　状態が更新されたときに、そのどれをデータベースに保存してどれを保存しないかはプログラマーのチョイス",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677219913,
      "updated": 1677221943
    },
    {
      "id": "63f85adfaff09e00000a2078",
      "text": " 　　Reactにすべての状態が集まっているから、その中の「永続化したい状態」が更新されたときに、それをデータベースに書き込みにいくって設計は、コンポーネントがバラバラに状態を持っているよりも実装しやすくなるだろう",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677220576,
      "updated": 1677221943
    },
    {
      "id": "63f8588baff09e00000a206e",
      "text": " 　具体例を追加",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677219980,
      "updated": 1677221982
    },
    {
      "id": "63f85a73aff09e0000c6ec4a",
      "text": " 　　Kozanebaではドラッグドロップでの要素の移動は、ドロップのタイミングで全部データベースに保存している",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677220467,
      "updated": 1677221943
    },
    {
      "id": "63f8588eaff09e00000a206f",
      "text": " 　　Kozanebaでは要素をクリックするとコンテキストメニューが開く",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677219982,
      "updated": 1677221943
    },
    {
      "id": "63f85a2faff09e00000a2076",
      "text": " 　　この「どのメニューがどこに開いているか」もReactが管理してGUIのレンダリングに影響する「状態」",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677220424,
      "updated": 1677221943
    },
    {
      "id": "63f85a30aff09e00000a2077",
      "text": " 　　保存すれば、データベースの書き込みコストと引き換えに、次回の起動時に復元できる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677220424,
      "updated": 1677221943
    },
    {
      "id": "63f85937aff09e00000a2072",
      "text": " 　　これをデータベースに保存すべきだとは思わない。コストに見合うメリットがないから",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677220424,
      "updated": 1677221943
    },
    {
      "id": "63f8596faff09e00000a2074",
      "text": "　[human.icon]Q2: 状態を持たない方が好ましいのは再利用のためではなく応用が広がるからか？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677220207,
      "updated": 1677221938
    },
    {
      "id": "63f85b57aff09e00000a2079",
      "text": "　　[nishio.icon]A: 疎結合にしたい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677220695,
      "updated": 1677221947
    },
    {
      "id": "63f85b73aff09e00000a207a",
      "text": "　　　状態が変われば再描画は必要",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677220724,
      "updated": 1677220753
    },
    {
      "id": "63f85b91aff09e00000a207b",
      "text": "　　　しかしそこが同期的呼び出しでは密結合すぎる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677220753,
      "updated": 1677220753
    },
    {
      "id": "63f85b9baff09e00000a207c",
      "text": "　　　実際のところその密結合が必要か？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677220763,
      "updated": 1677220779
    },
    {
      "id": "63f85baaaff09e00000a207d",
      "text": "　　　人間の目の時間解像度が低いからブラウザ上での表示の更新ディレイが多少あっても問題ない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677220779,
      "updated": 1677220901
    },
    {
      "id": "63f85c14aff09e00000a207e",
      "text": "　　　非同期にすることで必要なくなる更新もある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677220884,
      "updated": 1677220987
    },
    {
      "id": "63f85c7baff09e00000a207f",
      "text": "　　　だから「状態の書き換え」と「状態の書き換えにトリガーされた再描画」を切り離したかった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677220987,
      "updated": 1677221009
    },
    {
      "id": "63f85c97aff09e00000a2080",
      "text": "　　　これがHooks APIを入れていく最大のモチベーションだったのではないかと僕は思う",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677221016,
      "updated": 1677221035
    },
    {
      "id": "63f85cafaff09e00000a2082",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677221039,
      "updated": 1677221039
    },
    {
      "id": "63e478a8aff09e0000275dde",
      "text": "リアクティブプログラミング系の流れ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675917481,
      "updated": 1675923072
    },
    {
      "id": "63e4942aaff09e000020a7d2",
      "text": "\t[https://gyazo.com/fa53b2b0babf79eda645d5b80af0f684]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675924523,
      "updated": 1675924526
    },
    {
      "id": "63e48438aff09e0000275de9",
      "text": "　\t名前がまちまち、概念にも揺れがある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675920440,
      "updated": 1675924522
    },
    {
      "id": "63e48e9baff09e000020a78d",
      "text": "\t　説明できるほど詳しくないことに気づいたので今回は事実をざっと眺めるだけにする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923099,
      "updated": 1677221071
    },
    {
      "id": "63e48e9baff09e000020a78e",
      "text": "\t2007 C# LINQ(Language INtegrated Query)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923099,
      "updated": 1675923203
    },
    {
      "id": "63e48f91aff09e000020a794",
      "text": "\t\tcode:c#",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923346,
      "updated": 1675923350
    },
    {
      "id": "63e48f95aff09e000020a795",
      "text": "\t\t // Specify the data source.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923350,
      "updated": 1675923351
    },
    {
      "id": "63e48f97aff09e000020a796",
      "text": "   int[] scores = { 97, 92, 81, 60 };",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923351,
      "updated": 1675923351
    },
    {
      "id": "63e48f97aff09e000020a797",
      "text": "   ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923351,
      "updated": 1675923351
    },
    {
      "id": "63e48f97aff09e000020a798",
      "text": "   // Define the query expression.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923351,
      "updated": 1675923351
    },
    {
      "id": "63e48f97aff09e000020a799",
      "text": "   IEnumerable<int> scoreQuery =",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923351,
      "updated": 1675923351
    },
    {
      "id": "63e48f97aff09e000020a79a",
      "text": "       from score in scores",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923351,
      "updated": 1675923351
    },
    {
      "id": "63e48f97aff09e000020a79b",
      "text": "       where score > 80",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923351,
      "updated": 1675923351
    },
    {
      "id": "63e48f97aff09e000020a79c",
      "text": "       select score;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923351,
      "updated": 1675923351
    },
    {
      "id": "63e48f97aff09e000020a79d",
      "text": "   ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923351,
      "updated": 1675923351
    },
    {
      "id": "63e48f97aff09e000020a79e",
      "text": "   // Execute the query.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923351,
      "updated": 1675923351
    },
    {
      "id": "63e48f97aff09e000020a79f",
      "text": "   foreach (int i in scoreQuery)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923351,
      "updated": 1675923351
    },
    {
      "id": "63e48f97aff09e000020a7a0",
      "text": "   {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923351,
      "updated": 1675923351
    },
    {
      "id": "63e48f97aff09e000020a7a1",
      "text": "       Console.Write(i + \" \");",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923351,
      "updated": 1675923351
    },
    {
      "id": "63e48f97aff09e000020a7a2",
      "text": "   }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923351,
      "updated": 1675923351
    },
    {
      "id": "63e48f97aff09e000020a7a3",
      "text": "   ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923351,
      "updated": 1675923351
    },
    {
      "id": "63e48f97aff09e000020a7a4",
      "text": "   // Output: 97 92 81",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923351,
      "updated": 1675923351
    },
    {
      "id": "63e48f9eaff09e000020a7a5",
      "text": "  [https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/ Language-Integrated Query (LINQ) (C#) | Microsoft Learn]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923358,
      "updated": 1675923361
    },
    {
      "id": "63f85cdbaff09e00000a2083",
      "text": "  配列などのコレクションに対してもSQLのようにクエリランゲージを書ける",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677221083,
      "updated": 1677221142
    },
    {
      "id": "63e48ed1aff09e000020a791",
      "text": "\t2009~2011 C# Rx(ReactiveExtensions)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923154,
      "updated": 1675923328
    },
    {
      "id": "63e491f3aff09e0000275df9",
      "text": "\t　LINQの考え方が非同期処理に応用される",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923959,
      "updated": 1675923982
    },
    {
      "id": "63f85d29aff09e00000a2084",
      "text": "\t　データベースと配列が「似たもの」として統一的に扱われるようになった流れの延長で、ストリームの概念を使って非同期処理を記述するようになった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677221161,
      "updated": 1677221239
    },
    {
      "id": "63e49634aff09e000020a7d4",
      "text": "\t　[https://learn.microsoft.com/ja-jp/archive/msdn-magazine/2016/june/reactive-framework-scale-asynchronous-client-server-links-with-reactive Reactive Framework - Reactive Extensions による非同期クライアント/サーバー リンクのスケール変換 | Microsoft Learn]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675925045,
      "updated": 1675925048
    },
    {
      "id": "63e48f05aff09e000020a793",
      "text": "\t2014 Java Stream API",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923206,
      "updated": 1675923384
    },
    {
      "id": "63e48fa5aff09e000020a7a7",
      "text": "\t\tcode:java",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923366,
      "updated": 1675923394
    },
    {
      "id": "63e48fbfaff09e000020a7a9",
      "text": "\t\t\t int sum = widgets.stream()",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923391,
      "updated": 1675923395
    },
    {
      "id": "63e48fc3aff09e000020a7aa",
      "text": "              .filter(w -> w.getColor() == RED)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923395,
      "updated": 1675923502
    },
    {
      "id": "63e48fc3aff09e000020a7ab",
      "text": "              .mapToInt(w -> w.getWeight())",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923395,
      "updated": 1675923504
    },
    {
      "id": "63e48fc3aff09e000020a7ac",
      "text": "              .sum();",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923395,
      "updated": 1675923506
    },
    {
      "id": "63e48fc4aff09e000020a7ad",
      "text": "  [https://docs.oracle.com/javase/jp/8/docs/api/java/util/stream/Stream.html Stream (Java Platform SE 8)]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923397,
      "updated": 1675923407
    },
    {
      "id": "63f85d92aff09e00000a2085",
      "text": "  もちろん、各メソッドの呼び出しで大きな一時オブジェクトが作られたりはしない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677221266,
      "updated": 1677221288
    },
    {
      "id": "63e48fcfaff09e000020a7ae",
      "text": " 2020 Java / C#: Record型",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923407,
      "updated": 1675923613
    },
    {
      "id": "63e49193aff09e000020a7cf",
      "text": " \t[https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/record Records - C# reference | Microsoft Learn]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923859,
      "updated": 1675923859
    },
    {
      "id": "63e4904eaff09e000020a7af",
      "text": "  \tcode:c#",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923534,
      "updated": 1675923861
    },
    {
      "id": "63e49106aff09e000020a7b0",
      "text": "  \t public record Person(string FirstName, string LastName);",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923719,
      "updated": 1675923861
    },
    {
      "id": "63e49196aff09e000020a7d0",
      "text": "\t\t[https://docs.oracle.com/javase/jp/15/language/records.html レコード・クラス]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923863,
      "updated": 1675923870
    },
    {
      "id": "63e4919eaff09e000020a7d1",
      "text": " \t\tcode:java",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923870,
      "updated": 1675923873
    },
    {
      "id": "63e4910baff09e000020a7b2",
      "text": " \t\t record Rectangle(double length, double width) { }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923724,
      "updated": 1675923873
    },
    {
      "id": "63e49109aff09e000020a7b1",
      "text": " \t\t>レコード・クラスは一連のフィールドを宣言し、適切なアクセッサ、コンストラクタ、equals、hashCodeおよびtoStringメソッドが自動的に作成されます。このクラスは単純な「[* データキャリア]」として機能することを意図しているため、フィールドはfinalです。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923722,
      "updated": 1675924410
    },
    {
      "id": "63e49145aff09e000020a7b5",
      "text": " \t\t>この簡潔な宣言は、次の標準クラスと同等です:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923781,
      "updated": 1675923875
    },
    {
      "id": "63e4917caff09e000020a7b7",
      "text": " \t\tcode:java",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923836,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7b8",
      "text": " \t\t public final class Rectangle {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7b9",
      "text": "        private final double length;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7ba",
      "text": "        private final double width;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7bb",
      "text": "    ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7bc",
      "text": "        public Rectangle(double length, double width) {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7bd",
      "text": "            this.length = length;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7be",
      "text": "            this.width = width;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7bf",
      "text": "        }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7c0",
      "text": "    ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7c1",
      "text": "        double length() { return this.length; }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7c2",
      "text": "        double width()  { return this.width; }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7c3",
      "text": "    ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7c4",
      "text": "        // Implementation of equals() and hashCode(), which specify",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7c5",
      "text": "        // that two record objects are equal if they",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7c6",
      "text": "        // are of the same type and contain equal field values.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7c7",
      "text": "        public boolean equals...",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7c8",
      "text": "        public int hashCode...",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7c9",
      "text": "    ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7ca",
      "text": "        // An implementation of toString() that returns a string",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7cb",
      "text": "        // representation of all the record class's fields,",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7cc",
      "text": "        // including their names.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7cd",
      "text": "        public String toString() {...}",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63e4918aaff09e000020a7ce",
      "text": "    }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923851,
      "updated": 1675923876
    },
    {
      "id": "63f87a3baff09e00001322be",
      "text": "  Q: すごく単純なstruct？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677228604,
      "updated": 1677228616
    },
    {
      "id": "63f87a48aff09e00001322bf",
      "text": "  A: 破壊的更新が禁止されてるところがstructとの大きな違い",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677228616,
      "updated": 1677228640
    },
    {
      "id": "63f87a6baff09e00001322c0",
      "text": "  Q: 先に代入することができない？単純にデータをトランスファーするオブジェクト？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677228651,
      "updated": 1677228683
    },
    {
      "id": "63f87a75aff09e00001322c1",
      "text": "  A: そう。そういうオブジェクトを作る手段が今まではたくさんコードを書かないと実現できなかった。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677228661,
      "updated": 1677228750
    },
    {
      "id": "63f87acdaff09e00001322c2",
      "text": "  　2009年とかの発展の過程で「ここを伝わるオブジェクトが破壊可能なのはおかしいよね」「破壊不可能なオブジェクトが手軽にかける手段が必要だよね」ということでJavaとC#が変わった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677228750,
      "updated": 1677228785
    },
    {
      "id": "63f87b74aff09e00001322c3",
      "text": "　　Q2: const dataってことですか",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677228916,
      "updated": 1677229282
    },
    {
      "id": "63f87c7faff09e00001322c4",
      "text": "　　　A2: そう言っていいと思います",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677229279,
      "updated": 1677229284
    },
    {
      "id": "63f87ce6aff09e0000c6ec4d",
      "text": "　Q3: ミューテックスだけは可変に持ちたいという欲が出てくると思う",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677229286,
      "updated": 1677229330
    },
    {
      "id": "63f87d18aff09e00001322c5",
      "text": "　　A: ミューテックス周りのことは追いかけてないですね、わかりません",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677229337,
      "updated": 1677229665
    },
    {
      "id": "63f87ce6aff09e0000c6ec4e",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677229286,
      "updated": 1677229286
    },
    {
      "id": "63e4917baff09e000020a7b6",
      "text": "　先ほどのReactで関数コンポーネントが仮想DOMを返していたのも同じ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677229279,
      "updated": 1677229279
    },
    {
      "id": "63e5b027aff09e000047fad9",
      "text": "　　ブラウザの生のDOMを人間が破壊的に更新することを避ける",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675997223,
      "updated": 1675997248
    },
    {
      "id": "63e5b041aff09e000047fada",
      "text": "　　仮想DOMを返す=新しいオブジェクトを作って返す",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675997249,
      "updated": 1675997344
    },
    {
      "id": "63e5b068aff09e000047fadb",
      "text": "　　それを生のDOMに反映させる破壊的更新の作業は人間ではなくReactがやる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675997289,
      "updated": 1675997363
    },
    {
      "id": "63e5b008aff09e000047fad8",
      "text": "　ざっくりまとめ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675997193,
      "updated": 1675997193
    },
    {
      "id": "63e492c4aff09e0000275dfc",
      "text": "　　書き換え不能な(immutableな, finalな)「[* データキャリア]」オブジェクトを受け取って、新しいオブジェクトを返す関数のつらなりとして物事を記述する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675924164,
      "updated": 1675924428
    },
    {
      "id": "63e49262aff09e0000275dfa",
      "text": "　　オブジェクトを破壊的に書き換えるのではなく、そういう方法を使おうという流れが生まれた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675924067,
      "updated": 1675924282
    },
    {
      "id": "63e4933aaff09e0000275dfe",
      "text": "　　それを楽に記述するための方法が言語の側に入って行った",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675924282,
      "updated": 1675924321
    },
    {
      "id": "63e492f0aff09e0000275dfd",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675924208,
      "updated": 1675924208
    },
    {
      "id": "63e4936daff09e0000275dff",
      "text": "Promiseとasync/await",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675924334,
      "updated": 1675925710
    },
    {
      "id": "63e49547aff09e0000275e01",
      "text": " 非同期処理関連ではこれが大きい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675924808,
      "updated": 1675925701
    },
    {
      "id": "63e4936daff09e0000275e00",
      "text": "\t[https://gyazo.com/aeda341c5e9ddd54bb6bffe639b64f32]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675924334,
      "updated": 1675925690
    },
    {
      "id": "63e498b9aff09e000020a7d6",
      "text": "\tasync関数はPromiseを返し、awaitはPromiseが解決されるまでブロックする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675925690,
      "updated": 1675925899
    },
    {
      "id": "63e4990caff09e0000275e02",
      "text": "\tPromise(またはfuture)は古くからある考え方",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675925772,
      "updated": 1675925956
    },
    {
      "id": "63e499c4aff09e0000275e03",
      "text": "\t1997年のE言語で今使われているような実装になった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675925956,
      "updated": 1675925956
    },
    {
      "id": "63e499d2aff09e0000275e04",
      "text": "\tこの10年の間にC#、Python、ECMAScript、Rustなどが相次いでこのやり方を採用した",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675925970,
      "updated": 1675926133
    },
    {
      "id": "63e49964aff09e000020a7d7",
      "text": "　Promiseとはなんなのか",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675925861,
      "updated": 1675926176
    },
    {
      "id": "63e49aa0aff09e0000275e06",
      "text": "　　非同期処理を実行したタイミングでブロッキングせず即座に値が返される、これがPromise",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675926176,
      "updated": 1675926210
    },
    {
      "id": "63e49ac2aff09e0000275e07",
      "text": "　　「後で値を提供しますね」という約束",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675926210,
      "updated": 1675926230
    },
    {
      "id": "63e49aeeaff09e0000275e08",
      "text": "　比喩より定義が見たい人にはこれ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675926254,
      "updated": 1675926318
    },
    {
      "id": "63e49b31aff09e000020a7d8",
      "text": "　\t[https://promisesaplus.com/ Promises/A+]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675926322,
      "updated": 1675926324
    },
    {
      "id": "63e49b33aff09e000020a7d9",
      "text": "  >An open standard for sound, interoperable JavaScript promises—by implementers, for implementers.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675926324,
      "updated": 1675926357
    },
    {
      "id": "63e49a96aff09e0000275e05",
      "text": "\tPromiseは3つの状態を持つ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675926166,
      "updated": 1675926388
    },
    {
      "id": "63e49b73aff09e0000275e0a",
      "text": "\t　[https://gyazo.com/607ca5a38fb90ddbb4ef57eae202abb8]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675926388,
      "updated": 1675926544
    },
    {
      "id": "63e49c10aff09e0000275e0b",
      "text": "\tthenメソッド",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675926544,
      "updated": 1675929233
    },
    {
      "id": "63e49c7baff09e000020a7da",
      "text": "\t\tcode:js",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675926651,
      "updated": 1675926658
    },
    {
      "id": "63e49c81aff09e000020a7db",
      "text": "\t\t promise2 = promise1.then(onFulfilled, onRejected);",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675926658,
      "updated": 1675926658
    },
    {
      "id": "63e49b6daff09e0000275e09",
      "text": "\t[https://gyazo.com/8834e1646f07cd1ee5ce56e1196a27cb]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675926382,
      "updated": 1675926979
    },
    {
      "id": "63e49dc3aff09e000020a7dc",
      "text": "　非同期処理の表現方法には他にはコールバックを渡すとか、イベントハンドラを登録するとかがあった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675926979,
      "updated": 1675927069
    },
    {
      "id": "63e49e1daff09e0000275e0d",
      "text": " 　code:js",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675927069,
      "updated": 1675927365
    },
    {
      "id": "63e49e8baff09e000020a7de",
      "text": " 　 // callback style",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675927180,
      "updated": 1675927365
    },
    {
      "id": "63e49e79aff09e000020a7dd",
      "text": " 　 do_something(params, on_success, on_error);",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675927161,
      "updated": 1675927365
    },
    {
      "id": "63e49c91aff09e0000275e0c",
      "text": " \tcode:js",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675926674,
      "updated": 1675927365
    },
    {
      "id": "63e49e92aff09e000020a7e0",
      "text": " \t r = new Request(params);",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675927186,
      "updated": 1675927365
    },
    {
      "id": "63e49f1aaff09e000020a7e2",
      "text": " \t r.on_success = on_success;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675927322,
      "updated": 1675927365
    },
    {
      "id": "63e49f2daff09e000020a7e4",
      "text": " \t r.on_error = on_error;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675927342,
      "updated": 1675927365
    },
    {
      "id": "63e49f2baff09e000020a7e3",
      "text": " \t r.send()",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675927339,
      "updated": 1675927365
    },
    {
      "id": "63e49eebaff09e000020a7e1",
      "text": "\t　かつてのJavaScriptでは他のサービスのAPIを叩いたりするのに`XMLHttpRequest`を使っていた、これはイベントハンドラを使うスタイルだった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675927276,
      "updated": 1675927688
    },
    {
      "id": "63e49f7daff09e0000275e0e",
      "text": "\t\t\t[https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest Using XMLHttpRequest - Web APIs | MDN]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675927421,
      "updated": 1675927560
    },
    {
      "id": "63e4a04aaff09e0000275e0f",
      "text": "\t\t\tこれが面倒だったのでサードパーティライブラリが試行錯誤し、Promiseを使うスタイルがデファクトスタンダードになった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675927626,
      "updated": 1675927672
    },
    {
      "id": "63e4a079aff09e0000275e10",
      "text": "\t\t\tそのあとでPromiseを使うスタイルのAPIが標準化された",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675927673,
      "updated": 1675927706
    },
    {
      "id": "63e4a007aff09e000020a7e6",
      "text": "　   [https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API Fetch API - Web APIs | MDN]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675927560,
      "updated": 1675927698
    },
    {
      "id": "63e4a01eaff09e000020a7e7",
      "text": "　　何が面倒だったか？色々あるが:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675927583,
      "updated": 1675929200
    },
    {
      "id": "63e4a2caaff09e0000275e12",
      "text": "　　　非同期処理をした後にやりたいことをソースコード上で先に書くのは思考の流れが混乱する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675928266,
      "updated": 1675928936
    },
    {
      "id": "63e4a314aff09e0000275e13",
      "text": "　　　非同期処理1をした後、その結果を使って非同期処理2をして…と続けて行った場合のエラー処理",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675928340,
      "updated": 1675928934
    },
    {
      "id": "63e4a006aff09e000020a7e5",
      "text": "\t\t　\t[https://promisesaplus.com/ Promises/A+]でこう定義されているので、1箇所にまとめて書くことができる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675927558,
      "updated": 1675928997
    },
    {
      "id": "63e4a507aff09e000020a7e8",
      "text": "\t\t\t\t\t>If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason as `promise1`.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675928839,
      "updated": 1675928946
    },
    {
      "id": "63e4a540aff09e000020a7e9",
      "text": "　　　　コールバックやイベントハンドラのスタイルでは、名前付きの関数にした上であちこちの`on_error`にそれを指定することになる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675928897,
      "updated": 1675929090
    },
    {
      "id": "63e4a5c9aff09e0000275e14",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929033,
      "updated": 1675929033
    },
    {
      "id": "63e4a74baff09e000020a7ea",
      "text": "[漸進的型付け]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929419,
      "updated": 1675929547
    },
    {
      "id": "63e4a78eaff09e000020a7ec",
      "text": "\t[https://gyazo.com/6ca93fa1196d2124f7c7ecc0a484c065]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929487,
      "updated": 1675929523
    },
    {
      "id": "63e4a7b2aff09e000020a7ed",
      "text": "\t動的型付けの言語が「やっぱり型が欲しい」と言い出して[漸進的型付け](Gradual Typing)を導入した",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929523,
      "updated": 1675929629
    },
    {
      "id": "63e4a870aff09e000020a7f3",
      "text": "\t例",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929713,
      "updated": 1675929723
    },
    {
      "id": "63e4a86eaff09e000020a7ee",
      "text": "  code:python",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929710,
      "updated": 1675929717
    },
    {
      "id": "63e4a86eaff09e000020a7ef",
      "text": "   def foo(x: int):",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929711,
      "updated": 1675929717
    },
    {
      "id": "63e4a86eaff09e000020a7f0",
      "text": "       y: str = x  # NG",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929711,
      "updated": 1675929717
    },
    {
      "id": "63e4a86eaff09e000020a7f1",
      "text": " \t`error: Incompatible types in assignment (expression has type \"int\", variable has type \"str\")  [assignment]`",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929711,
      "updated": 1675929718
    },
    {
      "id": "63e4a81caff09e0000275e15",
      "text": "\t全部に型宣言を書きたくない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929629,
      "updated": 1675929674
    },
    {
      "id": "63e4a849aff09e0000275e16",
      "text": "\t　では型宣言の書いてないものは何か？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929674,
      "updated": 1675929683
    },
    {
      "id": "63e4a852aff09e0000275e17",
      "text": "\t　暗黙のany型",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929683,
      "updated": 1675929749
    },
    {
      "id": "63e4a85baff09e0000275e18",
      "text": "\tany型ってJavaの`java.lang.Object`みたいな型？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929691,
      "updated": 1675934801
    },
    {
      "id": "63e4a915aff09e0000275e19",
      "text": "\t　違います",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929878,
      "updated": 1675929881
    },
    {
      "id": "63e4a919aff09e0000275e1a",
      "text": "　\tcode:python",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929881,
      "updated": 1675929908
    },
    {
      "id": "63e4a92eaff09e000020a7f4",
      "text": " \t def foo(x: int):",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929903,
      "updated": 1675929908
    },
    {
      "id": "63e4a92eaff09e000020a7f5",
      "text": "       y: object = x  # OK",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929903,
      "updated": 1675929908
    },
    {
      "id": "63e4a92eaff09e000020a7f6",
      "text": "  code:python",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929903,
      "updated": 1675929908
    },
    {
      "id": "63e4a92eaff09e000020a7f7",
      "text": "   def foo(x: object):",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929903,
      "updated": 1675929908
    },
    {
      "id": "63e4a92eaff09e000020a7f8",
      "text": "       y: str = x  # NG",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929903,
      "updated": 1675929908
    },
    {
      "id": "63e4a78eaff09e000020a7eb",
      "text": "\t\t`error: Incompatible types in assignment (expression has type \"object\", variable has type \"str\")  [assignment]`",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929486,
      "updated": 1675929958
    },
    {
      "id": "63e4a964aff09e000020a7fa",
      "text": "\t\tObject型の値をString型の値に代入しようとすること(暗黙のダウンキャスト)はNG",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929956,
      "updated": 1675934775
    },
    {
      "id": "63e4a964aff09e000020a7fb",
      "text": "\t \tこれが普通の型の振る舞い",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929956,
      "updated": 1675929969
    },
    {
      "id": "63e4a964aff09e000020a7fc",
      "text": "\t \tanyがアップキャストもダウンキャストも暗黙に行える特殊な型ということ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929956,
      "updated": 1675929990
    },
    {
      "id": "63e4ba9faff09e000020a84c",
      "text": "\t \t[https://gyazo.com/8e18254db69518ccc099cf724fdb1f86][https://gyazo.com/802836aae4333668c25a40bf1f6b5120]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675934367,
      "updated": 1675934382
    },
    {
      "id": "63e4bbf9aff09e000020a864",
      "text": "\t\tTypeScriptではこの二つの挙動に対応する型が unknownとany",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675934714,
      "updated": 1675934849
    },
    {
      "id": "63e4a964aff09e000020a7fd",
      "text": " 　\tcode:ts",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675929956,
      "updated": 1675934856
    },
    {
      "id": "63e4bbe8aff09e000020a851",
      "text": " 　\t const take_number = (x: number): void => {};",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675934696,
      "updated": 1675934856
    },
    {
      "id": "63e4bbe9aff09e000020a852",
      "text": "    {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675934697,
      "updated": 1675934856
    },
    {
      "id": "63e4bbe9aff09e000020a857",
      "text": "      let x: any;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675934697,
      "updated": 1675934856
    },
    {
      "id": "63e4bbe9aff09e000020a858",
      "text": "      take_number(x);  // OK",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675934697,
      "updated": 1675934856
    },
    {
      "id": "63e4bbe9aff09e000020a859",
      "text": "    }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675934697,
      "updated": 1675934856
    },
    {
      "id": "63e4bbe9aff09e000020a85a",
      "text": "    {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675934697,
      "updated": 1675934856
    },
    {
      "id": "63e4bbe9aff09e000020a860",
      "text": "      let x: unknown;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675934697,
      "updated": 1675934856
    },
    {
      "id": "63e4bbe9aff09e000020a861",
      "text": "      take_number(x);  // NG",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675934697,
      "updated": 1675934856
    },
    {
      "id": "63e4bbe9aff09e000020a862",
      "text": "    }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675934697,
      "updated": 1675934856
    },
    {
      "id": "63e4bbe9aff09e000020a863",
      "text": "   `Argument of type 'unknown' is not assignable to parameter of type 'number'.`",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675934697,
      "updated": 1675934856
    },
    {
      "id": "63e4bbdeaff09e000020a850",
      "text": "　現状のPython(mypy)では返り値の型を推測しない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675934687,
      "updated": 1675934687
    },
    {
      "id": "63e4a9d6aff09e000020a7fe",
      "text": " \tcode:python",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930070,
      "updated": 1675930127
    },
    {
      "id": "63e4a9d6aff09e000020a7ff",
      "text": "   def foo(x: int):",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930070,
      "updated": 1675930127
    },
    {
      "id": "63e4a9d6aff09e000020a800",
      "text": "       return x",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930070,
      "updated": 1675930127
    },
    {
      "id": "63e4a9d6aff09e000020a801",
      "text": "   ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930070,
      "updated": 1675930127
    },
    {
      "id": "63e4a9d6aff09e000020a802",
      "text": "   print(typing.reveal_type(foo))",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930070,
      "updated": 1675930127
    },
    {
      "id": "63e4a9d6aff09e000020a803",
      "text": "  `note: Revealed type is \"def (x: builtins.int) -> Any\"`",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930070,
      "updated": 1675930127
    },
    {
      "id": "63e4a9d6aff09e000020a804",
      "text": "  これはTypeScriptとは異なる挙動",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930070,
      "updated": 1675930129
    },
    {
      "id": "63e4a9d6aff09e000020a805",
      "text": " \t\t[https://gyazo.com/485b1234b2e40fa0839bf9379e8ddce3]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930070,
      "updated": 1675930129
    },
    {
      "id": "63e4aa19aff09e000020a80e",
      "text": "\t\t人間がこう明示することが期待されている",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930138,
      "updated": 1675930146
    },
    {
      "id": "63e4a9d6aff09e000020a806",
      "text": "  \tcode:python",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930070,
      "updated": 1675930149
    },
    {
      "id": "63e4a9d6aff09e000020a807",
      "text": "  \t def foo(x: int) -> int:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930070,
      "updated": 1675930149
    },
    {
      "id": "63e4a9d6aff09e000020a808",
      "text": "        return x",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930070,
      "updated": 1675930149
    },
    {
      "id": "63e4a9d6aff09e000020a809",
      "text": "    ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930070,
      "updated": 1675930149
    },
    {
      "id": "63e4a9d6aff09e000020a80a",
      "text": "    print(typing.reveal_type(foo))",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930070,
      "updated": 1675930149
    },
    {
      "id": "63e4a9d6aff09e000020a80b",
      "text": "   `note: Revealed type is \"def (x: builtins.int) -> builtins.int\"`",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930070,
      "updated": 1675930149
    },
    {
      "id": "63e4a9d6aff09e000020a80c",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930070,
      "updated": 1675930150
    },
    {
      "id": "63e4aa2faff09e000020a810",
      "text": "名前的型付けと構造的型付け",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930159,
      "updated": 1675930181
    },
    {
      "id": "63e4aa3caff09e0000275e1b",
      "text": "　[https://gyazo.com/dbb2e686e58f68db832dcc6ab1d0ad05]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930172,
      "updated": 1675930238
    },
    {
      "id": "63e4aa7eaff09e000020a811",
      "text": "\tfrom[「名前的型システムと構造的型システムの違い」加筆案]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930238,
      "updated": 1675930542
    },
    {
      "id": "63e4aa47aff09e0000275e1c",
      "text": "\t [https://gyazo.com/df9ab60204aa68fff5318dccb0c6a6da]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930183,
      "updated": 1675930544
    },
    {
      "id": "63e4aba9aff09e000020a812",
      "text": " \tメモリに0と1が並んでいるだけでは、それが整数なのか浮動小数点数なのかわからない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930537,
      "updated": 1675930539
    },
    {
      "id": "63e4aba9aff09e000020a813",
      "text": " \tそこで`int n;`などと宣言することで「これは整数だよ」という情報を変数につけるのが静的型付け",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930537,
      "updated": 1675930539
    },
    {
      "id": "63e4aba9aff09e000020a814",
      "text": " \t「この値は整数だよ」という情報を値につけるのが動的型付け",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930537,
      "updated": 1675930539
    },
    {
      "id": "63e4aba9aff09e000020a815",
      "text": "　この「変数にメタ情報をつけるアプローチ」に二つある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930537,
      "updated": 1675930606
    },
    {
      "id": "63e4ac80aff09e0000275e22",
      "text": "　　構造を使って判断する派",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930752,
      "updated": 1675930752
    },
    {
      "id": "63e4ac5daff09e0000275e20",
      "text": "　　名前を使って判断する派",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930717,
      "updated": 1675930724
    },
    {
      "id": "63e4af24aff09e0000275e23",
      "text": "　　[https://gyazo.com/d5e7ab2fc66dd5cecc55a95e5667d199]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675931429,
      "updated": 1675931432
    },
    {
      "id": "63e4af28aff09e0000275e24",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675931432,
      "updated": 1675931432
    },
    {
      "id": "63e4acc5aff09e000020a827",
      "text": "　1985年に生まれたC++や1995年に生まれたJavaは名前的型システムを採用していた。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930822,
      "updated": 1675930864
    },
    {
      "id": "63e4af56aff09e0000275e25",
      "text": "　　名前が異なるものには互換性がない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675931478,
      "updated": 1675931491
    },
    {
      "id": "63e4af69aff09e0000275e28",
      "text": "　　\t`extends`や`implements`で部分型関係の宣言をする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675931497,
      "updated": 1675931504
    },
    {
      "id": "63e4acefaff09e000020a828",
      "text": "　\tこの2つの言語はとてもメジャーになったので、このやり方に慣れ親しんだ人も多いだろう。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930864,
      "updated": 1675931514
    },
    {
      "id": "63e4acf2aff09e000020a829",
      "text": "　一方、型理論の研究においては構造的型システムの方が主流だった。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930866,
      "updated": 1675930872
    },
    {
      "id": "63e4acf7aff09e000020a82a",
      "text": "　\tその結果、JavaScriptを生成するための静的型付け言語を設計する際に、Javaなどを参考に名前的型システムを採用した言語(Dartなど)と、型理論を参考に構造的型システムを採用する言語(TypeScriptなど)が混在することになってしまった。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930872,
      "updated": 1675930901
    },
    {
      "id": "63e4ad38aff09e000020a82c",
      "text": "　TypeScriptでの例",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930937,
      "updated": 1675930944
    },
    {
      "id": "63e4ac76aff09e0000275e21",
      "text": " \tcode:TypeScript",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930742,
      "updated": 1675930947
    },
    {
      "id": "63e4acbcaff09e000020a816",
      "text": "   type T1 = {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930813,
      "updated": 1675930947
    },
    {
      "id": "63e4acbcaff09e000020a817",
      "text": "       x : number",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930813,
      "updated": 1675930947
    },
    {
      "id": "63e4acbcaff09e000020a818",
      "text": "   }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930813,
      "updated": 1675930947
    },
    {
      "id": "63e4acbcaff09e000020a819",
      "text": "   ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930813,
      "updated": 1675930947
    },
    {
      "id": "63e4acbcaff09e000020a81a",
      "text": "   type T2 = {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930813,
      "updated": 1675930947
    },
    {
      "id": "63e4acbcaff09e000020a81b",
      "text": "       x : number",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930813,
      "updated": 1675930947
    },
    {
      "id": "63e4acbcaff09e000020a81c",
      "text": "   }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930813,
      "updated": 1675930947
    },
    {
      "id": "63e4acbcaff09e000020a81d",
      "text": "   ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930813,
      "updated": 1675930947
    },
    {
      "id": "63e4acbcaff09e000020a81e",
      "text": "   let a: T1;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930813,
      "updated": 1675931459
    },
    {
      "id": "63e4acbcaff09e000020a81f",
      "text": "   let b: T2 = {x: 1};",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930813,
      "updated": 1675931461
    },
    {
      "id": "63e4acbcaff09e000020a820",
      "text": "   a = b; // OK",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930813,
      "updated": 1675930947
    },
    {
      "id": "63e4acbcaff09e000020a821",
      "text": " \tこのコードの`let b:T2 = {x: 1}`の、`{x: 1}`の部分は名前のないオブジェクト型である。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930813,
      "updated": 1675930947
    },
    {
      "id": "63e4acbcaff09e000020a823",
      "text": "  これはT1ともT2とも同じ形をしているので、エラーになることなく代入できる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930813,
      "updated": 1675930947
    },
    {
      "id": "63e5ad76aff09e000047fad5",
      "text": " 構造の同じ型に違う名前をつけて、区別されることを期待してしまった事例",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996535,
      "updated": 1675996555
    },
    {
      "id": "63e5ad8baff09e000047fad6",
      "text": " 　[名前的型と構造的型の勘違いによる実話]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996555,
      "updated": 1675996564
    },
    {
      "id": "63e4acbcaff09e000020a824",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930813,
      "updated": 1675931535
    },
    {
      "id": "63e4ad35aff09e000020a82b",
      "text": "Rust: 所有権・ライフタイム",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675930933,
      "updated": 1675932283
    },
    {
      "id": "63e4afa5aff09e0000275e2b",
      "text": "　Rustは2010年にリリースされた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675931558,
      "updated": 1675932368
    },
    {
      "id": "63e4b2d0aff09e0000275e2d",
      "text": " 　2015年にRust 1.0がリリースされた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675932368,
      "updated": 1675932452
    },
    {
      "id": "63e4afc3aff09e0000275e2c",
      "text": " 　2016年から2020年にかけてStack Overflowによる「開発者がもっとも愛するプログラミング言語」でRustが1位を取り続けた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675931587,
      "updated": 1675932453
    },
    {
      "id": "63e4b311aff09e0000275e2e",
      "text": "　Rustは所有権やライフタイムの概念が特徴的とされるが、所有権はRust特有の概念ではない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675932434,
      "updated": 1675932522
    },
    {
      "id": "63e4b382aff09e0000275e2f",
      "text": "　　C++11で`std::unique_ptr`が採用されている",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675932547,
      "updated": 1675932597
    },
    {
      "id": "63e4b3b5aff09e0000275e30",
      "text": "　　これはつまり「確保したメモリを唯一指しているポインタ」",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675932597,
      "updated": 1675932661
    },
    {
      "id": "63e4b3f4aff09e0000275e32",
      "text": "　　このポインタがスコープを抜ける時にはそのメモリを参照する手段がなくなるのだから解放してよい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675932661,
      "updated": 1675932673
    },
    {
      "id": "63e4b3d1aff09e0000275e31",
      "text": "　C++は過去のコードとの互換性のために、従来通りのシンプルな記法は従来通りの挙動、新しい挙動には新しい記法、という縛りがある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675932625,
      "updated": 1675932834
    },
    {
      "id": "63e4b4a2aff09e0000275e33",
      "text": "　　Rustは違う言語になることでこの互換性の縛りから逃れる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675932834,
      "updated": 1675932851
    },
    {
      "id": "63e4afa3aff09e0000275e2a",
      "text": "  code:rust",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675931556,
      "updated": 1675932876
    },
    {
      "id": "63e4b4beaff09e000020a82e",
      "text": "   let x = String::from(\"hello\");",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675932862,
      "updated": 1675932876
    },
    {
      "id": "63e4b4c9aff09e000020a837",
      "text": "   let y = x;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675932873,
      "updated": 1675932876
    },
    {
      "id": "63e4b4c9aff09e000020a838",
      "text": "   println!(\"x: {}\", x);  // NG",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675932873,
      "updated": 1675932876
    },
    {
      "id": "63e4b4c9aff09e000020a839",
      "text": "   println!(\"y: {}\", y);",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675932873,
      "updated": 1675932876
    },
    {
      "id": "63e4b4c9aff09e000020a83a",
      "text": "\t\t`error: borrow of moved value: x`",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675932873,
      "updated": 1675932942
    },
    {
      "id": "63e4b4bdaff09e000020a82d",
      "text": "\t\txやyがC++でいうところのunique_ptrになっていて、`y = x`でムーブが行われている",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675932861,
      "updated": 1675933133
    },
    {
      "id": "63e4b5cfaff09e0000275e35",
      "text": "\t\tC++では普通は参照のコピーをしようとしてしまう",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933135,
      "updated": 1675996466
    },
    {
      "id": "63e4b598aff09e0000275e34",
      "text": "　\t\t「コピーではなくムーブを意図しているんだ」と表現するために`std::move`を使う",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933081,
      "updated": 1675933392
    },
    {
      "id": "63e4b6c2aff09e0000275e37",
      "text": "　\t\tこれを既存のコードを壊さずに実現するために「右辺値/左辺値」の区別がC++11で追加された",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933378,
      "updated": 1675933504
    },
    {
      "id": "63e4b74eaff09e0000275e38",
      "text": "　\t　\t「ある値が右辺値であるなら、今後使わないのでコピーではなくムーブでよい」ということ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933519,
      "updated": 1675933611
    },
    {
      "id": "63e4b77caff09e0000275e39",
      "text": "　\t　\tこうして右辺値参照を受け取るムーブコンストラクタが追加された",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933565,
      "updated": 1675933594
    },
    {
      "id": "63e4b7abaff09e0000275e3a",
      "text": "　\t　std::moveは右辺値参照にキャストすることでムーブが行われるようにする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933612,
      "updated": 1675933649
    },
    {
      "id": "63e4b64faff09e000020a83b",
      "text": "　C++においては「有効でないポインタをデリファレンスしないように気をつける」はコンパイラの仕事ではない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933264,
      "updated": 1675933838
    },
    {
      "id": "63e4b88eaff09e0000275e3d",
      "text": "　　人間が気をつけるか、静的解析ツールでチェックする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933838,
      "updated": 1675933909
    },
    {
      "id": "63e4b845aff09e0000275e3c",
      "text": "　　Rustではコンパイラがそれをチェックする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933766,
      "updated": 1675933777
    },
    {
      "id": "63e4b8f0aff09e000020a84b",
      "text": "　　上記のRustコードと同じことをC++でやろうとしたらSegmentation faultになってしまった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933937,
      "updated": 1675933974
    },
    {
      "id": "63e4b7fcaff09e0000275e3b",
      "text": "\t\tcode:cpp",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933693,
      "updated": 1675933935
    },
    {
      "id": "63e4b8eeaff09e000020a83c",
      "text": "   #include <iostream>",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933935,
      "updated": 1675933935
    },
    {
      "id": "63e4b8eeaff09e000020a83d",
      "text": "   #include <string> ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933935,
      "updated": 1675933935
    },
    {
      "id": "63e4b8eeaff09e000020a83e",
      "text": "   #include <memory> ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933935,
      "updated": 1675933935
    },
    {
      "id": "63e4b8eeaff09e000020a83f",
      "text": "   ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933935,
      "updated": 1675933935
    },
    {
      "id": "63e4b8eeaff09e000020a840",
      "text": "   int main () {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933935,
      "updated": 1675933935
    },
    {
      "id": "63e4b8eeaff09e000020a841",
      "text": "       std::unique_ptr<std::string> x = std::make_unique<std::string>(std::string(\"abc\"));",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933935,
      "updated": 1675933935
    },
    {
      "id": "63e4b8eeaff09e000020a842",
      "text": "       std::unique_ptr<std::string> y;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933935,
      "updated": 1675933935
    },
    {
      "id": "63e4b8eeaff09e000020a843",
      "text": "       y = std::move(x);",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933935,
      "updated": 1675933935
    },
    {
      "id": "63e4b8eeaff09e000020a844",
      "text": "       std::cout << *y << std::endl;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933935,
      "updated": 1675933935
    },
    {
      "id": "63e4b8eeaff09e000020a845",
      "text": "       std::cout << *x << std::endl;  // here",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933935,
      "updated": 1675933935
    },
    {
      "id": "63e4b8eeaff09e000020a846",
      "text": "   }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933935,
      "updated": 1675933935
    },
    {
      "id": "63e4b8eeaff09e000020a847",
      "text": "  code:output",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933935,
      "updated": 1675933935
    },
    {
      "id": "63e4b8eeaff09e000020a848",
      "text": "   abc",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933935,
      "updated": 1675933935
    },
    {
      "id": "63e4b8eeaff09e000020a849",
      "text": "   Segmentation fault",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933935,
      "updated": 1675933935
    },
    {
      "id": "63e4d08faff09e0000275e4a",
      "text": "  このコードでは、間違って読んだり解放したりしてしまわないようにxはnullになっている",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675939984,
      "updated": 1675940036
    },
    {
      "id": "63e4b8eeaff09e000020a84a",
      "text": "　「スコープを抜けた時に解放されるのはRAIIと同じでは？何が珍しいの？」と思ってた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675933935,
      "updated": 1675935095
    },
    {
      "id": "63e4bd77aff09e0000275e40",
      "text": "　　重要なのは「シンプルな書き方をした時にmove」というデフォルト挙動の変化の方だと思う",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675935095,
      "updated": 1675935129
    },
    {
      "id": "63e4bdc9aff09e0000275e41",
      "text": "　　例",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675935177,
      "updated": 1675935179
    },
    {
      "id": "63e4bd3daff09e0000275e3f",
      "text": " \t\tcode:rust",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675935038,
      "updated": 1675935180
    },
    {
      "id": "63e4bdbeaff09e000020a86d",
      "text": " \t\t let x = String::from(\"hello\");",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675935166,
      "updated": 1675935180
    },
    {
      "id": "63e4bdbeaff09e000020a86e",
      "text": "    foo(x);  // move",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675935166,
      "updated": 1676001268
    },
    {
      "id": "63e4bdbeaff09e000020a86f",
      "text": "    println!(\"x: {}\", x);  // NG",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675935166,
      "updated": 1675935180
    },
    {
      "id": "63e4bdb0aff09e000020a866",
      "text": "　　　この例では関数呼び出しのところでxがムーブしているからそれ以降使えない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675935152,
      "updated": 1675935223
    },
    {
      "id": "63e4bdaeaff09e000020a865",
      "text": "　　　代入によるムーブや関数呼び出しによるムーブをたどっていって「ムーブせずにスコープを抜けたところ」で解放をするようにコンパイラがやってくれる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675935151,
      "updated": 1675935332
    },
    {
      "id": "63e5acaaaff09e0000dc7c72",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996330,
      "updated": 1675996330
    },
    {
      "id": "63e4bdb2aff09e000020a86c",
      "text": "ライフタイムの概念",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675935155,
      "updated": 1675996332
    },
    {
      "id": "63e4cf4caff09e0000275e46",
      "text": "　参照が有効であるスコープ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675939661,
      "updated": 1675996332
    },
    {
      "id": "63e4cfe0aff09e0000275e47",
      "text": "　スコープという言葉の今を多くの人がソースコード上のブロックと関連付けて考えるので(字句的スコープだと解釈するようになったので)スコープと呼ぶと混乱が起きる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675939809,
      "updated": 1675996332
    },
    {
      "id": "63e4d03caff09e0000275e49",
      "text": "　　呼び出し元で作られた参照が呼び出し先でも有効である特徴はPerlなどにあった動的スコープに似ている",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675939901,
      "updated": 1675996332
    },
    {
      "id": "63e4d212aff09e000020a870",
      "text": "　　code:rust",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940370,
      "updated": 1675996332
    },
    {
      "id": "63e4d215aff09e000020a871",
      "text": "　　 let x;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940373,
      "updated": 1675996332
    },
    {
      "id": "63e4d215aff09e000020a872",
      "text": "   let y;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940374,
      "updated": 1675996332
    },
    {
      "id": "63e4d215aff09e000020a873",
      "text": "   // println!(\"x: {}\", x);  // NG",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940374,
      "updated": 1675996332
    },
    {
      "id": "63e4d215aff09e000020a874",
      "text": "   // error[E0381]: used binding `x` is possibly-uninitialized",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940374,
      "updated": 1675996332
    },
    {
      "id": "63e4d215aff09e000020a875",
      "text": "   x = String::from(\"hello\");",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940374,
      "updated": 1675996332
    },
    {
      "id": "63e4d215aff09e000020a876",
      "text": "   println!(\"x: {}\", x);  // OK",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940374,
      "updated": 1675996332
    },
    {
      "id": "63e4d215aff09e000020a877",
      "text": "   y = x;",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940374,
      "updated": 1675996332
    },
    {
      "id": "63e4d215aff09e000020a878",
      "text": "   // println!(\"x: {}\", x);  // NG",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940374,
      "updated": 1675996332
    },
    {
      "id": "63e4d215aff09e000020a879",
      "text": "   // error[E0382]: borrow of moved value: `x`",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940374,
      "updated": 1675996332
    },
    {
      "id": "63e4d215aff09e000020a87a",
      "text": "  xの初期化前とムーブ後の利用がコンパイルエラーになることがわかる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940374,
      "updated": 1675996332
    },
    {
      "id": "63e4be7baff09e0000275e43",
      "text": "　ライフタイム指定子",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675935355,
      "updated": 1675996332
    },
    {
      "id": "63e4d6efaff09e0000275e4c",
      "text": "　　ライフタイムをコンパイラが推測できない時に教えてやる記法",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675941615,
      "updated": 1675996332
    },
    {
      "id": "63e5aa8baff09e000047facd",
      "text": "　　独特な記法に戸惑う人も多いみたい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675995788,
      "updated": 1675996332
    },
    {
      "id": "63e5aa97aff09e000047face",
      "text": "　　　これは[* 変数に対してメタデータ]を付与する行為なので広い意味で「型」",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675995799,
      "updated": 1676001483
    },
    {
      "id": "63e5aac8aff09e000047facf",
      "text": "　　　ライフタイム指定子が「名前をつけなければいけない」ので慣習的に`'a`とつけるのは、ジェネリクスで型変数に`T`と名前をつけるのと同じ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675995848,
      "updated": 1676001506
    },
    {
      "id": "63e5ab3faff09e000047fad0",
      "text": "　　　名前自体に意味があるのではなく同じ名前が複数箇所で使われることによって、その要素の間の関係を表現する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675995967,
      "updated": 1675996332
    },
    {
      "id": "63e4dbddaff09e0000275e50",
      "text": "　\t例1",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675942878,
      "updated": 1675996332
    },
    {
      "id": "63e4d71aaff09e0000275e4d",
      "text": "　\t　複数の参照に同じ名前のライフタイム指定子をつけると、その共通部分集合がライフタイムになる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675941659,
      "updated": 1675996332
    },
    {
      "id": "63e4d2a3aff09e0000275e4b",
      "text": "   code:rust",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940515,
      "updated": 1675996332
    },
    {
      "id": "63e4d33faff09e000020a883",
      "text": "    fn longest(x: &str, y: &str) -> &str {  // NG",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940671,
      "updated": 1675996332
    },
    {
      "id": "63e4d33faff09e000020a884",
      "text": "        if x.len() > y.len() {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940672,
      "updated": 1675996332
    },
    {
      "id": "63e4d33faff09e000020a885",
      "text": "            x",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940672,
      "updated": 1675996332
    },
    {
      "id": "63e4d33faff09e000020a886",
      "text": "        } else {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940672,
      "updated": 1675996332
    },
    {
      "id": "63e4d33faff09e000020a887",
      "text": "            y",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940672,
      "updated": 1675996332
    },
    {
      "id": "63e4d33faff09e000020a888",
      "text": "        }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940672,
      "updated": 1675996332
    },
    {
      "id": "63e4d33faff09e000020a889",
      "text": "    }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940672,
      "updated": 1675996332
    },
    {
      "id": "63e4d33daff09e000020a882",
      "text": "   code:error",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940670,
      "updated": 1675996332
    },
    {
      "id": "63e4d345aff09e000020a88b",
      "text": "    error[E0106]: missing lifetime specifier",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940678,
      "updated": 1675996332
    },
    {
      "id": "63e4d353aff09e000020a88c",
      "text": "      --> src/main.rs:14:33",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940692,
      "updated": 1675996332
    },
    {
      "id": "63e4d353aff09e000020a88d",
      "text": "       |",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940692,
      "updated": 1675996332
    },
    {
      "id": "63e4d353aff09e000020a88e",
      "text": "    14 | fn longest(x: &str, y: &str) -> &str {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940692,
      "updated": 1675996332
    },
    {
      "id": "63e4d353aff09e000020a88f",
      "text": "       |               ----     ----     ^ expected named lifetime parameter",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940692,
      "updated": 1675996332
    },
    {
      "id": "63e4d353aff09e000020a890",
      "text": "       |",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940692,
      "updated": 1675996332
    },
    {
      "id": "63e4d353aff09e000020a891",
      "text": "       = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940692,
      "updated": 1675996332
    },
    {
      "id": "63e4d353aff09e000020a892",
      "text": "    help: consider introducing a named lifetime parameter",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940692,
      "updated": 1675996332
    },
    {
      "id": "63e4d353aff09e000020a893",
      "text": "       |",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940692,
      "updated": 1675996332
    },
    {
      "id": "63e4d353aff09e000020a894",
      "text": "    14 | fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940692,
      "updated": 1675996332
    },
    {
      "id": "63e4d353aff09e000020a895",
      "text": "       |           ++++     ++          ++          ++",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940692,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c51",
      "text": "　\t例2",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c52",
      "text": "　\t　staticライフタイム",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abcfaff09e000047fad1",
      "text": "　\t　　あらかじめシステムによって名前が付いているライフタイム指定子",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996112,
      "updated": 1675996332
    },
    {
      "id": "63e5abf5aff09e0000dc7c71",
      "text": "　\t　　「プログラム全体にわたるライフタイム」を表現している",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996150,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c53",
      "text": "　\t\tcode:rust",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c54",
      "text": "　\t\t fn dangle() -> &String {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c55",
      "text": "        let s = String::from(\"hello\");",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c56",
      "text": "        &s",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c57",
      "text": "    }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c58",
      "text": "　\t\tcode:error",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c59",
      "text": "　\t\t error[E0106]: missing lifetime specifier",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c5a",
      "text": "      --> src/main.rs:22:16",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c5b",
      "text": "       |",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c5c",
      "text": "    22 | fn dangle() -> &String {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c5d",
      "text": "       |                ^ expected named lifetime parameter",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c5e",
      "text": "       |",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c5f",
      "text": "       = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c60",
      "text": "    help: consider using the `'static` lifetime",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c61",
      "text": "       |",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c62",
      "text": "    22 | fn dangle() -> &'static String {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c63",
      "text": "       |                 +++++++",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c64",
      "text": "　\t　これは本来はダメ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5ac37aff09e000047fad3",
      "text": "　\t　　関数を抜ける時にsが解放されるから",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996215,
      "updated": 1675996332
    },
    {
      "id": "63e5ac35aff09e000047fad2",
      "text": "　\t　　なんだけどコンパイラが「定数に変えたらプログラム全体をライフタイムにできるな」と判断してる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996214,
      "updated": 1675996332
    },
    {
      "id": "63e5ac54aff09e000047fad4",
      "text": "　\t　　　その結果2歩先を行くエラーメッセージになってる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996244,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c65",
      "text": "　\t　コンパイラが定数にできるかわからないようにしてやれば素直なエラーメッセージになる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c66",
      "text": "　\t　code:rust",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c67",
      "text": "　\t　 fn dangle(x: &String) -> &String {",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c68",
      "text": "        let s = x.clone();",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c69",
      "text": "        &s",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c6a",
      "text": "    }",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c6b",
      "text": "   code:error",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c6c",
      "text": "    error[E0515]: cannot return reference to local variable `s`",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c6d",
      "text": "      --> src/main.rs:31:5",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c6e",
      "text": "       |",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c6f",
      "text": "    31 |     &s",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e5abc0aff09e0000dc7c70",
      "text": "       |     ^^ returns a reference to data owned by the current function",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675996096,
      "updated": 1675996332
    },
    {
      "id": "63e4d344aff09e000020a88a",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675940678,
      "updated": 1675940678
    }
  ]
}