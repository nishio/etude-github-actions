{
  "id": "5fc63411f0a5fe001ef9a4cb",
  "title": "整理し直すことの支援",
  "created": 1606824982,
  "updated": 1607331789,
  "lines": [
    {
      "id": "5fc63411f0a5fe001ef9a4cb",
      "text": "整理し直すことの支援",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606824982,
      "updated": 1606824990
    },
    {
      "id": "5fc6341eaff09e00006c33d2",
      "text": "[階層的分類]が破綻するのは、最初に決めた分類方法に当てはまらないものが現れた時に分類方法を更新すべきなのにそれをやらないことが原因なのだが、",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606824991,
      "updated": 1607331771
    },
    {
      "id": "5fc63432aff09e00006c33d3",
      "text": "「だから階層的分類は全て破綻する、やるべきではない」というScrapboxの思想はちょっと行きすぎてて、",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606825011,
      "updated": 1606825011
    },
    {
      "id": "5fc63432aff09e00006c33d4",
      "text": "素朴な「[容器のメタファー]」は多くの人にとってとっつきやすいし、kintoneが「スペースなんてなくてすべての投稿はフラットです」ってなるのが正しいとは思えない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606825011,
      "updated": 1607331789
    },
    {
      "id": "5fc63432aff09e00006c33d5",
      "text": "容器のメタファーが壊れた時に[整理し直す]ことがシステム的に支援されるなら、階層的分類をやっても問題ないのでは。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606825011,
      "updated": 1607331776
    },
    {
      "id": "5fcdef75aff09e000029e3e7",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607331702,
      "updated": 1607331702
    },
    {
      "id": "5fcdef75aff09e000029e3e8",
      "text": "https://twitter.com/nishio/status/1334051841680699392",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607331702,
      "updated": 1607331702
    },
    {
      "id": "5fcdef76aff09e000029e3ea",
      "text": "\t先日の考察からさらに発展して「情報を整理し直すことの支援」が必要なのではという気持ちになってきたので、それを書き連ねてみる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607331703,
      "updated": 1607331715
    },
    {
      "id": "5fcdef82aff09e000029e3eb",
      "text": " 「階層的分類はいずれ破綻する」の話、それが真であったとしても「階層的分類を一切やってはいけない」は真ではない、ここに論理的な飛躍がある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607331715,
      "updated": 1607331721
    },
    {
      "id": "5fcdef82aff09e000029e3f0",
      "text": " 階層的分類が破綻するのは、大きく2つの原因があった。事前に想定した分類方法ではうまく分類できないものが現れることと、複数人で使う時に分類方法が食い違うこと。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607331715,
      "updated": 1607331724
    },
    {
      "id": "5fcdef82aff09e000029e3f5",
      "text": " 前者も「過去の分類方法と新しい分類方法の食い違い」と捉えれば、これは「分類方法が一通りしか持てないシステムの問題」となる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607331715,
      "updated": 1607331726
    },
    {
      "id": "5fcdef82aff09e000029e3fa",
      "text": " 分類方法が一通りしか持てないから、うまく当てはまらない情報が出てきた時に「過去の分類方法を捨てて、新しい分類方法で分類し直す」が必要になり、それをほとんどの人は面倒だと思って古い分類方法のまま無理やり情報を入れる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607331715,
      "updated": 1607331728
    },
    {
      "id": "5fcdef82aff09e000029e3ff",
      "text": " 「分類し直すこと」のコストが高いから「分類し直し」が行われない。ならば分類し直しが容易であるような設計や、分類し直しを支援するシステムがあれば良いのでは？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607331715,
      "updated": 1607331730
    },
    {
      "id": "5fcdef82aff09e000029e404",
      "text": " たとえば「どこに入れたら良いかわからないもの」が現れた時に、多くの場合「それでもすぐどこかに入れなきゃいけない」というプレッシャーをユーザが感じているために適当な場所に入れられてしまう。それを防ぐためには「どこに入れたら良いかわからないものを入れる場所」をあらかじめ用意すれば良い",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607331715,
      "updated": 1607331732
    },
    {
      "id": "5fcdef82aff09e000029e409",
      "text": "\t 漫画喫茶などでよく行われている運用だ。分類を無視して適当なところに入れられるくらいなら「分類されてないもの」というくくりに入れた方が良い。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607331715,
      "updated": 1607331736
    },
    {
      "id": "5fcdef82aff09e000029e40e",
      "text": " 次に「分類し直し」によって何も破壊されないことの保証が必要。フォルダとファイルによる素朴な階層的分類がダメなのは整理し直しで「別の場所に動かす」と「元の場所に見つからなくなる」ところ。ここをケアしたシステムにすれば良い。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607331715,
      "updated": 1607331739
    },
    {
      "id": "5fcdef82aff09e000029e413",
      "text": " たとえば「タグ」を仮想的なフォルダにして、その「タグ」がついたものをその中に入れて見せる容器のメタファーのシステムなど。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607331715,
      "updated": 1607331742
    },
    {
      "id": "5fcdef82aff09e000029e418",
      "text": " ファイルXをフォルダAからフォルダBに動かすと「AにあったはずのXがなくなった！」となるが、ファイルXにタグAがついてる状態でタグBを追加しても「仮想的にAに入ってる状態」は失われない。この保証があることで安心してタグの付与ができる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607331715,
      "updated": 1607331747
    },
    {
      "id": "5fcdef82aff09e000029e41d",
      "text": " ここまでにあげた二つの道具では全然足りない。たとえばある人がXをAに入れて、別の人が「これがAに入ってるのは誤りだ」とBに移動した場合、XがAからなくなるとAにあると思ってる人が迷子になり、なくならないなら「Aにあるのは誤り」という意図の表現ができない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607331715,
      "updated": 1607331750
    },
    {
      "id": "5fcdef82aff09e000029e422",
      "text": " 一つの解決方法はAに「Aから削除もしくは移動されたもの」が入る「ゴミ箱」をつけること。もう一つの解決方法は「過去にAにあったもの」に対する検索。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607331715,
      "updated": 1607331753
    },
    {
      "id": "5fcdef82aff09e000029e427",
      "text": " 階層的分類で事前に適切な分類方法を決めるのが困難であるのと同様に、タグ付けにおいて事前に適切なタグ付けの基準を決めるのも困難。その結果、一つのタグが100のページについてて一覧困難になる事態とかが起こる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607331715,
      "updated": 1607331755
    },
    {
      "id": "5fcdef82aff09e000029e42c",
      "text": " 「すべての単語Xの出現をタグにしてしまうと、Xでの検索結果と変わらなくなるからそういうことをやってはいけない」というの、考えれば当然なのだが、すべてのユーザがそれを理解して使うかというと当然そんなことはない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607331715,
      "updated": 1607331757
    },
    {
      "id": "5fcdef82aff09e000029e431",
      "text": " ソフトウェア開発に例えると、何が何を参照するかを事前に適切に設計することは困難ということ。ならばどうするかというと「不都合が明らかになった時点でリファクタリングする」ということになる。リファクタリングは「今動いている機能を壊さないように書き換える」ことだ。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607331715,
      "updated": 1607331760
    },
    {
      "id": "5fcdef76aff09e000029e3e9",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607331702,
      "updated": 1607331702
    }
  ]
}