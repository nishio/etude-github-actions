{
  "id": "6090ec0ca287e6002291a2aa",
  "title": "Hatena2013-04-24",
  "created": 1366729200,
  "updated": 1366729200,
  "lines": [
    {
      "id": "6090ec30aff09e00003de4bd",
      "text": "Hatena2013-04-24",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4be",
      "text": "code:hatena",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4bf",
      "text": " <body>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4c0",
      "text": " *1366736980*FPGAでライフゲームを作りました",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4c1",
      "text": " <iframe width=\"560\" height=\"315\" src=\"http://www.youtube.com/embed/LGOcRXNXB78?rel=0\" frameborder=\"0\" allowfullscreen></iframe>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4c2",
      "text": " ",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4c3",
      "text": " ** 動画の内容",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4c4",
      "text": " - ランダムに初期化(see <a href='http://ja.wikipedia.org/wiki/%E7%B7%9A%E5%BD%A2%E5%B8%B0%E9%82%84%E3%82%B7%E3%83%95%E3%83%88%E3%83%AC%E3%82%B8%E3%82%B9%E3%82%BF'>線形帰還シフトレジスタ - Wikipedia</a>)",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4c5",
      "text": " - しばらく実行(高速モード：1ステップ3msec。VGA60Hzの画面の更新が17msecなので画面1回更新されるごとに5ステップ進んでいる計算)",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4c6",
      "text": " - 画面をクリア、低速モード(256倍遅い)に移行",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4c7",
      "text": " - Rペントミノを配置するボタンを押す",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4c8",
      "text": " - しばらく走らせる",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4c9",
      "text": " - 高速モードに変える",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4ca",
      "text": " ",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4cb",
      "text": " ** 実装",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4cc",
      "text": " - 読み書き用のアドレスをインクリメントする",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4cd",
      "text": " - 2行+3マス文の323bitのシフトレジスタに読んだデータをpushする(see <a href='http://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%95%E3%83%88%E3%83%AC%E3%82%B8%E3%82%B9%E3%82%BF'>シフトレジスタ - Wikipedia</a>)",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4ce",
      "text": " - シフトレジスタの0, 1, 2, 160, 161, 162, 320, 321, 322の9ビットを束ねてアドレスとし、ライフゲームのルールがハードコードされた512bitのROMから1bit読む",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4cf",
      "text": " - 読んだ値をVRAMに書き込む",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4d0",
      "text": " 各1クロックでできるかな～と思ったけども、画面が流れるバグ(おそらくアドレス計算が間に合わなくて1つずれたところに書き込んだと思われる)が起きたので今は各2クロックで動かしている。",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4d1",
      "text": " ",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4d2",
      "text": " なので今は 1ピクセルあたり8クロック * 160x120ピクセル / 50MHz で画面1回更新するのに3msecということになる。頑張ればもっと縮む可能性がある。",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4d3",
      "text": " ",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4d4",
      "text": " 消費したリソースは、ロジックエレメントが459個(3%)、メモリが57912bit(11%)とのこと。あと9倍くらい余裕があるから、解像度を2倍にしてピクセル数を4倍にするくらい行けそうだけど、この問題をどうやって解決するか： <a href='http://d.hatena.ne.jp/nishiohirokazu/20130420/1366462179'>DE0でFPGAのチップ内蔵RAMをVRAMに使おうとしたら上手く行かなかった日記</a>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4d5",
      "text": " ",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4d6",
      "text": " ** ソースコード",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4d7",
      "text": " Verilog HDL素人が書いたソースコードはこちら： https://github.com/nishio/fpga/blob/master/lifegame.v",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4d8",
      "text": " ",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4d9",
      "text": " ちなみにさっき知ったんだけど、Verilog HDLにもfor文があるみたいですよ。（えっ",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4da",
      "text": " ",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4db",
      "text": " **追記",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4dc",
      "text": " ",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4dd",
      "text": " さすがに酷いので単純なシフトレジスタはfor文を使って書き換えました。512行のルールテーブルは何とかならないかな。",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4de",
      "text": " ",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4df",
      "text": " **追記",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4e0",
      "text": " シフトレジスタの実装について、こんなことしなくても",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4e1",
      "text": " >|verilog|",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4e2",
      "text": " for(i = 0; i < 322; i = i + 1) begin",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4e3",
      "text": " \tbuffer[i + 1] <= buffer[i];",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4e4",
      "text": " end",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4e5",
      "text": " ||<",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4e6",
      "text": " ",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4e7",
      "text": " この1行でいいじゃん、という指摘を頂きました(thanks @natutan!)",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4e8",
      "text": " >|verilog|",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4e9",
      "text": " buffer[1:322] <= buffer[0:321];",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4ea",
      "text": " ||<",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4eb",
      "text": " ",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4ec",
      "text": " たしかに…それができることは知っていたのになぜ思いつかなかったか…。たぶん僕の脳の中ではまだC言語の配列みたいなイメージで捉えられているのだろうなぁ。だから「要素が323個ある配列」を1個ずらすことが「代入文1つでできる」という発想を思いつくことができなかった。",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4ed",
      "text": " </body>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4ee",
      "text": " <comments>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4ef",
      "text": " <comment>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4f0",
      "text": " <username>eldesh</username>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4f1",
      "text": " <body>論理圧縮出来なければ、とりあえず<br><br>always @(posedge rule_clk) begin<br>  case(neighbors)<br>    9'b000_000_111: wdata = 1'b1;<br>    9'b000_001_011: wdata = 1'b1;<br>    9'b000_001_101: wdata = 1'b1;<br>    ...<br><br>    default       : wdata = 1'b0;<br>  endcase<br><br>これだけでも大分短くはなりますね。<br>それと、<br><br>  9'b111_111_0XX: wdata = 1'b0;<br>/* 不要になる<br>  9'b111_111_001: wdata = 1'b0;<br>  9'b111_111_010: wdata = 1'b0;<br>  9'b111_111_011: wdata = 1'b0;<br> */<br><br>みたいなことで頑張れる部分が多少ありそうです。</body>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4f2",
      "text": " <timestamp>1366766870</timestamp>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4f3",
      "text": " </comment>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4f4",
      "text": " <comment>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4f5",
      "text": " <username>nishiohirokazu</username>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4f6",
      "text": " <body>なるほど、確かに0をdefaultにするだけでかなり縮みますね！<br>不定値を使って圧縮するのはそれだけでなかなか難しいパズルになりそうです。</body>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4f7",
      "text": " <timestamp>1366770536</timestamp>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4f8",
      "text": " </comment>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4f9",
      "text": " <comment>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4fa",
      "text": " <username>nishiohirokazu</username>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4fb",
      "text": " <body>最短を目指すと難しいけども、手軽にやるなら1が5個出現した時点で残りのビットと無関係に0、とかでいいのかも。<br>あ、でも0はそもそもdefaultにまとめるから1をまとめることを考えなきゃいけないのか。やっぱり難しいパズルですね。</body>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4fc",
      "text": " <timestamp>1366770921</timestamp>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4fd",
      "text": " </comment>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4fe",
      "text": " <comment>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de4ff",
      "text": " <username>nishiohirokazu</username>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de500",
      "text": " <body>とりあえず周囲に3個ある場合は真ん中が何であるかに関係なく1、をxで表現してみました。85行に縮みました。</body>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de501",
      "text": " <timestamp>1366807734</timestamp>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de502",
      "text": " </comment>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de503",
      "text": " </comments>",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de504",
      "text": "",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec30aff09e00003de505",
      "text": "[はてなダイアリー 2013-04-24 https://nishiohirokazu.hatenadiary.org/archive/2013/04/24]",
      "created": 1366729200,
      "updated": 1366729200,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}