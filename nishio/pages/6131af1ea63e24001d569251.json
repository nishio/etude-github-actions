{
  "id": "6131af1ea63e24001d569251",
  "title": "矢印は明確な関係を表現し壊れなくする方法",
  "created": 1630646048,
  "updated": 1630646147,
  "lines": [
    {
      "id": "6131af1ea63e24001d569251",
      "text": "矢印は明確な関係を表現し壊れなくする方法",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646141
    },
    {
      "id": "6131af1faff09e000015043b",
      "text": ">[nishio https://twitter.com/nishio/status/1433356592620081155]: KJ法などにおける「近くに置く」は、まだ明確になってない「関係」をあいまいに表現する方法で、一方矢印を引く機能は明確になってる関係を表現して、「遠くに動かす」しても消滅しないようにする方法だ。「近くに置く」で表現しただけだと動かしたら壊れてしまう。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646048
    },
    {
      "id": "6131af1faff09e000015043c",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646048
    },
    {
      "id": "6131af1faff09e000015043d",
      "text": ">[nishio https://twitter.com/nishio/status/1433357276169920513]: グループ化は「近くに置く」で表現した関係を壊れにくくする方法だ。一塊として移動したり、畳んで一枚のこざねと同じサイズにしたりできる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646048
    },
    {
      "id": "6131af1faff09e000015043e",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646048
    },
    {
      "id": "6131af1faff09e000015043f",
      "text": ">[nishio https://twitter.com/nishio/status/1433358725931171847]: だからやっぱり「矢印機能」は必要なのかもな。ただしそれは多くの人がイメージしてる「二点間をつなぐもの」とは違う。複数のものの間の関係を表現して、明示的に破壊するまで壊れないもの。グループもその一種といえる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646048
    },
    {
      "id": "6131af1faff09e0000150440",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646048
    },
    {
      "id": "6131af1faff09e0000150441",
      "text": ">[nishio https://twitter.com/nishio/status/1433359690545565696]: だけどもじゃあグループの実装をそのまま増やしていいのかというとそうでもない。今のグループの実装はツリーだから、親は一つ。でも矢印は一つの要素が複数の矢印に参加することが自然に発生する。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646048
    },
    {
      "id": "6131af1faff09e0000150442",
      "text": ">今のグループはツリーだから囲みが交差することはないが、矢印を始点と終点の囲みとすると交差する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646056
    },
    {
      "id": "6131af1faff09e0000150443",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646048
    },
    {
      "id": "6131af1faff09e0000150444",
      "text": ">[nishio https://twitter.com/nishio/status/1433362642429566980]: グループが削除された時、子要素も削除される。グループは子を所持する。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646048
    },
    {
      "id": "6131af1faff09e0000150445",
      "text": ">子要素は0/1個のグループを構成する。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646059
    },
    {
      "id": "6131af1faff09e0000150447",
      "text": ">矢印や囲みは、子要素を「所持」しない。それが削除された時、子要素を削除しない。子要素が削除されて存在理由がなくなったら消滅する(矢印の端点が削除されたり囲みが空になった場合)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646061
    },
    {
      "id": "6131af1faff09e0000150448",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646048
    },
    {
      "id": "6131af1faff09e0000150449",
      "text": ">[nishio https://twitter.com/nishio/status/1433363382942322688]: うん、悪くなさそう。ツリーを構成しているものたちとは基本的な法則やライフサイクルが別物だから、別管理されるのはおかしくない。(最初は矢印のためだけに別管理を導入するのはどうかと思っていた)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646048
    },
    {
      "id": "6131af1faff09e000015044b",
      "text": ">中括弧もこれの仲間だな",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646064
    },
    {
      "id": "6131af1faff09e000015044c",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646048
    },
    {
      "id": "6131af1faff09e000015044d",
      "text": ">[nishio https://twitter.com/nishio/status/1433365166477889539]: つまりはこういうこと",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646048
    },
    {
      "id": "6131af1faff09e000015044e",
      "text": "[https://gyazo.com/4cb105f22986d5d12a04f4bc2190b738]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646089
    },
    {
      "id": "6131af1faff09e0000150450",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646048
    },
    {
      "id": "6131af1faff09e0000150451",
      "text": ">[nishio https://twitter.com/nishio/status/1433366741464141824]: つまりこれは「1つ以上の要素を受け取ってその情報をもとに最前面レイヤーに装飾を発生させる関数」で「要素の管理は要求されない」「要素は消えるかもしれない」だということになるかな。こう割り切ると「矢印の中点に張り付いたこざね」とか「矢印へ引いた矢印」はできなくなる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630646048,
      "updated": 1630646048
    }
  ]
}