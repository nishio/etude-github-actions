{
  "id": "5fa90c5e456fcb0038ed86e2",
  "title": "PAST3J",
  "created": 1604914272,
  "updated": 1604914272,
  "lines": [
    {
      "id": "5fa90c5e456fcb0038ed86e2",
      "text": "PAST3J",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8bed",
      "text": "from [第三回 アルゴリズム実技検定]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8bee",
      "text": "PAST3J",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8bef",
      "text": "\t流れてくる数値が今まで取ったどれよりも大きい時だけ取るエージェントが複数並んでる時に、どの数値を誰が取るか答える問題。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8bf0",
      "text": "\tエージェントごとに「これ以上なら取る」という数値を持っていて、「流れてきた数値xよりも小さい値の最も左のエージェント」を返せば良い。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8bf1",
      "text": "\t\tつまりこれはソート済み配列からの効率良い探索。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8bf2",
      "text": "\t\t二分探索の方法をPythonで調べたら標準ライブラリに[bisect]ってのがあったので初めて使った。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8bf3",
      "text": "code:python",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8bf4",
      "text": " from bisect import bisect_right",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8bf5",
      "text": " N, M = [int(x) for x in input().split()]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8bf6",
      "text": " XS = [int(x) for x in input().split()]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8bf7",
      "text": " ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8bf8",
      "text": " scores = [0] * N",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8bf9",
      "text": " ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8bfa",
      "text": " for x in XS:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8bfb",
      "text": "     # need to nagate to keep asc. order",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8bfc",
      "text": "     # print(\"come\", x)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8bfd",
      "text": "     i = bisect_right(scores, -x)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8bfe",
      "text": "     if i == N:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8bff",
      "text": "         print(-1)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8c00",
      "text": "     else:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8c01",
      "text": "         print(i + 1)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8c02",
      "text": "         scores[i] = -x",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8c03",
      "text": "         # print(scores)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    },
    {
      "id": "5fa90c5faff09e00003f8c04",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1604914272,
      "updated": 1604914272
    }
  ]
}