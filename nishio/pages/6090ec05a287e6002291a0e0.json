{
  "id": "6090ec05a287e6002291a0e0",
  "title": "Hatena2010-07-23",
  "created": 1279810800,
  "updated": 1279810800,
  "lines": [
    {
      "id": "6090ec29aff09e00003d69c6",
      "text": "Hatena2010-07-23",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69c7",
      "text": "code:hatena",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69c8",
      "text": " <body>",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69c9",
      "text": " *1279880210*レバレッジメモ: レガシーコード改善ガイド",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69ca",
      "text": " レガシーコード := テストがないコード",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69cb",
      "text": " ",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69cc",
      "text": " テストを作成するためには対象とするクラスから他のクラスへの影響を把握する必要がある。依存関係を排除しておけばニセのクラスを突っ込んで影響を直接観察できる。",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69cd",
      "text": " ",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69ce",
      "text": " テストをするたびに本番コードを編集するわけには行かない、なのでコードを編集せずにテストに不都合な挙動を変えられる場所が必要である。これをseamという。どのseamも、その挙動を変更するenabling pointを持っている。",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69cf",
      "text": " ",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69d0",
      "text": " 日本語で「接合部」っていうとくっつけることに意識が向きがちだけど「そこで切り離せる」というほうが重要なのだな。",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69d1",
      "text": " ",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69d2",
      "text": " **既存のレガシーコードに機能追加をする方法",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69d3",
      "text": " 1: スプラウトメソッド",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69d4",
      "text": " テストされてない既存のコードに書き足すのではなく、新しいメソッドを作ってそれを呼び出すようにし、その新しいメソッドにテストを書く",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69d5",
      "text": " ",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69d6",
      "text": " 2: ラップメソッド",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69d7",
      "text": " テストされていない既存のメソッドの前か後ろに処理を付け足す場合、テストされていないメソッドの名前を変えて、元の名前で古いメソッドと新しく追加する機能の入ったメソッドを呼び出すようにし、その新しいメソッドをテストする。",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69d8",
      "text": " ",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69d9",
      "text": " **TDD",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69da",
      "text": " -1: 失敗するテストを書く",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69db",
      "text": " -2: コンパイルが通るようにする",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69dc",
      "text": " -3: テストを通過させる。この時既存のコードをなるべく変更しない。「これはFooメソッドとほとんど同じで一部だけ違うから抽象化しよう」と考えずにFooメソッドをコピペして作る。抽象化はリファクタリングなのでテストに通ってから。",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69dd",
      "text": " -4: コードをきれいにする",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69de",
      "text": " -5: 1に戻る",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69df",
      "text": " ",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69e0",
      "text": " **Liscovの置換原則",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69e1",
      "text": " サブクラスYのオブジェクトはいつでもスーパークラスXのオブジェクトとして使えなければならない。さもないとユーザがあるX型の変数に入っているオブジェクトが実際にはY型であることを意識しなければいけないようになってしまう。",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69e2",
      "text": " ",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69e3",
      "text": " **Nullを渡す",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69e4",
      "text": " Javaのような実行時のnullに対するアクセスを察知できる言語なら、テスト用に作るのが面倒なオブジェクトが必要なときに単にnullを渡せばいい。必要なものは必要になったときに例外で教えてくれる。",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69e5",
      "text": " ",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69e6",
      "text": " **影響の調査の仕方",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69e7",
      "text": " 影響スケッチを描く",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69e8",
      "text": " 変数と戻り値が変わる可能性のあるメソッドをまるで囲む。影響を矢印で書く。",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69e9",
      "text": " よく設計されていればこれはシンプルになるはず。",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69ea",
      "text": " ",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69eb",
      "text": " **_",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69ec",
      "text": " 依存性の排除によってカプセル化が壊れるケースがある。たとえばprivateを外すとクラスの中だけ調査していれば依存性を把握できたのが、パッケージ全体を見なければいけなくなったりする。依存性の排除はテストを書きやすくするための手段であり、目的ではない。同様にカプセル化も依存性をおいやすくするための手段であり目的ではない。著者はテストを優先する。",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69ed",
      "text": " ",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69ee",
      "text": " **_",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69ef",
      "text": " サードパーティのライブラリを直接呼んでいる部分はseamにできたはずのところ。サードパーティライブラリに密結合なせいでテストが出来ないとか本末転倒。ラッパーなどを使って疎結合にする。",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69f0",
      "text": " ",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69f1",
      "text": " 後半の具体例は斜め読みできないから今度じっくり読もう。",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69f2",
      "text": " <iframe src=\"http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=AAFFAA&fc1=000000&lc1=0000FF&t=nishiohirokaz-22&o=9&p=8&l=as1&m=amazon&f=ifr&md=1X69VDGQCMF7Z30FM082&asins=4798116831\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69f3",
      "text": " </body>",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69f4",
      "text": "",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d69f5",
      "text": "[はてなダイアリー 2010-07-23 https://nishiohirokazu.hatenadiary.org/archive/2010/07/23]",
      "created": 1279810800,
      "updated": 1279810800,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}