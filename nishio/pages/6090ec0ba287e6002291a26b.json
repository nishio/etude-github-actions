{
  "id": "6090ec0ba287e6002291a26b",
  "title": "Hatena2012-10-12",
  "created": 1349967600,
  "updated": 1349967600,
  "lines": [
    {
      "id": "6090ec2faff09e00003dd212",
      "text": "Hatena2012-10-12",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd213",
      "text": "code:hatena",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd214",
      "text": " <body>",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd215",
      "text": " *1350045654*Pythonでメモリを食い過ぎた時に見直すポイント",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd216",
      "text": " ちょっと複雑なアルゴリズムをPythonで実装してみて、自分の予想以上にメモリを食ってしまったので何が原因なのかプロファイルしてみた。",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd217",
      "text": " ",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd218",
      "text": " ** 辞書を大量に使ってはいけない",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd219",
      "text": " ",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd21a",
      "text": " 指摘されてみれば当たり前のことなんだけども、辞書はハッシュテーブルなのでメモリをたくさん使う。「グラフの頂点ごとに整数→整数のマッピングを持ちたいな」と思って、うっかり辞書を使ってしまったのだが、エントリー数が6個でも 1048バイト×頂点数 のメモリが吹っ飛んでいく。いくらハッシュのアクセスがO(1)だからといって、1048バイトmallocしてスラッシング起こしてんだったら全然安くない。エントリの個数とアクセス頻度によってはO(n)で線形探索したほうがよっぽどよい。",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd21b",
      "text": " ",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd21c",
      "text": " エントリーの個数が5件までならハッシュテーブルではないコンパクトな持ち方をするので280バイト。それでもでかい。",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd21d",
      "text": " ",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd21e",
      "text": " ",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd21f",
      "text": " ** 自作クラスのインスタンスも辞書を持っている",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd220",
      "text": " ",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd221",
      "text": " Cのstructみたいなものだと思ったら大間違いで、オブジェクトのメンバ変数は辞書に格納されている。だから「この頂点クラスは整数を3つ持っているだけだ」と思っていても、さらに辞書の280バイトを支払っている。",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd222",
      "text": " ",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd223",
      "text": " __slots__を使う、という解決策を提案する人もいるかもしれないが次の項目も参照。",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd224",
      "text": " ",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd225",
      "text": " ",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd226",
      "text": " ** そもそもオブジェクトをたくさん作ってはいけない",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd227",
      "text": " ",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd228",
      "text": " そもそも整数オブジェクトって何バイト？",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd229",
      "text": " ",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd22a",
      "text": " 正解は値(long)が8バイト、に加えて型オブジェクトへのポインタ(8バイト)と、参照カウンタ(ssize_t: 8バイト)がついて全部で24バイトだ。",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd22b",
      "text": " ",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd22c",
      "text": " (注: もちろん環境やコンパイルオプションに影響されるのでここでは筆者の環境での例をあげている)",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd22d",
      "text": " ",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd22e",
      "text": " というわけで大量の整数の集まりを、計算の途中で一時的にPythonのオブジェクトとして扱うならまだしも、その形のまま大量に貯めこむのは筋が悪い。標準ライブラリにはarrayやstructといったコンパクトに値を持つためのクラスが用意されているのでそれを使うべき。",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd22f",
      "text": " ",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd230",
      "text": " ",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd231",
      "text": " ** 結論",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd232",
      "text": " ",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd233",
      "text": " オブジェクトは使うな、ベタな配列で値をもて…それって素直にCで書いたほうがよかったんじゃないか？",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd234",
      "text": " </body>",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd235",
      "text": "",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2faff09e00003dd236",
      "text": "[はてなダイアリー 2012-10-12 https://nishiohirokazu.hatenadiary.org/archive/2012/10/12]",
      "created": 1349967600,
      "updated": 1349967600,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}