{
  "id": "6090ebfca287e60022919f21",
  "title": "Hatena2009-01-23",
  "created": 1232636400,
  "updated": 1232636400,
  "lines": [
    {
      "id": "6090ec21aff09e00003ce1fd",
      "text": "Hatena2009-01-23",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce1fe",
      "text": "code:hatena",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce1ff",
      "text": " <body>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce200",
      "text": " *1232662308*What's New In Python3.0 日本語版 ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce201",
      "text": " <a href='http://text.world.coocan.jp/TSNET/?What%27sNewInPython3.0'>What'sNewInPython3.0 - TSNETWiki on TextWorld</a>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce202",
      "text": " >>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce203",
      "text": " 本文はGuido van Rossumの\"What's New In Python 3.0\"( http://docs.python.org/3.0/whatsnew/3.0.html )の全訳です。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce204",
      "text": " <<",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce205",
      "text": " すばらしい(拍手)",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce206",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce207",
      "text": " <hr>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce208",
      "text": " 気になったところはここに書きためていって、ある程度まとまってからフィードバックしようっと。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce209",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce20a",
      "text": " <hr>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce20b",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce20c",
      "text": " >>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce20d",
      "text": " （訳注：原文では『キーワード(keyword)』と書かれているが、『予約語(reserved word)』の誤りと思われる。Pythonでは、キーワードは、引数などを指定する名前（キーワード引数）などに使われ、他の言語のように予約語の意味として使われることはほとんどない）",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce20e",
      "text": " <<",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce20f",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce210",
      "text": " 「誤り」ってのは言い過ぎかと。単語の定義はReference Manualを参照するのが筋。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce211",
      "text": " http://docs.python.org/reference/lexical_analysis.html#identifiers-and-keywords",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce212",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce213",
      "text": " >>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce214",
      "text": " The following identifiers are used as reserved words, or keywords of the language",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce215",
      "text": " <<",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce216",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce217",
      "text": " というわけでPythonでも「予約語」と「キーワード」は同じ意味ですよと。見出し自体Identifiers and Keywordsだし。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce218",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce219",
      "text": " ただもちろん「キーワード引数」にも「キーワード」が使われていて混乱の元なので予約語の意味の「キーワード」は「予約語」と訳してしまっていいかなと思います。もしくは「キーワード(予約語)」か「予約語(キーワード)」か。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce21a",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce21b",
      "text": " >>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce21c",
      "text": " 『ロング整数』のreprでは、後ろに'L'をつけません。従って、無条件に、そのキャラクタを取り除くコードは代わりに最終桁を切り落としてしまうでしょう。（訳注：reprはrepr関数での出力を意味するとともに、オブジェクトの文字表現を意味する。repr = representation)",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce21d",
      "text": " <<",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce21e",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce21f",
      "text": " 要するに「longの文字列表現はもはや最後にLがつかないので、repr(x)[:-1]なんかで最後の文字を(Lかどうかチェックもせずに)取り除いているようなコードは1の位が欠けた表示になってしまいますよ」ということ。最後のLを取り除きたいならrepr(x).rstrip(\"L\")するべきなんだけど、そうしてないケースも多いんだろうな。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce220",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce221",
      "text": " あ「strを使え」と書いてあるのは言葉足らずだけどPython3.0でstrを使えという意味ではなくて、2.*でもstrを使えばLの付いていない文字列が得られますよ、という意味。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce222",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce223",
      "text": " <hr>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce224",
      "text": " >>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce225",
      "text": " 特に呼び出した関数に副作用を引き起こすmap関数の使用は、邪道です。正しい変換は、普通のループを使用することです（どうせリストを作成するだけ無駄でしょうから）",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce226",
      "text": " <<",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce227",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce228",
      "text": " えっと、原文は",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce229",
      "text": " >>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce22a",
      "text": " Particularly tricky is map() invoked for the side effects of the function; the correct transformation is to use a regular for loop (since creating a list would just be wasteful).",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce22b",
      "text": " <<",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce22c",
      "text": " なので「呼び出した関数に副作用を引き起こすmap関数の使用」だと誤訳ですね。「関数の副作用を引き起こすためにmapを使うこと」なわけだけども、読者が「副作用」とは何なのかをわかっていないと伝わらないので英語の原文自体があんまりフレンドリーじゃないよね。ようするにmap(print, [1, 2, 3])なんて書き方はトリッキーなので素直に",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce22d",
      "text": " >|python|",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce22e",
      "text": " for x in [1, 2, 3]:",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce22f",
      "text": "     print(x)",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce230",
      "text": " ||<",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce231",
      "text": " と書いた方がいいよというお話。前者では一時的に[None, None, None]というリストが生成されることになるので無駄だし。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce232",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce233",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce234",
      "text": " とここまでは原文にかかれている説明だけども論点がおかしいよね。副作用がある関数を使うことと、結果として作られるリストが無駄ということは独立な話。注意喚起すべきなのは2.*では上のmapを使うコードとforを使うコードは同じ動きをするけども3.0ではそうではないってところじゃないだろうか。つまり、mapがイテレータを返すようになったことで、関数の評価が結果が必要とされるまで遅延するようになったわけだけど、上のトリッキーな書き方をしているコードではmapの結果を必要としないので本来起きるべきだった副作用がまるっと抜けたまま走り続けてしまう。副作用があるかないかを判定しようとすると実装に大幅に手を入れないと行けないからめんどくさいし、そもそもmapをそんな目的に使うのは嫌いなので「トリッキーな書き方だからダメなんだ」ということにしたいわけですね。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce235",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce236",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce237",
      "text": " などとぐだぐだ言いつつ、僕が訳すのならこう書くかな：",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce238",
      "text": " >>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce239",
      "text": " 特にトリッキーなのはmap()を副作用のある関数の副作用を引き起こすために使うことです。これは普通のfor文に変えるべきです。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce23a",
      "text": " <<",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce23b",
      "text": " 僕が訳すと「原文が悪い」とか「これじゃわかりにくいからコード例を出すべきだ」とか言い出して出来上がりが別物になってしまうのが問題点だ。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce23c",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce23d",
      "text": " <hr>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce23e",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce23f",
      "text": " >>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce240",
      "text": " 『!=』は、『==』がNotImplemented?を返さない限り、『==』の反対を返すようになりました。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce241",
      "text": " <<",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce242",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce243",
      "text": " これ「NotImplemented例外を投げない限り」だよね。返したらTrueとみなされるので!=はFalseになってしまう、と思ったけど違った。比較演算子がNotImplementedを返した場合は比較方法が定義されていないって意味になるんだな。NotImplementedErrorと紛らわしいけど全然別物なので要注意。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce244",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce245",
      "text": " >|python|",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce246",
      "text": " \"\"\"                                                                                                               ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce247",
      "text": " >>> Return() != Return()                                                                                          ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce248",
      "text": " True                                                                                                              ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce249",
      "text": " >>> ReturnError() != ReturnError()                                                                                ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce24a",
      "text": " False                                                                                                             ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce24b",
      "text": " >>> Raise() != Raise()                                                                                            ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce24c",
      "text": " Traceback (most recent call last):                                                                                ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce24d",
      "text": "     ...                                                                                                           ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce24e",
      "text": " NotImplementedError                                                                                               ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce24f",
      "text": " \"\"\"",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce250",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce251",
      "text": " class Return(object):",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce252",
      "text": "     def __eq__(self, v):",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce253",
      "text": "         return NotImplemented",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce254",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce255",
      "text": " class ReturnError(object):",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce256",
      "text": "     def __eq__(self, v):",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce257",
      "text": "         return NotImplementedError",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce258",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce259",
      "text": " class Raise(object):",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce25a",
      "text": "     def __eq__(self, v):",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce25b",
      "text": "         raise NotImplementedError",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce25c",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce25d",
      "text": " def _test():",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce25e",
      "text": "     import doctest",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce25f",
      "text": "     doctest.testmod()",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce260",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce261",
      "text": " _test()",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce262",
      "text": " ||<",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce263",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce264",
      "text": " <hr>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce265",
      "text": " 「古いprint文の特殊な文法は廃止され、print関数（とキーワード引数）に置き換えられました。例：」の下の例に原文にない空白が入っているのはもしかしてそのまま書くとWiki記法に引っかかるからだろうか。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce266",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce267",
      "text": " <hr>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce268",
      "text": " >>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce269",
      "text": " sorted組み込み関数とlist.sortメソッドは、もはや『cmp』を引数に取ることはできません。代わりに『key』という名称のキーワード引数に（比較関数を）渡します。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce26a",
      "text": " <<",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce26b",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce26c",
      "text": " おっと「『key』という名称のキーワード引数に（比較関数を）渡します。」は蛇足。<a href='http://labs.cybozu.co.jp/blog/nishio/2007/05/python24.html'>西尾泰和のブログ @ Cybozu Labs: Python2.4以降での高速なソート</a>を参照。簡単に説明すると「比較関数を渡すことでソート方法をカスタマイズ」という発想自体があんまり計算量的によろしくないものなので「ソートするべき値のリストを作る関数」を渡す方針(<a href='http://en.wikipedia.org/wiki/Schwartzian_transform'>Schwartzian transform - Wikipedia, the free encyclopedia</a>)に変更したということです。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce26d",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce26e",
      "text": " 例を挙げると、ソートすべきリストが大きいときには大文字小文字区別せずにソートするのにxs.sort(cmp=lambda x, y: cmp(x.lower(), y.lower())って書くんじゃなくてxs.sort(key=lambda x:x.lower())やそれと同じ働きのxs.sort(key=str.lower)を使った方が桁違いに速いです。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce26f",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce270",
      "text": " <hr>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce271",
      "text": " >>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce272",
      "text": " すべてのテキストはUnicodeです。しかしながら、エンコードされたUnicodeはバイナリデータとして表現されます。（訳注：PythonはUnicodeをUTF-8の形で扱う）",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce273",
      "text": " <<",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce274",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce275",
      "text": " ええと。UnicodeをUTF-8の形で扱うって…",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce276",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce277",
      "text": " http://svn.python.org/projects/python/trunk/Include/unicodeobject.h",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce278",
      "text": " >|c|",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce279",
      "text": " /* Setting Py_UNICODE_WIDE enables UCS-4 storage.  Otherwise, Unicode",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce27a",
      "text": "    strings are stored as UCS-2 (with limited support for UTF-16) */",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce27b",
      "text": " ||<",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce27c",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce27d",
      "text": " んー、やっぱりそうだよなぁ。UTF-8なんかにするはずがないよなぁ。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce27e",
      "text": " 文字コードの話はめんどうなのであんまり言及したくないのだけどもUTF-8はバイト列なんだからbytesであって、ここで説明されているユニコードのテキストとは互換性がなく結合もできない型のはず。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce27f",
      "text": " A: ユニコードの文字列, B: UTF-8のバイト列, C: asciiのバイト列 という4つのデータがあったときに、site.pyに書かれている「バイト列を自動的にユニコードに変換するときのエンコーディング」がデフォルトのasciiだと、A + Cが問題なく動いて、A + Bも実質ascii文字だけ使っている文化圏では問題なく動く。だけどそこに日本語の文字とかが入ってきたらasciiの範囲にないバイトが含まれる可能性があってにっくきUnicodeDecodeErrorが出てしまう。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce280",
      "text": " >|python|",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce281",
      "text": " >>> u\"\" + \"あ\"",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce282",
      "text": " Traceback (most recent call last):",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce283",
      "text": "   File \"<stdin>\", line 1, in <module>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce284",
      "text": " UnicodeDecodeError: 'ascii' codec can't decode byte 0xe3 in position 0: ordinal not in range(128)",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce285",
      "text": " ||<",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce286",
      "text": " 「ユニコードの文字列とUTF-8(など)のバイト列は別物なのに混同されがちでそのまま結合するコードが書かれやすく、それが自動的に変換されるためエラーにならず、さらにascii圏では正しい挙動をしているように見える」というのが諸悪の根源なので、自動的に変換しないようにしたのが今回の変更。間違えてユニコード文字列にUTF-8バイト列を結合するようなコードを書くとTypeErrorですぐわかる。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce287",
      "text": " >|python|",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce288",
      "text": " >>> \"\" + \"あ\".encode(\"utf-8\")",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce289",
      "text": " Traceback (most recent call last):",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce28a",
      "text": "   File \"<stdin>\", line 1, in <module>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce28b",
      "text": " TypeError: Can't convert 'bytes' object to str implicitly",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce28c",
      "text": " ||<",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce28d",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce28e",
      "text": " <hr>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce28f",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce290",
      "text": " >>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce291",
      "text": " Pythonの2.xのモジュールに共通のパターンは、例えばpickleモジュールとcPickleモジュールのように、pure Pythonで実装されたモジュールとともに、オプションとして高速バージョンのCで実装された拡張がある、ということです。このパターンは、高速バージョンを導入しpure Python バージョンに頼る、これらのモジュールを使用するユーザにとって負担になります。Python 3.0では、高速バージョンはpure Python バージョンの実装の詳細とみなされます。高速バージョンを導入し、そしてpure Pythonのバージョンに頼りたい時は、ユーザはいつも標準バージョンを導入すべきです。pickleモジュールとcPickleモジュールのペアは、この処理を受けました。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce292",
      "text": " <<",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce293",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce294",
      "text": " ええと。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce295",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce296",
      "text": " >>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce297",
      "text": " A common pattern in Python 2.x is to have one version of a module implemented in pure Python, with an optional accelerated version implemented as a C extension; for example, pickle and cPickle. This places the burden of importing the accelerated version and falling back on the pure Python version on each user of these modules. In Python 3.0, the accelerated versions are considered implementation details of the pure Python versions. Users should always import the standard version, which attempts to import the accelerated version and falls back to the pure Python version.",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce298",
      "text": " <<",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce299",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce29a",
      "text": " これは：",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce29b",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce29c",
      "text": " Python2.xではpickleとcPickleのように「pure Pythonで実装されたモジュールがあり、環境によってはC拡張として実装された高速化版もある」というパターンがよくありました。でもこれでは「高速化版を使いたいけど、使えなかったらpure Python版を使う」というユーザにいちいちそのためのコードを書かせることになってしまいます。Python 3.0では、高速化版の存在はユーザから隠すべき実装の詳細と考えられています。ユーザはいつでも標準バージョンをインポートするべきです。標準バージョンは内部で高速化バージョンのインポートを試み、インポートできない場合はpure Python版を使います。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce29d",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce29e",
      "text": " ってこと。cPickleとpickleはすでにそういう変更をうけていて、profileはPython3.1でそうなる予定、StringIOももうioモジュールのクラスになっている、ということ。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce29f",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2a0",
      "text": " 「In Python 3.0, the accelerated versions are considered implementation details of the pure Python versions.」っておかしいよね。実装の一部としてC拡張を含んでいる時点でそれはpure Python版とは呼べない。原文が間違っている(また言ってる)",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2a1",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2a2",
      "text": " <hr>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2a3",
      "text": " >>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2a4",
      "text": " 削除の理由は、string.lettersやその仲間がローカル依存の動作を持っていたからです。そしてそれは、そのように魅力的に名付けられたグローバル「定数」のための悪いアイデアです)",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2a5",
      "text": " <<",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2a6",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2a7",
      "text": " globalに釣られたのかもしれないけどロケールをローカルに変えてしまうのはやり過ぎかと思う。<a href='http://e-words.jp/w/E383ADE382B1E383BCE383AB.html'>ロケールとは 【locale】 - 意味・解説 ： IT用語辞典</a>を参照。ここで言われているのは、たとえはlower_lettersって定数は「小文字だな」と思うわけだけど、全角「ｃ」は小文字？キリル文字の小文字である「н」は入れるべきですか？ギリシャ文字の「π」は？っていう問題。だからasciiって名前に含まれるように変更されたわけです。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2a8",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2a9",
      "text": " <hr>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2aa",
      "text": " >>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2ab",
      "text": " この場合、主な例外は、二次例外の__cause__属性に格納されています。未処理の例外が__cause__属性と__context__属性の連鎖を渡り歩き、(渡り歩いている連鎖のコンポーネント毎に)分離したトレースバックを出力したときに、最初に最上位の例外を伴ってトレースバックが出力されます",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2ac",
      "text": " <<",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2ad",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2ae",
      "text": " >>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2af",
      "text": " In this case, the primary exception is stored on the __cause__ attribute of the secondary exception. The traceback printed when an unhandled exception occurs walks the chain of __cause__ and __context__ attributes and prints a separate traceback for each component of the chain, with the primary exception at the top.",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2b0",
      "text": " <<",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2b1",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2b2",
      "text": " 例外(以下: 一時例外)をキャッチしてexcept節で処理している最中に更に例外がうっかり発生してしまった場合には二つ目の例外(以下: 二次例外)の__context__属性に、自分で明示的に例外を投げ直したときには__cause__属性に最初の例外が入るわけだけど：",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2b3",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2b4",
      "text": " 処理されない例外が起こったときに表示されるトレースバックは、__cause__や__context__の連鎖をたどっていって、連鎖のコンポーネントごとに分かれたトレースバックを、一時例外が上になるように表示します。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2b5",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2b6",
      "text": " ということ。主語がトレースバックなのは変だなぁ。これって「The traceback printed when an unhandled exception occurs」が主語で「walks」と「prints」が動詞の「SVO and VO 副詞」だという理解であってますかね。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2b7",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2b8",
      "text": " 処理されない例外が起こったときには、__cause__や__context__の連鎖をたどっていって、連鎖のコンポーネントごとに分かれたトレースバックを、一時例外が上になるように表示します。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2b9",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2ba",
      "text": " にしたほうが自然かな。日本語らしく主語が曖昧です(ぇ)",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2bb",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2bc",
      "text": " *1232697188*家事",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2bd",
      "text": " <del>携帯がなくなったかもしれない。月曜日に本社に行く時にはあった。普段通りの行動をしていたら家のどこかにあるはずなんだけど、よく考えたら帰りに錦糸町で自転車を買って乗って帰ったので普段通りとは言えない。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2be",
      "text": " - □ ドコモショップに行って止めてもらう",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2bf",
      "text": " - □ 警察に行って紛失届を出す？</del>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2c0",
      "text": " ジャケットのポケットにあった！",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2c1",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2c2",
      "text": " - ■ ネットプリントの方法を調べる",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2c3",
      "text": " -- ■ 書類をプリントアウトする",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2c4",
      "text": " - ■ 佐川急便で着払いで送る方法を調べる",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2c5",
      "text": " -- <del>□</del> 梱包してコンビニに持っていく",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2c6",
      "text": " -- セブンイレブンはクロネコヤマトだけ。ミニストップとサンクスKはゆうパック。どこへ行けば受け取ってもらえるんだ？<a href='http://map.e-map.co.jp/standard/12214010/'>佐川急便 - 最寄店検索 -</a>。ふむ、コンビニじゃなくて酒屋だの青果店だのが多いんだ。<a href=\"http://gyazo.com/fbf9ed11b6580db4622fa8c7a2a69111.png\">町の酒屋</a>って感じだ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2c7",
      "text": " - □ 病院に電話して予約を取る",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2c8",
      "text": " ",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2c9",
      "text": " <hr>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2ca",
      "text": " かばんとか床とか探しまわって見つからないと思っていたけどジャケットのポケットは探していなかった。ハンガーにかけたときにジーンズのポケットから落ちたかもしれないと思ってクローゼットの床を探しているときに気がついた。",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2cb",
      "text": " </body>",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2cc",
      "text": "",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec21aff09e00003ce2cd",
      "text": "[はてなダイアリー 2009-01-23 https://nishiohirokazu.hatenadiary.org/archive/2009/01/23]",
      "created": 1232636400,
      "updated": 1232636400,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}