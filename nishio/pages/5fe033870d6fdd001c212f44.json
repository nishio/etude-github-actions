{
  "id": "5fe033870d6fdd001c212f44",
  "title": "Sparse Table",
  "created": 1608528846,
  "updated": 1608625212,
  "lines": [
    {
      "id": "5fe033870d6fdd001c212f44",
      "text": "Sparse Table",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528846,
      "updated": 1608528846
    },
    {
      "id": "5fe03427aff09e000015f2e9",
      "text": "長さNの静的な値の列が与えられた時に、前処理O(NlogN)で、その列の上の区間に対する演算がO(1)で計算できるようになるデータ構造",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528935,
      "updated": 1608528935
    },
    {
      "id": "5fe03427aff09e000015f2ea",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528935,
      "updated": 1608528935
    },
    {
      "id": "5fe03434aff09e0000d79b62",
      "text": "使える演算は具体的にはminなど、argminもOK",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528949,
      "updated": 1608536231
    },
    {
      "id": "5fe033ceaff09e0000bfc15e",
      "text": "\t[交叉半束]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528846,
      "updated": 1608528966
    },
    {
      "id": "5fe03456aff09e000015f2ec",
      "text": "\t　[結合法則]: [$ (a * b) * c = a * (b * c)]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528982,
      "updated": 1608529000
    },
    {
      "id": "5fe03447aff09e000015f2eb",
      "text": "\t\t[交換法則]: [$ a * b = b * a]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528967,
      "updated": 1608529009
    },
    {
      "id": "5fe033ceaff09e0000bfc15f",
      "text": "\t\t[冪等性]: [$ a * a = a]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528846,
      "updated": 1608529072
    },
    {
      "id": "5fe034b2aff09e000015f2ed",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608529074,
      "updated": 1608529075
    },
    {
      "id": "5fe05062aff09e000097ab24",
      "text": "構築O(N log N)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608536163,
      "updated": 1608536259
    },
    {
      "id": "5fe05063aff09e000097ab2b",
      "text": " 各点から2ベキの長さの区間のminを計算",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608536164,
      "updated": 1608536259
    },
    {
      "id": "5fe05063aff09e000097ab2c",
      "text": " 2^kの長さの区間は半分の長さの区間2つから定数オーダーで計算可能なので小さい方からDPする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608536164,
      "updated": 1608536259
    },
    {
      "id": "5fe050c4aff09e000097ab3a",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608536261,
      "updated": 1608536261
    },
    {
      "id": "5fe05063aff09e000097ab2d",
      "text": "クエリー",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608536164,
      "updated": 1608536259
    },
    {
      "id": "5fe05063aff09e000097ab2e",
      "text": " クエリー区間の長さより小さい最大の長さの計算済み区間を2つ使ってクエリ区間を覆う",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608536164,
      "updated": 1608536259
    },
    {
      "id": "5fe05063aff09e000097ab2f",
      "text": "　例えば1〜7の区間に対して1〜4と4〜7で覆う",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608536164,
      "updated": 1608536259
    },
    {
      "id": "5fe05063aff09e000097ab30",
      "text": "　クエリ区間の最小値は2つのどちらかの区間での最小値",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608536164,
      "updated": 1608536259
    },
    {
      "id": "5fe05063aff09e000097ab31",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608536164,
      "updated": 1608536164
    },
    {
      "id": "5fe05063aff09e000097ab32",
      "text": "列が更新される時は[セグメント木]を使う",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608536164,
      "updated": 1608536263
    },
    {
      "id": "5fe05063aff09e000097ab33",
      "text": "\t[スパーステーブルとセグメント木]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608536164,
      "updated": 1608536312
    },
    {
      "id": "5fe050d7aff09e000097ab3b",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608536279,
      "updated": 1608536279
    },
    {
      "id": "5fe1ab93aff09e0000f3b686",
      "text": "木の[最小共通祖先]を[オイラーツアー]+[Range Minimum Query]で求める場合に。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608625044,
      "updated": 1608625204
    },
    {
      "id": "5fe1ac34aff09e0000f3b688",
      "text": "\t[最小共通祖先 [いかたこのたこつぼ] https://ikatakos.com/pot/programming_algorithm/graph_theory/lowest_common_ancestor]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608625204,
      "updated": 1608625212
    },
    {
      "id": "5fe1ab93aff09e0000f3b687",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608625044,
      "updated": 1608625044
    },
    {
      "id": "5fe05063aff09e000097ab34",
      "text": "[スパーステーブル(Sparse-Table) | Luzhiled’s memo https://ei1333.github.io/luzhiled/snippets/structure/sparse-table.html]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608536164,
      "updated": 1608536164
    },
    {
      "id": "5fe05084aff09e000097ab38",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608536196,
      "updated": 1608536196
    },
    {
      "id": "5fe05062aff09e000097ab27",
      "text": "2次元に拡張できる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608536163,
      "updated": 1608536187
    },
    {
      "id": "5fe03404aff09e0000bfc164",
      "text": "\t[競技プログラミングにおけるSparse Table問題まとめ - はまやんはまやんはまやん https://www.hamayanhamayan.com/entry/2018/01/03/035508]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528900,
      "updated": 1608536193
    },
    {
      "id": "5fe033ceaff09e0000bfc160",
      "text": " [2D Sparse Table]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528846,
      "updated": 1608536191
    },
    {
      "id": "5fe033eaaff09e0000bfc163",
      "text": " \t[2D Range Minimum Query]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528875,
      "updated": 1608536191
    },
    {
      "id": "5fe033d0aff09e0000bfc162",
      "text": " \t\t[2D Range Minimum Query in O(1) - Codeforces http://codeforces.com/blog/entry/45485]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528848,
      "updated": 1608536191
    },
    {
      "id": "5fe033ceaff09e0000bfc161",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608528847,
      "updated": 1608528847
    },
    {
      "id": "5fe0515eaff09e000097ab3f",
      "text": "[スパーステーブル]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608536415,
      "updated": 1608536417
    },
    {
      "id": "5fe0515faff09e000097ab40",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608536415,
      "updated": 1608536415
    }
  ]
}