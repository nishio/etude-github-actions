{
  "id": "5fe3028fef796c001c5c56f9",
  "title": "ヒープのK番目の値を更新したい",
  "created": 1608712848,
  "updated": 1608712979,
  "lines": [
    {
      "id": "5fe3028fef796c001c5c56f9",
      "text": "ヒープのK番目の値を更新したい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608712848,
      "updated": 1608712979
    },
    {
      "id": "5fe3028faff09e00006371af",
      "text": "from [heapq]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608712848,
      "updated": 1608712848
    },
    {
      "id": "5fe3028faff09e00006371b0",
      "text": "ヒープのK番目の値を更新したい。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608712848,
      "updated": 1608712848
    },
    {
      "id": "5fe3028faff09e00006371b1",
      "text": "→書き換えてから_siftdownでO(logN)でヒープの状態に戻せる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608712848,
      "updated": 1608712848
    },
    {
      "id": "5fe3028faff09e00006371b2",
      "text": "　ただしこのKはソート順でのK番目ではないので使い勝手が悪い。任意の値を更新したい場合にはその値がどこに入ってるのかを見つけるのにO(N)掛かってしまう",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608712848,
      "updated": 1608712848
    },
    {
      "id": "5fe3028faff09e00006371b3",
      "text": "　\tsee [heapq+dict]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608712848,
      "updated": 1608712848
    },
    {
      "id": "5fe3028faff09e00006371b4",
      "text": "　例えば「2番目に大きい値を更新」とかならK=1,2の2箇所の比較で決まるので使えなくもないかな？という感じ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608712848,
      "updated": 1608712848
    },
    {
      "id": "5fe3028faff09e00006371b5",
      "text": "code:python",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608712848,
      "updated": 1608712848
    },
    {
      "id": "5fe3028faff09e00006371b6",
      "text": " from heapq import _siftdown",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608712848,
      "updated": 1608712848
    },
    {
      "id": "5fe3028faff09e00006371b7",
      "text": " ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608712848,
      "updated": 1608712848
    },
    {
      "id": "5fe3028faff09e00006371b8",
      "text": " queue = [1, 2, 3]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608712848,
      "updated": 1608712848
    },
    {
      "id": "5fe3028faff09e00006371b9",
      "text": " K = 1",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608712848,
      "updated": 1608712848
    },
    {
      "id": "5fe3028faff09e00006371ba",
      "text": " queue[K] = -1",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608712848,
      "updated": 1608712848
    },
    {
      "id": "5fe3028faff09e00006371bb",
      "text": " _siftdown(queue, 0, K)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608712848,
      "updated": 1608712848
    },
    {
      "id": "5fe3028faff09e00006371bc",
      "text": " print(queue)  # => [-1, 1, 3]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608712848,
      "updated": 1608712848
    },
    {
      "id": "5fe3028faff09e00006371bd",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608712848,
      "updated": 1608712848
    }
  ]
}