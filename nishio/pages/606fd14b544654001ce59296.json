{
  "id": "606fd14b544654001ce59296",
  "title": "負の可変性",
  "created": 1617940816,
  "updated": 1617947863,
  "lines": [
    {
      "id": "606fd14b544654001ce59296",
      "text": "負の可変性",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617940816,
      "updated": 1617940821
    },
    {
      "id": "606fecabaff09e000085e21c",
      "text": "書籍「[マルチパラダイムデザイン]」の紹介を聞いていて面白そうな概念だと思ったので調べてみた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617947819,
      "updated": 1617947863
    },
    {
      "id": "606fd1aaaff09e0000bb9ef9",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617940906,
      "updated": 1617944658
    },
    {
      "id": "606fd25baff09e0000bb9eff",
      "text": "[第3章 可変性分析 · Issue #3 · phpmentors-jp/mpdosaka https://github.com/phpmentors-jp/mpdosaka/issues/3]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617941084,
      "updated": 1617941084
    },
    {
      "id": "606fd19daff09e0000bb9ef8",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617940894,
      "updated": 1617940894
    },
    {
      "id": "606fd1fdaff09e0000bb9efc",
      "text": "[PHP Mentors — Debasish Ghosh氏のブログ記事「ドメイン駆動設計：可変性の管理」を翻訳しました https://phpmentors.jp/post/129261828893/ddd-managing-variability]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617940990,
      "updated": 1617940990
    },
    {
      "id": "606fd1fdaff09e0000bb9efd",
      "text": "\t2006年9月18日",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617940990,
      "updated": 1617941699
    },
    {
      "id": "606fd4c2aff09e0000bb9f02",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617941699,
      "updated": 1617941699
    },
    {
      "id": "606fd27caff09e0000bb9f00",
      "text": "[マルチパラダイムデザイン https://www.ogis-ri.co.jp/otc/hiroba/technical/MPD/]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617941117,
      "updated": 1617941119
    },
    {
      "id": "606fd703aff09e0000bb9f05",
      "text": "\t2000年8月 \"Multi-Paradigm Design and Implementation in C++\" ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617942275,
      "updated": 1617942294
    },
    {
      "id": "606fd70daff09e0000bb9f06",
      "text": "\t\t>今回の記事に関連して，著者がオブジェクト指向シンポジューム2000(ソフトウェア工学研究会主催，2000年8月開催)などで使用してきたプレゼンテーション資料\"Multi-Paradigm Design and Implementation in C++\"の 翻訳 を許可してもらいました．この資料は，(著者自身が作成しているので当然といえば当然ですが(^^;;，) マルチパラダイムデザインの全容をコンパクトにうまく説明しています．",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617942286,
      "updated": 1617942443
    },
    {
      "id": "606fd4daaff09e0000bb9f03",
      "text": "\t　　著者James O. Coplienによる資料の和訳",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617941722,
      "updated": 1617942450
    },
    {
      "id": "606fd59faff09e000085e20d",
      "text": "　\t　2005年時点でドメイン消滅",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617941920,
      "updated": 1617942450
    },
    {
      "id": "606fd602aff09e0000bb9f04",
      "text": "　\t　[WebArchive https://web.archive.org/web/20020910055641/http://www.rcnchicago.com/~jcoplien/Nippon/MPD/ThesisIntroduction_jpn.html]と同一のものが[こちら https://sites.google.com/a/gertrudandcope.com/info/Publications/Mpd/ThesisIntroduction-jpn]にある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617942018,
      "updated": 1617942452
    },
    {
      "id": "606fdb79aff09e0000bb9f0b",
      "text": "　\t　\t>最も多い抽象とは「階層」である．システムがレイヤ構造や階層構造に分割できるほど単純な場合には，これは適切である．オブジェクトパラダイムでは，このように考えて，クラス階層と実装階層の両方を構築しようとする徴候がある．しかし，現代のシステムに内在する複雑な構造は，本質的に階層構造に帰すことができるというものでもない．まず，スケールの問題がある．コード行が100のオーダーかもしれないし，1000，あるいは，1億，10億，100億のオーダーかもしれない．このようなスケールのものを単純な階層構造で適切に分析することはできない．",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617943418,
      "updated": 1617943427
    },
    {
      "id": "606fd62baff09e000085e20e",
      "text": "\t　　リンク先のPDFはパスワードが掛かっている",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617942060,
      "updated": 1617942454
    },
    {
      "id": "606fd640aff09e000085e20f",
      "text": "　　時期と著者からするとこれかな [PDF https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.84.7630&rep=rep1&type=pdf]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617942081,
      "updated": 1617942325
    },
    {
      "id": "606fd593aff09e000085e20c",
      "text": "　　\t博士論文みたいだから一般向け図書よりは厳密な書き方されてそう",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617941908,
      "updated": 1617943524
    },
    {
      "id": "606fdc18aff09e000085e212",
      "text": "　　\t書籍が1998年、こちらが2000年",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617943577,
      "updated": 1617943606
    },
    {
      "id": "606fddedaff09e0000bb9f0c",
      "text": "\t\t\t>Chapter 2 Commonality Analysis",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617944046,
      "updated": 1617944046
    },
    {
      "id": "606fd742aff09e000085e210",
      "text": "\t\t\t>3.3 Positive and Negative Variability",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617942339,
      "updated": 1617942466
    },
    {
      "id": "606fd78aaff09e0000bb9f07",
      "text": "　　　先に共通点を見出す分析をしてから違いを見る。例えばメッセージはヘッダーとボディを持ってるなーと思う。これが共通性。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617942410,
      "updated": 1617944912
    },
    {
      "id": "606fe152aff09e000085e214",
      "text": "　　　　だけど詳しく分析したら「ACKメッセージはボディを持ってないじゃん！」とかなる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617944914,
      "updated": 1617944945
    },
    {
      "id": "606fe170aff09e000085e215",
      "text": "　　　　こういう共通性を壊す可変性が負の可変性",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617944945,
      "updated": 1617944973
    },
    {
      "id": "606fe18daff09e000085e216",
      "text": "　　　　この例だと「ACKは長さ0のボディを持つ」とすることで負の可変性を消すことができるが、それはよくない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617944973,
      "updated": 1617945075
    },
    {
      "id": "606fe20baff09e000085e217",
      "text": "　　　　　「ACKのチェックサムは？」",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617945099,
      "updated": 1617945116
    },
    {
      "id": "606fe225aff09e000085e218",
      "text": "　　　　　必要のないインターフェースを持つことは認知的負荷を増やす",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617945125,
      "updated": 1617945152
    },
    {
      "id": "606fe240aff09e000085e219",
      "text": "　　　　　時間やメモリ消費にもオーバーヘッドが発生しうる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617945152,
      "updated": 1617945195
    },
    {
      "id": "606fe018aff09e000085e213",
      "text": "　　　　小さい負の可変性はifdefで扱えるが、スケールしないので、ドメインを分割することを考える",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617944601,
      "updated": 1617945451
    },
    {
      "id": "606fe054aff09e0000bb9f0d",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617944661,
      "updated": 1617944661
    },
    {
      "id": "606fe054aff09e0000bb9f0e",
      "text": ">>[マルチパラダイムデザイン]の負の可変性と[リスコフ置換原則]はセットで考えてもいいのかも。負の可変性をクラス継承で考えたときに、リスコフ置換原則が破られているはず。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617944661,
      "updated": 1617944661
    },
    {
      "id": "606fe054aff09e0000bb9f0f",
      "text": ">負の可変性の現れは、新たなドメイン（さらにいえば存在）の創造のチャンスなんだと思います。[https://github.com/phpmentors-jp/mpdosaka/issues/3#issuecomment-84257234]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617944661,
      "updated": 1617944661
    },
    {
      "id": "606fe054aff09e0000bb9f10",
      "text": "https://twitter.com/iteman/status/1171097073082486785",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617944661,
      "updated": 1617944661
    },
    {
      "id": "606fe054aff09e0000bb9f11",
      "text": "\tp.89に書いてある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617944661,
      "updated": 1617944723
    },
    {
      "id": "606fe05baff09e0000bb9f13",
      "text": "\t\t>Positive variability is the preferred mode of design under multi-paradigm design because it most often leads to design support by additional formalisms. For example, one can use the Liskov substitutability principle when applying inheritance to express positive variablity. Multi-paradigm accommodates negative variability as well, often by appealing to existing techniques such as inheritance with cancellation.",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617944667,
      "updated": 1617944713
    },
    {
      "id": "606fe059aff09e0000bb9f12",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617944666,
      "updated": 1617944666
    },
    {
      "id": "606fe88caff09e000085e21a",
      "text": ">テンプレート, `#ifdef`というのは，本来オブジェクト指向言語要素ではありません．しかし，C++プログラマはこれを使いこなしている，もしくは使いこなすことが求められます．たとえば，どのような場合に通常のクラスを定義して，どのような場合にテンプレートを使えばいいのでしょうか．",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617946765,
      "updated": 1617947808
    },
    {
      "id": "606fe8ceaff09e000085e21b",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1617946831,
      "updated": 1617946831
    }
  ]
}