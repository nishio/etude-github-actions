{
  "id": "5fba6906f14425001cda5c75",
  "title": "AtCoder失敗リスト",
  "created": 1606052104,
  "updated": 1615049286,
  "lines": [
    {
      "id": "5fba6906f14425001cda5c75",
      "text": "AtCoder失敗リスト",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606052104,
      "updated": 1606052123
    },
    {
      "id": "5ff05e67aff09e0000b4cdab",
      "text": "MLE",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609588328,
      "updated": 1609588335
    },
    {
      "id": "5ff05e6faff09e0000b4cdac",
      "text": " 与えられたH×W=10^6の文字列からグラフを構築してTLEやMLE [PAST5H]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609588336,
      "updated": 1609588418
    },
    {
      "id": "5fe44192aff09e00008f880f",
      "text": "TLE",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608794514,
      "updated": 1608794515
    },
    {
      "id": "5fba707aaff09e0000951fe1",
      "text": "\t全探索の 「次に訪問する頂点」をリストで持ってTLE 集合に変えたらAC [ABC184E]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606054011,
      "updated": 1609588633
    },
    {
      "id": "5fd5f79caff09e0000711aa5",
      "text": "\tダイクストラの実装でvisitedをつけ忘れ [PAST4J]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607858077,
      "updated": 1607858303
    },
    {
      "id": "5fba7094aff09e0000951fe2",
      "text": "　前処理をして高速化、2つ前処理するものがあるのに片方しかしておらずTLE、計算量オーダーを勘違いして場当たり的な定数倍高速化してしまう [PAST4K]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1606054036,
      "updated": 1607436761
    },
    {
      "id": "5fe441a0aff09e00008f8810",
      "text": "　最大スコアを計算するためのmaxが一つループの内側に入ってた(TLE) [ABC175D]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608794529,
      "updated": 1608794543
    },
    {
      "id": "5fe441afaff09e00008f8813",
      "text": "\t前処理で累乗テーブル作成: a ** xにしてて余りを取る前に桁が爆発 / pow(a, x, MOD)にしてTLE / これは対数オーダーなのでテーブルを作るときは前の値の再利用で定数オーダーにすべきだった [ARC106]D",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608794543,
      "updated": 1608794551
    },
    {
      "id": "5fe441b7aff09e00008f8814",
      "text": "　定数オーダーだが、その定数が10^9 [ABC164D]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608794551,
      "updated": 1608794557
    },
    {
      "id": "5fe441bcaff09e00008f8815",
      "text": "\t素因数分解TLE [素因数分解を O(n^(1/4)) でする]に置き換えたらAC",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608794557,
      "updated": 1608794577
    },
    {
      "id": "5fe441d0aff09e00008f881c",
      "text": " 深さ優先探索で`visit(next)`とすべきところを`visit(pos)`している(手元テストすれば気づいたはず)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608794577,
      "updated": 1609588511
    },
    {
      "id": "5ff05f86aff09e0000b4cdae",
      "text": " 深さ優先探索を関数の再帰呼び出しで実装したがPyPyは関数呼び出しが遅い、回数が10^6オーダーだと厳しい、whileループに書き換え　[PAST5H]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609588614,
      "updated": 1609588741
    },
    {
      "id": "5ff05ed4aff09e0000b4cdad",
      "text": "\t文字列をループの中で結合してTLE、リストにappendしておき、最後にjoinする [PAST5H]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609588436,
      "updated": 1615047186
    },
    {
      "id": "5ff05ff1aff09e00002628d8",
      "text": "\t小さな行列の掛け算を繰り返す場合、Numpyを使ってもオーバーヘッドが大きくてメリット少ない [ABC189]E",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609588721,
      "updated": 1611545034
    },
    {
      "id": "60157e93aff09e0000a7b168",
      "text": "\tすべての辺のコストが1なのにダイクストラを使ってTLE、BFSに変えたらAC [ABC190E]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1612021395,
      "updated": 1615049046
    },
    {
      "id": "600e39c7aff09e0000210615",
      "text": "\t桁DPにおいて「既に出てきた数字が何か」を覚えておこうとして2^16のテーブルを作ってTLE、桁DPのlessでは必ず全種類の数字が出てくるので「いくつが既出か」だけでよい [ABC194F]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1611545032,
      "updated": 1615047153
    },
    {
      "id": "6043a95baff09e0000125a74",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1615047004,
      "updated": 1615047004
    },
    {
      "id": "5fe441c3aff09e00008f8816",
      "text": "RE",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608794564,
      "updated": 1608794564
    },
    {
      "id": "5fe441c4aff09e00008f8817",
      "text": "\tNが10^5の区間DP, 10^10のメモリを確保する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608794564,
      "updated": 1608794572
    },
    {
      "id": "5fe441ccaff09e00008f8818",
      "text": "\t\tRE: MemoryError [AtCoderのPythonでMemoryErrorを出すとREになる]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608794572,
      "updated": 1608794572
    },
    {
      "id": "5fe441ccaff09e00008f8819",
      "text": "　　 「DPでやっても間に合わない」と気づくべきだった [AGC048]B",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608794572,
      "updated": 1608794572
    },
    {
      "id": "5fe441ccaff09e00008f881a",
      "text": "\t\tAC: 累積和で最内ループを潰しAC [ABC179D]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608794572,
      "updated": 1608794572
    },
    {
      "id": "5fe441ccaff09e00008f881b",
      "text": "　深さが10 ** 5の木をPythonで[深さ優先探索]したらSegFaultでRE [AOJ GRL_5_C]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608794572,
      "updated": 1610433519
    },
    {
      "id": "5fe443c7aff09e0000e638d4",
      "text": "　　AOJと僕の手元のPythonではダメで、AtCoderのコードテストだと10^6でもOKなので多分処理系のコンパイルオプションによる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608795080,
      "updated": 1608795145
    },
    {
      "id": "5fe441daaff09e00008f881d",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608794587,
      "updated": 1608794587
    },
    {
      "id": "5fe441a1aff09e00008f8811",
      "text": "WA",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608794529,
      "updated": 1608794533
    },
    {
      "id": "5fe441acaff09e00008f8812",
      "text": "　連結成分のサイズが2以上になるのは一つだけだと思い込んでたこと。実際には複数ある [ARC107]C",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608794540,
      "updated": 1608794543
    },
    {
      "id": "5fcf8985aff09e000030f16f",
      "text": "　複数のものの関係を問う問題でN=1がコーナーケース [ARC106]C",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607436677,
      "updated": 1608794550
    },
    {
      "id": "5fd5fef3aff09e00002b8b60",
      "text": "\tINFを10**10にしてて、超える値がある [AGC044A]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1607859962,
      "updated": 1608794575
    },
    {
      "id": "5fdc1ccbaff09e0000b33da8",
      "text": "\t座標圧縮したのに元の座標でアクセスしてた [PAST2N]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608260811,
      "updated": 1608794586
    },
    {
      "id": "5fe4320eaff09e00008f880e",
      "text": "　負の辺を入れてはいけない最小費用流ライブラリに負の辺を入れた　[PAST3O]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608790543,
      "updated": 1608801776
    },
    {
      "id": "5fe45df1aff09e0000e638fc",
      "text": "　　ダイクストラ法にも負の辺を入れてはいけない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608801778,
      "updated": 1608801809
    },
    {
      "id": "5fe45dd0aff09e0000e638fb",
      "text": "　[頂点を塗るのか辺を塗るのか]を勘違いしていて、1ズレるバグ [PAST4M]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608801745,
      "updated": 1615049286
    },
    {
      "id": "5fe586aaaff09e000020eb42",
      "text": "\tfor文なのにポインタをインクリメントした時にcontinue [ABC178F]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608877738,
      "updated": 1615049258
    },
    {
      "id": "60158003aff09e0000a7b169",
      "text": "\t一部の頂点が到達可能かが知りたいのにダイクストラの結果に対してINFが含まれるかチェックして「すべての頂点が到達可能か」を調べてしまっていた　[ABC190E]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1612021764,
      "updated": 1615049039
    },
    {
      "id": "5ff92771aff09e0000de98b7",
      "text": "\t二分探索でrightの初期値が条件を満たしてる [ABC192]D",
      "userId": "582e63d27c56960011aff09e",
      "created": 1610164081,
      "updated": 1615047519
    },
    {
      "id": "6043ab9caff09e0000125a76",
      "text": "\tWAになって、バグを直して2回目の提出をする時に「バグを直して、軽く高速化」ってやって、その高速化でバグを入れてる。バグが直ってないと勘違いして混乱 [ABC192]F",
      "userId": "582e63d27c56960011aff09e",
      "created": 1615047580,
      "updated": 1615047679
    },
    {
      "id": "6043ab39aff09e0000125a75",
      "text": "　数学的にO(1)の解法があるが浮動小数点数の誤差がある、O(1)の解法にこだわってしまったが、整数にして二分探索でO(logN)が正解　[ABC191]D",
      "userId": "582e63d27c56960011aff09e",
      "created": 1615047481,
      "updated": 1615048424
    },
    {
      "id": "6043ae8caff09e0000e09d0e",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1615048333,
      "updated": 1615048333
    }
  ]
}