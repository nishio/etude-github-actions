{
  "id": "6090ec0ea287e6002291a31b",
  "title": "Hatena2015-02-20",
  "created": 1424358000,
  "updated": 1424358000,
  "lines": [
    {
      "id": "6090ec32aff09e00003dffab",
      "text": "Hatena2015-02-20",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffac",
      "text": "code:hatena",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffad",
      "text": " <body>",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffae",
      "text": " *1424413124*Windowsのファイルシステムリダイレクタにハマった話",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffaf",
      "text": " Windows 7で日本語による音声合成がしたくて、WSHを使って WScript.CreateObject(\"Speech.SpVoice\"); とやってそれを使うスクリプトを作った。",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffb0",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffb1",
      "text": " これをコマンドプロンプトから単体で起動すると問題なく動くが、Pythonからsubprocess.callで実行すると「オブジェクトを作成できませんでした。」というエラーになる。",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffb2",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffb3",
      "text": " コマンドプロンプトから起動したcscript.exeは64bitで、Pythonは32bitで、32bitプログラムから起動した場合SysWOW64下の32bit版のcscript.exeが起動し、32bit版は\"Speech.SpVoice\"をロードできないことが原因。出力メッセージ上32bit版と64bit版には差がないのでわかりにくい。",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffb4",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffb5",
      "text": " この挙動はWindowsのファイルシステムリダイレクタによるもので、フルパスで64bit版を指定しても32bit版が起動する。",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffb6",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffb7",
      "text": " >>",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffb8",
      "text": " 32 ビット アプリケーションで %windir%\\System32 ディレクトリにアクセスしようとすると、アクセスが %windir%\\SysWOW64 という新しいディレクトリにリダイレクトされます。",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffb9",
      "text": " <<",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffba",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffbb",
      "text": " >>",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffbc",
      "text": " 32 ビット アプリケーションでは、%windir%\\System32 ディレクトリの代わりに %windir%\\Sysnative ディレクトリを指定すると、ネイティブのシステム ディレクトリにアクセスできます。Sysnative は、ファイル システムでアクセスをリダイレクトしないことを示すために使用する特殊なエイリアスとして、WOW64 で認識されます。このメカニズムは柔軟で使いやすいので、ファイル システムのリダイレクトを回避する際の推奨メカニズムです。",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffbd",
      "text": " <<",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffbe",
      "text": " <a href='https://msdn.microsoft.com/ja-jp/library/aa384187(v=vs.85).aspx'>ファイル システム リダイレクタ (Windows)</a>",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffbf",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffc0",
      "text": " なので以下のように書くのが正解",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffc1",
      "text": " >|python|",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffc2",
      "text": " subprocess.check_call([r\"c:\\windows\\sysnative\\cscript.exe\", \"yomiage.wsf\", arg])",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffc3",
      "text": " ||<",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffc4",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffc5",
      "text": " *1424413665*Windows 7でPythonなどから日本語音声合成",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffc6",
      "text": " SAPI.SpVoiceの代わりにSpeech.SpVoiceを使うことで日本語の音声合成ができる。see: <a href='http://d.hatena.ne.jp/language_and_engineering/20150202/JapaneseTextToSpeechProgramming'>Windowsバッチで，手軽に日本語テキストを自動読み上げ（Text To Speech）する方法　…WSHでSAPIやSpeech.SpVoiceを使う音声合成の手順とサンプルコード - 主に言語とシステム開発に関して</a> ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffc7",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffc8",
      "text": " なので以下の内容のファイルをyomiage.wsfという名前で作っておけば「./yomiage.wsf ゆっくりしていってね」などとコマンドラインから音声合成ができる。",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffc9",
      "text": " >||",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffca",
      "text": " <job id=\"Yomiage\">",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffcb",
      "text": "    <script language=\"javascript\">",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffcc",
      "text": "       var tts = WScript.CreateObject(\"Speech.SpVoice\");",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffcd",
      "text": "       tts.Rate = 0;",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffce",
      "text": "       tts.Speak(WScript.Arguments.Unnamed(0));",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffcf",
      "text": "    </script>",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffd0",
      "text": " </job>",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffd1",
      "text": " ||<",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffd2",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffd3",
      "text": " ところがこのSpeech.SpVoiceは64bit版しか存在しない。なのでPythonからwin32comとかで直接ロードすることはできない。子プロセスとして起動するならOKだろうとsubprocess.callで呼ぶと「オブジェクトを作成できませんでした」というエラーになるが、これはファイルシステムリダイレクタのせいなので、オフィシャルの回避方法がある。see: <a href='http://d.hatena.ne.jp/nishiohirokazu/20150220/1424413124'>Windowsのファイルシステムリダイレクタにハマった話</a>",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffd4",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffd5",
      "text": " というわけでもWindowsでもMacのsayコマンドで遊ぶみたいなことが手軽にできるようになった。",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffd6",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffd7",
      "text": " *1424415040*Lindaを使うとプログラムの壁を超えるのが楽ちん",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffd8",
      "text": " ブラウザ上で動いているJavaScriptと、Ubuntu上で動いているLindaサーバと、Windowsで動いているPython製クライアント、という構成を作ってみた。",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffd9",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffda",
      "text": " 今の構成はこんな感じ。",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffdb",
      "text": " >||",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffdc",
      "text": " ブラウザ上のJavaScript",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffdd",
      "text": " ↓WebSocket",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffde",
      "text": " Ubuntu上で走っているLinda",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffdf",
      "text": " ↓WebSocket",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffe0",
      "text": " Windows上で走っているPythonプログラム",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffe1",
      "text": " ↓プロセス呼び出し",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffe2",
      "text": " cscript",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffe3",
      "text": " ↓音声",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffe4",
      "text": " 人間",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffe5",
      "text": " ||<",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffe6",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffe7",
      "text": " まずLindaサーバはこちらの実装をREADME見ながら6行ほどコマンド打つだけであっさり立ち上がった（Ubuntu上）：<a href='http://shokai.org/blog/archives/7515'>橋本商会 &#187; Ruby上に並列言語拡張Lindaを実装してWebSocket/Cometで使えるようにした</a>",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffe8",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffe9",
      "text": " 次にこちらを参考に、20行程度のHTMLとJSを書いてチャットを実装。この時点で複数のブラウザタブ間でのチャットがあっさりと動いた。最初、WebSocketのデフォルトポート9000番を開けてなかったが、自動的にCometにフォールバックした。：<a href='http://shokai.org/blog/archives/7814'>橋本商会 &#187; JavaScriptとRubyによるWeb版Linda入門(1)</a>",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffea",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffeb",
      "text": " さらにLindaサーバに接続して、投稿内容を読み上げるWindows上で動くプログラムを作ろうとした。ここで結構迷った。",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffec",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffed",
      "text": " まずは「linda.jsはJavaScriptだからWSHでそのまま動くんじゃないか？」と言う路線でアプローチしたのだけども、linda.jsはjQueryに依存していて面倒。WSHでjQueryを動かしたという報告はググるといくつかあるけど、jQueryのバージョンやネットワーク接続がちゃんと動くかどうかなどの関係で、すんなりとは動くパターンを見つけられなかった。",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffee",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffef",
      "text": " 次にWSHからIEのオブジェクトを作ってしまって、その中でHTMLをロードしてやればいいだろうと思ったけど、これはintegrity levelの変化の際にWSHから作ったオブジェクトが破棄されるため「切断」される。see: <a href='http://www.atmarkit.co.jp/bbs/phpBB/viewtopic.php?topic=42957&forum=7'>ExcelからIEの起動 － Insider.NET － ＠IT</a> 一方でdocument.writeやればいいんじゃないかと思ったが、これは特定できないエラー。",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dfff0",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dfff1",
      "text": " この辺りでだいぶやる気が無くなったので、どっちみち将来的にはPythonのプログラムを接続するからということでPython版Lindaライブラリを作り始める。linda.jsは400行程度で、Comet実装とフォールバックと切れた時の再接続の実装をサボって、WebSocket接続はws4pyに丸投げすることで2時間程度で移植できた。この実装は近いうちに公開するつもり。 see: <a href='https://ws4py.readthedocs.org/en/latest/'>ws4py - A WebSocket package for Python &#8212; ws4py 0.3.5 documentation</a>",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dfff2",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dfff3",
      "text": " Lindaに対する書き込みはHTTPで特定URLにアクセスするだけでできるのでRaspberry PIなどからでも可能。夢が広がる。",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dfff4",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dfff5",
      "text": " まとめると、以上のような構成が1日でできるので、環境の壁を超えないといけないシチュエーションで、負荷を気にしないで良いプロトタイプを作成する上ではLindaは超便利。",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dfff6",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dfff7",
      "text": " *1424415386*クリーンランゲージについて",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dfff8",
      "text": " クリーンランゲージの解説を書きました。",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dfff9",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dfffa",
      "text": " <iframe src=\"//www.slideshare.net/slideshow/embed_code/44913042\" width=\"476\" height=\"400\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe>",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dfffb",
      "text": " ",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dfffc",
      "text": " <iframe src=\"//www.slideshare.net/slideshow/embed_code/44913054\" width=\"476\" height=\"400\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe>",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dfffd",
      "text": " </body>",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dfffe",
      "text": "",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec32aff09e00003dffff",
      "text": "[はてなダイアリー 2015-02-20 https://nishiohirokazu.hatenadiary.org/archive/2015/02/20]",
      "created": 1424358000,
      "updated": 1424358000,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}