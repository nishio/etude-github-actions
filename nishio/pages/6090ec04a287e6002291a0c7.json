{
  "id": "6090ec04a287e6002291a0c7",
  "title": "Hatena2010-06-16",
  "created": 1276614000,
  "updated": 1276614000,
  "lines": [
    {
      "id": "6090ec28aff09e00003d6424",
      "text": "Hatena2010-06-16",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6425",
      "text": "code:hatena",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6426",
      "text": " <body>",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6427",
      "text": " *1276693135*Haskellで同じ名前が常に同じ値を返すとは限らないという話",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6428",
      "text": " <a href='http://dl.dropbox.com/u/7687891/join_to_Monad/join_to_Monad.html'>モナドって結局何なのよ? &#8212; join to Monad v0.1.1 documentation</a>を読んでいて、そこの指摘が「ああ確かにこれは他の言語から来た人がつまずきやすい点だな」と思ったのでそこだけ切り出して詳しく書いてみる。まずは下のコードの穴埋めをしてみよう。",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6429",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d642a",
      "text": " >||",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d642b",
      "text": " $ ghci",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d642c",
      "text": " Prelude> import ******",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d642d",
      "text": " Prelude ******> let f x = *****",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d642e",
      "text": " Prelude ******> (f 0) * 1",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d642f",
      "text": " 2092838931",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6430",
      "text": " Prelude ******> (f 0) / 1",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6431",
      "text": " 0.9872770354820595",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6432",
      "text": " Prelude ******> (f 0) * 1 == (f 0) / 1",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6433",
      "text": " True",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6434",
      "text": " ||<",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6435",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6436",
      "text": " 「Haskellの関数は純粋だ、同じ関数に同じ引数を渡せば常に同じ値が返る」うんうん、それには同意する。だがしかし、それでもなお(f x)が異なる値に評価されるケースがある。それは文脈に依存する。もちろん、letやwhereを使ってfやxの指す値を変えれば(f x)の値も変わる。そういうことを言っているんじゃないよ。これはC++やJavaでは起こらないから、つまずきどころかと思う。",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6437",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6438",
      "text": " >||",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6439",
      "text": " Prelude> import Random",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d643a",
      "text": " Prelude Random> let f x = (fst (random (mkStdGen x)))",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d643b",
      "text": " Prelude Random> (f 0) * 1",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d643c",
      "text": " 2092838931",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d643d",
      "text": " Prelude Random> (f 0) / 1",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d643e",
      "text": " 0.9872770354820595",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d643f",
      "text": " Prelude Random> (f 0) * 1 == (f 0) / 1",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6440",
      "text": " True",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6441",
      "text": " ||<",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6442",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6443",
      "text": " C++やJavaでは、引数の型が異なる関数をいくつも定義してオーバーロードできる。しかしHaskellではそれに加えて「その式を評価した結果の型」が異なる定義をいくつもオーバーロードできる。関数である必要すらない。ある名前xが指す値がなんであるかは、ユーザからは見えにくい型推論の結果によって決まり、そのxの値はかなり離れた位置のコードからでも影響を受ける。コード上で局在していない。",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6444",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6445",
      "text": " >|haskell|",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6446",
      "text": " class Foo a where",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6447",
      "text": "     x :: a",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6448",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6449",
      "text": " instance Foo Int where",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d644a",
      "text": "     x = 0",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d644b",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d644c",
      "text": " instance Foo Integer where",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d644d",
      "text": "     x = 1",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d644e",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d644f",
      "text": " instance Foo Float where",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6450",
      "text": "     x = 2",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6451",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6452",
      "text": " instance Foo Double where",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6453",
      "text": "     x = 3",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6454",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6455",
      "text": " main = do",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6456",
      "text": "   print $ x + 0 + 0 + 0 * (1 :: Int)",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6457",
      "text": "   print $ x + 0 + 0 + 0 * (1 :: Integer)",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6458",
      "text": "   print $ x + 0 + 0 + 0 * (1 :: Float)",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6459",
      "text": "   print $ x + 0 + 0 + 0 * (1 :: Double)",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d645a",
      "text": " ||<",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d645b",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d645c",
      "text": " この例では「型の違う0を足しているだけ」ということがわかるようにすぐそばで明示的に型を宣言しているが、推論によって演算子をいくつもまたいで影響を与えていることがわかるかと思う。",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d645d",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d645e",
      "text": " そんなわけで、(return x)が何を返すかはこのコードだけからでは分からないし、(return x) >>= ... >>= f というコードのfの定義を変えると(return x)の値が変わるかもしれない、という可能性に関しては念頭におく必要がある。つまずきポイントだ。",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d645f",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6460",
      "text": " *1276695144*[カイゼン]掃除用具を買ってきた",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6461",
      "text": " 何ヶ月か前、粘着剤がロール状の紙に付着していて、コロコロ転がして埃を取る器具を買って、あまりのとれ具合に感動して「文明の利器だ！」と興奮していたのだが、ついに1ロール使い切った。数日で掃除ができないことにフラストレーションを感じ始めたので(!)会社帰りに大急ぎでスーパーまで走って買ってきた。",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6462",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6463",
      "text": " 今回はコロコロの他に、細かい毛が生えていてパタパタして静電気でホコリを捕まえる器具も買ってきた。おおお、ホコリの積もっていたモニターが綺麗になった！文明の利器だ！！",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6464",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6465",
      "text": " まあパタパタの方はまだ買ってきたばかりなのだけど、コロコロは本当に経験すべき。カーペットがこんなに髪の毛だらけだったなんて！というか浮気をして「この長い髪の毛は誰よ！」って怒られるのはドラマの中だけのことで現実には早々見つからないだろうと思っていたが、コロコロをして意見を改めた。掃除したらすぐわかる。",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6466",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6467",
      "text": " しかし、工具大好きなのになんで今まで掃除用具っていう選択肢に気づかなかったんだろう。こんなに楽しいのに。",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6468",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6469",
      "text": " *1276704066*「知識とは何か」ドラッカーのポスト資本主義社会を読んで考察",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d646a",
      "text": " <a href=\"http://www.amazon.co.jp/gp/product/447800210X?ie=UTF8&tag=nishiohirokaz-22&linkCode=as2&camp=247&creative=7399&creativeASIN=447800210X\">ドラッカー名著集8 ポスト資本主義社会</a>第1章より",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d646b",
      "text": " >>",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d646c",
      "text": " いまや知識とされるものは、それが知識であることを行為によって証明されなければいけない。今日我々が知識とするものは行動のための情報、成果に焦点を合わせた情報である。",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d646d",
      "text": " <<",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d646e",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d646f",
      "text": " 「成果に焦点を合わせた知識」この「成果」ってのは何だ。お金か？",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6470",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6471",
      "text": " もちろんお金が得られない知識よりは、お金が得られる知識の方が「成果」を生み出しているだろう。でも、「お金に焦点を合わせた知識」と解釈すると大間違いだと思う。",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6472",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6473",
      "text": " なぜなら、お金は資本だから。「ポスト資本主義社会」たる「知識社会」では、資本よりも知識の方が成果に対する寄与が大きい。それがこの本で主張していることなのだから、ここでの「成果」ももちろん「お金としての成果よりも知識としての成果の方が大きい」と考えるべきだ。",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6474",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6475",
      "text": " 知識としての成果の上げ方は大きく分けて二つある。",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6476",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6477",
      "text": " ** 自分の知識の量を増やす",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6478",
      "text": " 自分が知識を習得する速度を上げる知識、知識を新しく発見する知識、今は学ぶことができない知識を学べるようにする知識などなど。",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6479",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d647a",
      "text": " まあ、たとえば英語の知識はあるのとないのとで読めるドキュメントのクオリティや新しさに大きな差が出るから、英語の学習、特に英会話じゃなくて英文の速読は知識の獲得速度に大きく影響する。",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d647b",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d647c",
      "text": " ** 他人の知識の量を増やす",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d647d",
      "text": " 知識は個人に属する資産であるから、自分の中の知識を他人にコピーして分け与えると全体の資産は増える。つまり、教えることは資産の生産である。効率良く教える知識は生産の効率を上げる知識だ。",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d647e",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d647f",
      "text": " <hr>",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6480",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6481",
      "text": " などと言うことを友達に話していて、「知識」って言葉がいくつもの意味を持っているから分類して別の言葉を割り当てた方がいいのではと指摘された。もっともだ。",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6482",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6483",
      "text": " - ソクラテスの知識: 自分自身を知ること、自分自身を啓発することを目的とした知識　P.61",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6484",
      "text": " - プロタゴラスの知識: 何を言うか、いかにうまく言うか、を目的とした知識。他人の自分に対するイメージを良くすることを目的とした知識。 P.61",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6485",
      "text": " - テクネー(技能): ソクラテスの時代に知識だと考えられていなかった、何をするか、いかになすか、を目的とした知識。どうやって石を綺麗に割るか、みたいな。体系的に教えられず、見よう見まねや実体験で覚えるものだった。",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6486",
      "text": " - テクノロジー(技術): 1700年ごろに発明された。百科全書など「知識を労働者に与えることで労働者の生産性を向上させること」を目的とした知識。知識が、労働者に与えることができる資源として認識された。労働者->生産性の高い労働者 P.36",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6487",
      "text": " - 機械技術: 1776年のワットによる蒸気機関(特許取得)など。これにより「労働者+機械」という労働者単体よりはるかに生産性の高いシステムができた。機械を所有する資本家とそうでない労働者に大きな格差が生まれることが危惧された(マルクス) 人力機織り機を自動織機へ、水車を蒸気ポンプへ、と考えると「道具を改良することで生産性を向上させること」を目的とした知識と言える。道具->生産性の高い道具 P.38",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6488",
      "text": " - 管理技術: 1881年、テイラーによる科学的管理法、1907年、フォードによるフォードシステムなど。「労働者の仕事を解析し、改良することで生産性を向上させる」ことを目的とした知識。仕事->生産性の高い仕事 P.43",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d6489",
      "text": " - メタマネジメント: 1950年頃、ドラッカーによるマネジメントの概念。ここまでのストーリーは「Xに知識を適用することによってXの生産性を向上する」だった。このXに生産性向上のための知識それ自体を代入する。「生産性向上のための知識を改良することで、知識の生産性向上を向上させること」を目的とした知識。知識->生産性の高い知識。",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d648a",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d648b",
      "text": " ",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d648c",
      "text": " <iframe src=\"http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=AAFFAA&fc1=000000&lc1=0000FF&t=nishiohirokaz-22&o=9&p=8&l=as1&m=amazon&f=ifr&md=1X69VDGQCMF7Z30FM082&asins=447800210X\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d648d",
      "text": " </body>",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d648e",
      "text": "",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec28aff09e00003d648f",
      "text": "[はてなダイアリー 2010-06-16 https://nishiohirokazu.hatenadiary.org/archive/2010/06/16]",
      "created": 1276614000,
      "updated": 1276614000,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}