{
  "id": "5f7225cf4155af001e723e86",
  "title": "テストできるスニペットライブラリ",
  "created": 1601316306,
  "updated": 1601317484,
  "lines": [
    {
      "id": "5f7225cf4155af001e723e86",
      "text": "テストできるスニペットライブラリ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601316306,
      "updated": 1601316824
    },
    {
      "id": "5f7225d1aff09e000022da9e",
      "text": "\tatcoderの自分の書いたコードを再利用しやすくする話、ひとまず形になったので言語化しておく [Twitter https://twitter.com/nishio/status/1310549757778042882?s=20]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601316306,
      "updated": 1601317105
    },
    {
      "id": "5f7225f8aff09e000022da9f",
      "text": "\tコンテストで解いたコードはコンテスト番号でファイル名がabc123/e.pyみたいになってる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601316344,
      "updated": 1601316481
    },
    {
      "id": "5f722681aff09e000022daa6",
      "text": "\t\tなのでまずこれをlibs/lazy_segtree.pyみたいに分かりやすい名前でコピーする。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601316481,
      "updated": 1601316482
    },
    {
      "id": "5f72261aaff09e000022daa2",
      "text": "\tコンテストで解いたコードは-tでローカルテストが走るようになってるので、テストしながらリファクタリングできる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601316378,
      "updated": 1601316594
    },
    {
      "id": "5f72260faff09e000022daa1",
      "text": "\t\t再利用に備えて、そのコンテスト特有のコードと、再利用されるライブラリ的コードとを分ける",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601316367,
      "updated": 1601316582
    },
    {
      "id": "5f7226e5aff09e000022daa9",
      "text": "\t\t間にコメントでマーカーを入れる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601316582,
      "updated": 1601316582
    },
    {
      "id": "5f72262faff09e000022daa3",
      "text": "\tスニペット作成スクリプトはlibs/*.pyを読み取って、ライブラリ部分だけを取り出してvscodeのスニペットにする。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601316399,
      "updated": 1601316462
    },
    {
      "id": "5f72266daff09e000022daa5",
      "text": "\t\tdocstringの先頭行をスニペットの解説文にする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601316462,
      "updated": 1601316471
    },
    {
      "id": "5f7226fbaff09e000022daaa",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601316604,
      "updated": 1601316604
    },
    {
      "id": "5f72272eaff09e000022daae",
      "text": "分離マーカー方式のメリット",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601316655,
      "updated": 1601316664
    },
    {
      "id": "5f72265baff09e000022daa4",
      "text": "\tlibsのファイル全体をスニペットにしない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601316444,
      "updated": 1601316691
    },
    {
      "id": "5f722707aff09e000022daab",
      "text": "\t\tコンテスト参加中に書いたテストコードをそのまま利用できる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601316616,
      "updated": 1601316619
    },
    {
      "id": "5f722721aff09e000022daad",
      "text": "\t\tライブラリとして再利用するときにテストコードはコピペされたくない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601316641,
      "updated": 1601316716
    },
    {
      "id": "5f72276baff09e00008f81cc",
      "text": "\t\tマーカーの上にライブラリ、下にテストコードにすればテストコードを温存しつつ、それをスニペットには入れない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601316716,
      "updated": 1601316739
    },
    {
      "id": "5f7226acaff09e000022daa8",
      "text": "\t\t手元の小さいテストが保たれるだけじゃなくてatcoderやaojにサブミットできる状態も保てる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601316524,
      "updated": 1601316766
    },
    {
      "id": "5f72279daff09e000022daaf",
      "text": "\t\t\t大幅に変更したときに、念のため再度サブミットして動作確認することもできる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601316766,
      "updated": 1601316782
    },
    {
      "id": "5f7227aeaff09e00008f81cd",
      "text": "\t\t\tコンテストでタイムアウトしないかどうかの検証もできる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601316782,
      "updated": 1601316806
    },
    {
      "id": "5f722824aff09e000022dab0",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601316901,
      "updated": 1601316989
    },
    {
      "id": "5f722854aff09e00008f81ce",
      "text": "[このフォルダ https://github.com/nishio/atcoder/tree/master/libs]の中身が[このスクリプト https://github.com/nishio/atcoder/blob/master/generate_snippets.py]でスニペットに変換される",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601316948,
      "updated": 1601317000
    },
    {
      "id": "5f7228a2aff09e000022dab3",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601317027,
      "updated": 1601317027
    },
    {
      "id": "5f72298aaff09e00008f81d1",
      "text": "複数のコンテストで使われたライブラリはだんだんテストケースが増えていく",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601317259,
      "updated": 1601317361
    },
    {
      "id": "5f7229a7aff09e00008f81d3",
      "text": "　遅延伝搬セグメント木がまさにそんな感じで、いま7つのコンテストのテストデータが乗ってる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601317288,
      "updated": 1601317328
    },
    {
      "id": "5f7229f2aff09e00008f81d4",
      "text": "　修正した後にも各コンテストで通る状態かを確認できる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601317362,
      "updated": 1601317407
    },
    {
      "id": "5f72298aaff09e00008f81d2",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601317259,
      "updated": 1601317259
    },
    {
      "id": "5f722932aff09e00008f81d0",
      "text": "以前の話",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601317170,
      "updated": 1601317175
    },
    {
      "id": "5f7228a2aff09e000022dab4",
      "text": "https://twitter.com/nishio/status/1309895501685297152",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601317027,
      "updated": 1601317049
    },
    {
      "id": "5f7228b8aff09e000022dab5",
      "text": "\tセグメント木のコードを整理しなきゃなぁと思いつつまだやってないのは、競技プログラミング用の自作ライブラリの整備の仕方についてまだ良い方針が思いついてないせい。普通にモジュールにしてimportして使うようにすると1ファイルで提出するために後からコピペ作業が必要でだるいかなーと。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601317049,
      "updated": 1601317060
    },
    {
      "id": "5f7228ccaff09e000022dab7",
      "text": "\tあと、問題条件に合わせてゴリゴリ書き換えることもあるから最初から提出ファイルに貼り付けちゃうのが良いと思ってるのだが…そして「ファイルを開いてコピペ」の代わりにvscodeのスニペットがいいと思うのだが、その方針でやることの良さにまだ自信が持てない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601317068,
      "updated": 1601317069
    },
    {
      "id": "5f7228d7aff09e000022dab8",
      "text": "\t他の案としてはimport文を置換する「提出用データ作成スクリプト」を作る手もある。この方針の良いところは、その変換のフェーズでデバッグ出力を消すとか、関数呼び出しをインライン展開するとかもできるはずだ、という点。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601317079,
      "updated": 1601317079
    },
    {
      "id": "5f7228d7aff09e000022dab9",
      "text": " 変換結果はクリップボードに入れる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601317079,
      "updated": 1601317079
    },
    {
      "id": "5f7228c4aff09e000022dab6",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1601317060,
      "updated": 1601317060
    }
  ]
}