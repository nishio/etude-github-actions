{
  "id": "63e4879ab032fb001ca878fc",
  "title": "Reactive Programming / Functional Reactive Programming",
  "created": 1675921308,
  "updated": 1677747145,
  "lines": [
    {
      "id": "63e4879ab032fb001ca878fc",
      "text": "Reactive Programming / Functional Reactive Programming",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675921308,
      "updated": 1675921385
    },
    {
      "id": "63e4884caff09e0000f045b7",
      "text": "Rx* is not FRP",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675921484,
      "updated": 1675921523
    },
    {
      "id": "63e487a0aff09e0000f045aa",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675921312,
      "updated": 1675922908
    },
    {
      "id": "63e487cfaff09e0000f045ae",
      "text": "[https://gist.github.com/staltz/868e7e9bc2a7b8c1f754 The introduction to Reactive Programming you've been missing · GitHub]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675921360,
      "updated": 1675921364
    },
    {
      "id": "63e48874aff09e0000f045b9",
      "text": "\t>[https://twitter.com/ReactiveX/status/483625917491970048?s=20&t=qLr-sa2ZRTF-JQsfLa9biA @ReactiveX]: A nice introduction to Reactive Programming using RxJS from @andrestaltz https://t.co/breKB68ndK although Rx* is not FRP",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675921525,
      "updated": 1675921535
    },
    {
      "id": "63e4887eaff09e0000f045ba",
      "text": "\t>[https://twitter.com/ReactiveX/status/483644526368931842 @ReactiveX]: @andrestaltz @phadej @conal the big difference is the separation between Behaviors and Events. We do have that eg BehaviorSubject/Observable",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675921535,
      "updated": 1675921539
    },
    {
      "id": "63e4880aaff09e0000f045b3",
      "text": "\t[https://ninjinkun.hatenablog.com/entry/introrxja 【翻訳】あなたが求めていたリアクティブプログラミング入門 - ninjinkun's diary]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675921418,
      "updated": 1675921580
    },
    {
      "id": "63e488a8aff09e0000f045bb",
      "text": "\t\t[https://qiita.com/hiruberuto/items/39e4126f470d8b84b291 リアクティブプログラミングとは何だったのか - Qiita]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675921576,
      "updated": 1677747144
    },
    {
      "id": "640063c8aff09e0000fc2b3f",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1677747144,
      "updated": 1677747145
    },
    {
      "id": "63e4882faff09e0000f045b4",
      "text": "[https://stackoverflow.com/questions/1028250/what-is-functional-reactive-programming?answertab=votes terminology - What is (functional) reactive programming? - Stack Overflow]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675921456,
      "updated": 1675921458
    },
    {
      "id": "63e48831aff09e0000f045b5",
      "text": "\t[https://postd.cc/what-is-functional-reactive-programming/ Q. （関数型）リアクティブプログラミングとは何ですか？ | POSTD]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675921458,
      "updated": 1675921468
    },
    {
      "id": "63e4883caff09e0000f045b6",
      "text": "　これの英語版を見たけど、なるほどこれは混乱する人が出るのもわかる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675921468,
      "updated": 1675922294
    },
    {
      "id": "63e48b4caff09e0000f045c0",
      "text": "　\t\"datatypes that represent a value 'over time' \" = Behavior",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675922253,
      "updated": 1675922762
    },
    {
      "id": "63e48b78aff09e0000275df0",
      "text": "　\t要するにこれじゃん",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675922296,
      "updated": 1675922319
    },
    {
      "id": "63e48b91aff09e0000275df1",
      "text": "　\t世界をどういう部品の組み合わせで記述するか、という認知の部分を変える",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675922321,
      "updated": 1675922381
    },
    {
      "id": "63e48bcdaff09e0000275df2",
      "text": "　\t電子回路の設計の経験がある人は理解しやすいかもね",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675922381,
      "updated": 1675922498
    },
    {
      "id": "63e48c41aff09e0000275df3",
      "text": "　\t　wireは電圧の変化する存在",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675922498,
      "updated": 1675922533
    },
    {
      "id": "63e48c91aff09e0000275df5",
      "text": "　\t　　これをファーストクラスの存在とみなす",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675922578,
      "updated": 1675922589
    },
    {
      "id": "63e48c65aff09e0000275df4",
      "text": "　\t　部品を置くことはその存在の間の関係の記述",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675922533,
      "updated": 1675922643
    },
    {
      "id": "63e48cd6aff09e0000275df6",
      "text": "　\t　　宣言的と言っても良い",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675922646,
      "updated": 1675922652
    },
    {
      "id": "63e48cdfaff09e0000275df7",
      "text": "　\tこういう「今のコンピュータのアーキテクチャと異なった」認知で世界を記述した上で、それを今のコンピュータで実行可能な形に落とし込む必要がある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675922656,
      "updated": 1675922703
    },
    {
      "id": "63e48d3aaff09e0000f045c1",
      "text": "　\t[\" the big difference is the separation between Behaviors and Events]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675922747,
      "updated": 1675922748
    },
    {
      "id": "63e48d3daff09e0000f045c2",
      "text": "　　　ここを混同したらダメだ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675922749,
      "updated": 1675922782
    },
    {
      "id": "63e48d61aff09e0000275df8",
      "text": "　　　根本的に何をファーストクラスにしたくてやってるのかわかってない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675922785,
      "updated": 1675922816
    },
    {
      "id": "63e48d4caff09e0000f045c3",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675922765,
      "updated": 1675922765
    },
    {
      "id": "63e48ddeaff09e0000f045c4",
      "text": "[https://begriffs.com/posts/2015-07-22-essence-of-frp.html The Essence of FRP]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675922910,
      "updated": 1675922910
    },
    {
      "id": "63e48ddeaff09e0000f045c5",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675922910,
      "updated": 1675922910
    },
    {
      "id": "63e488d4aff09e0000f045bd",
      "text": "[https://qiita.com/hiruberuto/items/39e4126f470d8b84b291 リアクティブプログラミングとは何だったのか - Qiita]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675921621,
      "updated": 1675921625
    },
    {
      "id": "63e488d9aff09e0000f045bf",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675921625,
      "updated": 1675921625
    },
    {
      "id": "63e488d5aff09e0000f045be",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675921621,
      "updated": 1675921621
    },
    {
      "id": "63e48ea1aff09e0000f045c6",
      "text": "説明を書こうとして理解してないことに気づいた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923106,
      "updated": 1675923146
    },
    {
      "id": "63e48ecaaff09e0000f045c8",
      "text": "　説明できるほど詳しくないことに気づいたので今回はざっと眺めるだけにする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923146,
      "updated": 1675923147
    },
    {
      "id": "63e48ecaaff09e0000f045c9",
      "text": "　一つのオブジェクトを時間軸に沿って破壊的に書き換えていくのではなく、",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923147,
      "updated": 1675923147
    },
    {
      "id": "63e48ecaaff09e0000f045ca",
      "text": "　変更不能な(イミュータブルな)オブジェクトを受け取って、新しいオブジェクトを作って返す",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923147,
      "updated": 1675923147
    },
    {
      "id": "63e48ecaaff09e0000f045cb",
      "text": "　ストリームにメッセージが流れている的メンタルモデル",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923147,
      "updated": 1675923147
    },
    {
      "id": "63e48ecaaff09e0000f045cc",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923147,
      "updated": 1675923147
    },
    {
      "id": "63e48eb4aff09e0000f045c7",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1675923124,
      "updated": 1675923124
    }
  ]
}