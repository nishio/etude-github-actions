{
  "id": "6090ec05a287e6002291a105",
  "title": "Hatena2010-09-19",
  "created": 1284822000,
  "updated": 1284822000,
  "lines": [
    {
      "id": "6090ec29aff09e00003d7438",
      "text": "Hatena2010-09-19",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7439",
      "text": "code:hatena",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d743a",
      "text": " <body>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d743b",
      "text": " *1284860321*プログラミンで論理回路",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d743c",
      "text": " http://www.mext.go.jp/programin/app/",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d743d",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d743e",
      "text": " 「状態がないからプログラミング難しい」「GOTOが9個しか使えないから無理」と言われたので「いや状態はあるでしょ。変数の形になってないだけで。GOTOもなくていいし」と思ってちょっといじってみた。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d743f",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7440",
      "text": " 移動がグローバル座標系なのはどうなんだー。あと条件分岐が少なすぎて辛いね、実質的にプログラムで使えるのは衝突判定くらいか。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7441",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7442",
      "text": " とりあえずNOT回路を作った",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7443",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7444",
      "text": " <img src=\"http://gyazo.com/c023f1f868a567fabf5a6f7937db28e1.png\">",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7445",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7446",
      "text": " 緑四角が青玉を吐きつつ、赤玉にあたったときには場所をずらすので「あたってないときに玉が飛ぶ位置」に物を置けばそれの衝突イベントは「赤玉が出ていないとき」というNOTの値になる。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7447",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7448",
      "text": " お、公開すればリンクを貼れるのか http://www.mext.go.jp/programin/share/?share_id=be612f8f3bf4b925886c454813772c84 あ、でもできたアプリで遊べるだでコードを読んだり書き換えたりはできないのか。残念。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7449",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d744a",
      "text": " 続いてAND",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d744b",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d744c",
      "text": " <img src=\"http://gyazo.com/d793a27ecb58d73bbda5b4d6b019fe6e.png\">",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d744d",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d744e",
      "text": " 下の矢印から青玉、上の矢印から赤玉が出るので、その両方が緑四角にあたった時だけ紫玉を出す。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d744f",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7450",
      "text": " 肝心のコードはこちら:",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7451",
      "text": " <img src=\"http://gyazo.com/c5ce7e3c297e2c5cc0439b17c71e5b3f.png\">",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7452",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7453",
      "text": " 簡単にいえば緑四角は「青玉があたった時だけ上に上がって赤玉の進路に入る」＆「赤玉のにあたったら(それは青玉もあたってるってことだから)紫玉を打つ」ってだけ。残りの二つのルールは緑がどっかにいってしまわないように置いてある壁(五角形・六角形)との衝突処理ね。並列実行の中に無限回実行を入れてその先頭で衝突判定を使ってwaitさせることで衝突イベントをトリガーとしたコードが書けるわけだ。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7454",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7455",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7456",
      "text": " 物はこちら: http://www.mext.go.jp/programin/share/?share_id=eecbde1436a30bcc6401b886ade368fe",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7457",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7458",
      "text": " さて、NOTとANDが作れれば二進数の足し算が出来るわけだが、もうあとは頑張るだけなのでやる気が無くなった。誰か気が向いたらやって（ぇ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7459",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d745a",
      "text": " 参考文献: <a href='http://ja.wikipedia.org/wiki/%E5%8A%A0%E7%AE%97%E5%99%A8'>加算器 - Wikipedia</a>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d745b",
      "text": " ORはANDの入力と出力にNOTを付ければ作れる。あ、でもプログラミンではORを作るほうがANDを作るよりもコストが低いな。直接作るほうがよさそうだ。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d745c",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d745d",
      "text": " *1284885238*レバレッジメモ: Scalaスケーラブルプログラミング",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d745e",
      "text": " 言語も伽藍とバザールのように成長する--Steele \"Growing a language\" 1999",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d745f",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7460",
      "text": " トレイト=インターフェイスに似ているがメソッド実装やフィールドを持つ、ミックスイン合成出来る",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7461",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7462",
      "text": " JavaのStringにtoIntがないことに気づいたときに、暗黙の型変換を参照してRichStringに変換し、そのtoIntを呼ぶ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7463",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7464",
      "text": " アラン・ケイ「私は型に反対しているわけではない。『完全な苦痛』にはならないような型システムを見たことがないので動的な片付けを支持しているのである」2003 <a href='http://userpage.fu-berlin.de/~ram/pub/pub_jf47ht81Ht/doc_kay_oop_en'>Dr. Alan Kay on the Meaning of \"Object-Oriented Programming\"</a>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7465",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7466",
      "text": " ダイクストラ「テストが証明できるのはエラーの存在であって、エラーの不在ではない」 1970 http://www.cs.utexas.edu/users/EWD/ewd02xx/EWD249.PDF",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7467",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7468",
      "text": " 「ことなる応用分野への拡張性を持った言語」というアイデア1966 The next 700 Programming Languages http://www.thecorememory.com/Next_700.pdf ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7469",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d746a",
      "text": " (arg: String) => println(arg)をprintlnって書けるのを「関数の部分適用」と呼ぶのは気持が悪いなぁ。 P.51",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d746b",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d746c",
      "text": " 末尾がコロンである演算子は右オペランドのメソッドである",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d746d",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d746e",
      "text": " コンパニオンオブジェクト 4.3",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d746f",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7470",
      "text": " タプルとリストの両方があって両方イミュータブル。Haskellのタプルとリストだと思えばだいたいあってる",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7471",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7472",
      "text": " フィールドとメソッドを総称してメンバーと呼ぶ。メンバーはデフォルトでpublic",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7473",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7474",
      "text": " varとvalがある。valは再代入不可。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7475",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7476",
      "text": " Scalaのクラスは静的メンバ(static)を持てない。そのかわりにシングルトンオブジェクトがある。classキーワードの代わりにobjectキーワードを使う。シングルトンオブジェクトがクラスと同じ名前の時にコンパニオンオブジェクト、コンパニオンクラスと呼ぶ。同じ名前のクラスがないシングルトンオブジェクトはスタンドアロンオブジェクト。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7477",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7478",
      "text": " import文で任意のオブジェクトからメンバーをインポート出来る。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7479",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d747a",
      "text": " すべてのメソッドが演算子になれる。s.indexOf('o')をs indexOf 'o'と書ける。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d747b",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d747c",
      "text": " 論理演算子もメソッド→じゃあショートサーキットはどうやってる？→実は全てのメソッドで名前渡しが可能(9.5)→なんだって！！",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d747d",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d747e",
      "text": " ===各引用ごとにページ数を書くのは面倒なのでここでP.100===",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d747f",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7480",
      "text": " イミュータブルなオブジェクトのトレードオフ P.105",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7481",
      "text": " 長所：複雑な状態変化をしないので動作を推定しやすい、他のコードに渡す際に破壊を避けてコピーをとる必要がない、スレッドが同時アクセスしても壊れない、安全にハッシュのキーにできる",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7482",
      "text": " 短所：大規模なオブジェクトのコピーが必要になることがある",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7483",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7484",
      "text": " P108 クラスパラメータはコンストラクタ内からしかアクセス出来ない？→クラスパラメータをフィールドに代入して解決→え、なんのためのクラスパラメータ… 10.6のパラメータフィールドで解決される？？",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7485",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7486",
      "text": " def this(n: Int) = this(n, 1)で「2番目の引数に1を入れてコンストラクタを呼ぶ」っていう補助コンストラクタができる。基本コンストラクタだけがスーパークラスのコンストラクタを呼び出せる。これはJavaより若干制限が強い。see sec.10",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7487",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7488",
      "text": " 演算子メソッドを使えばコードは簡潔になる、しかし読みやすくなるかどうかはクライアントプログラマが個々の演算子の意味を理解して覚えられるかどうかによる P.120",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7489",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d748a",
      "text": " Scalaでは関数リテラルとの相性が悪いbreakとcontinueを取り除いている。末尾再帰や、whileの条件にtoExit的変数を入れたりループの後半をifで囲ったりすることでbreakやcontinueがなくても同等なコードが書けるという説明がされている。まあ、そりゃそうだけどね。どう相性がわるいのか知りたいけどどこに書いてあるのかわからない。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d748b",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d748c",
      "text": " Scalaはネストしたスコープの内側で外側の変数をシャドーするような変数を定義できる。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d748d",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d748e",
      "text": " 「一人前の存在としての関数」(first-class functions)！",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d748f",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7490",
      "text": " 「(x: Int) => x > 0」は「_ > 0」とも書ける。「_ + _」は1引数の2倍になる関数ではなく2引数の足し算をする関数",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7491",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7492",
      "text": " Javaの内部クラスは外側のスコープで書き換えられる可能性のある変数にはアクセス出来ない。Scalaのクロージャは直感的に言えば変数事態を掴んで「閉じた」ものである。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7493",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7494",
      "text": " Scalaは末尾再帰をジャンプに変換するので、末尾再帰の関数が失敗した時のスタックトレースにはいくつもの関数が出てこない。紛らわしい時は-g:notailcallsオプションでOFFにする。末尾再帰の最適化は文字通り自分自身を呼ぶ再帰の時にしか使えない。相互再帰や他の関数の呼び出しは最適化されない。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7495",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7496",
      "text": " def foo(f: () => Boolean) = ...で定義される関数は foo(() => x > 0)と呼べる。これをdef foo(f: => Boolean)にするとfoo(x > 0)と呼べるようになる。foo(v: Boolean)との違いは評価のタイミング。これが名前渡しパラメータ。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7497",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7498",
      "text": " 単純なオブジェクトとは何か、単純なオブジェクトからより面白いオブジェクトを作るにはどうすればいいか、コンビネータ(合成演算)はどう組み合わされるか、最も一般的なコンビネータは何か？これらに答えられるならライブラリ設計は軌道にのっていると言えるだろう。P.173",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d7499",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d749a",
      "text": " サブクラスとサブ型の違い: 型引数を取らないクラス・トレイトに関してはサブクラスとサブ型は同じ。型引数を持つ場合それが共変(たとえばListはList[+A]なのでList[Cat] <: List[Animal])ならサブ型",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d749b",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d749c",
      "text": " パラメータフィールド：要するにclass Foo(val arg: Type)って書き方でフィールドもつくれる。class Foo(override val x)とかprivateなどの修飾も付けられる。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d749d",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d749e",
      "text": " 親クラスのコンストラクタは基本コンストラクタからしか呼べない。class Foo(...args...) extends SuperClass(...args for superclass...)",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d749f",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74a0",
      "text": " 具象メンバのオーバライドにはoverride修飾が必須",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74a1",
      "text": " <a href=\"http://www.amazon.co.jp/gp/product/4844327453?ie=UTF8&tag=nishiohirokaz-22&linkCode=as2&camp=247&creative=7399&creativeASIN=4844327453\">Scalaスケーラブルプログラミング</a>のレバレッジメモ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74a2",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74a3",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74a4",
      "text": " 呼び出されるメソッドの定義は変数の型ではなく実行時のオブジェクトのクラスによって決まる。動的束縛。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74a5",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74a6",
      "text": " 継承を使う前にis-a関係かどうかを考えろ(Mayers, \"Effective C++\" 1991)、また、スーパークラス型としてサブクラス型を使いたいかどうかを考えろ(Eckel, \"Thinking in Java\" 1998)",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74a7",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74a8",
      "text": " 最下位(bottom)の型: Null, Nothing。Nullは全ての参照クラス(AnyRefクラスを継承するクラス)の小クラス。Nothingは全ての小クラス。たとえばerrorの返り値など。失敗しうるIntを返す関数の型をMaybe Intとかにしない。Intを返して、エラー時には例外機構でNothingをIntとして使う前に別の処理に飛ばされる。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74a9",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74aa",
      "text": " P.204 トレイト トレイトはクラスみたいなもの。違いはsuperの指すものが何か。traitのsuper呼出はそれがクラスにミックスインされたあとで線形化によって決まる。そのためtraitのabstractメソッドの中ではsuper.a_methodにアクセスすることができる。これはa_methodの具体的な定義を提供するクラスのあとでmixinしなければならないことを表明している。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74ab",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74ac",
      "text": " このことによりtraitという形で表現された「変更の差分」を積み重ねることができる(僕は差分を積み重ねるコーディングスタイルがよいものかどうかは疑問だが)",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74ad",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74ae",
      "text": " Scalaのimportはどこにでも書ける。オブジェクトもインポートできる。インポートされたメンバの名前を変えられる。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74af",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74b0",
      "text": " クラスとコンパニオンオブジェクトは相互にprivate無視。これを使ってstaticメンバの代わりにする。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74b1",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74b2",
      "text": " ケースクラス。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74b3",
      "text": " >||",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74b4",
      "text": " abstract class Expr",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74b5",
      "text": " case class Var(name: String) extends Expr",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74b6",
      "text": " case class Number(...) extends Expr",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74b7",
      "text": " case ...",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74b8",
      "text": " ||<",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74b9",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74ba",
      "text": " パターンマッチに使う。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74bb",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74bc",
      "text": " ScalaもJavaも消去モデル(erasure model)のジェネリックプログラミングなので与えられたMapオブジェクトがMap<Int, Int>なのかどうかを知る方法は存在しない。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74bd",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74be",
      "text": " sealedクラスにすると同じファイルで定義されているサブクラス以外にはサブクラスを作ることができなくなる。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74bf",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74c0",
      "text": " 型パラメータとサブ型の組み合わせは面白い問題をはらんでいる。S <: T (SがTが期待されている箇所で型安全に使用できる)の時、Foo[S] <: Foo[T]ならFooは共変(covariant)といいFoo[+T]と表現する。Foo[-T]もありこれは反変(contravariant)。T <: Sの時にFoo[S] <: Foo[T]という意味。非変(nonvariant)はそれらの関係が成り立たないことで、デフォルトではこれ。Javaの配列は共変である。Object[]には任意のFooBar[]が入る。これはString[]にObject[]を介してIntegerを入れられてしまうということで、実行時エラーを引き起こす。ゴスリン曰く配列をジェネリックに扱う方法が欲しかった(P.358)しかし今ではJavaにもジェネリクスの機能が入っているので配列の共変は必要ではない。互換性のために残されている。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74c1",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74c2",
      "text": " 下限境界。def append[U >: T](x: U)などという書き方ができる。TかTのスーパクラスであるものを引数に取るという意味。上限境界もある。[T <: Ordered[T]]",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74c3",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74c4",
      "text": " lazy val x = ...;で遅延評価",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74c5",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74c6",
      "text": " 暗黙の型変化。x + yがないときにconvert(x) + yが可能ではないか調べる。に通りの方法があるときはコンパイルエラー。型変換は1回しかしない。書かれているとおりで動く場合には変換しない。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74c7",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74c8",
      "text": " むう、駄目だ、さすがに一気に読むのは脳が疲れた。まだ共変・反変の話と暗黙の型変換が残ってるんだけど、続きは今度。(追記した)",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74c9",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74ca",
      "text": " <iframe src=\"http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=AAFFAA&fc1=000000&lc1=0000FF&t=nishiohirokaz-22&o=9&p=8&l=as1&m=amazon&f=ifr&md=1X69VDGQCMF7Z30FM082&asins=4844327453\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74cb",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74cc",
      "text": " *1284889612*プログラミンで半加算器",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74cd",
      "text": " 頭が疲れたので息抜きに作ってみた http://www.mext.go.jp/programin/share/?share_id=4ade3b8667ce044112ec9001c9998cb4",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74ce",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74cf",
      "text": " 左端の矢印をクリックすると入力の1/0が切り替えられる。右に玉が出ている状態が1なので、初期状態では 1 + 1 になる。右端で上方向に出る黒い丸が計算結果で、左側が2の位、右側が1の位。二進法では 1 + 1 = 10 だから最初は左だけに玉が出る。左の矢印をクリックして 0 + 1 や 1 + 0 にすると結果が 01 になり、0 + 0 にすると 00 になる。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74d0",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74d1",
      "text": " Gyazoを1.0にアップデートしたらなぜか動かなくなってしまったのでスクリーンショットは省略。",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74d2",
      "text": " ",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74d3",
      "text": " ORを使った方が楽じゃないかって自分で書いておきながら使うのを忘れている罠…",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74d4",
      "text": " </body>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74d5",
      "text": " <comments>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74d6",
      "text": " <comment>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74d7",
      "text": " <username>ukstudio</username>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74d8",
      "text": " <body>「このプログラムをへんしゅう」から自分のところにコードがコピーされるから、読んだり修正したりできるよ。</body>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74d9",
      "text": " <timestamp>1284878758</timestamp>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74da",
      "text": " </comment>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74db",
      "text": " <comment>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74dc",
      "text": " <username>nishiohirokazu</username>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74dd",
      "text": " <body>おお！</body>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74de",
      "text": " <timestamp>1284884429</timestamp>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74df",
      "text": " </comment>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74e0",
      "text": " <comment>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74e1",
      "text": " <username>cocoatomo</username>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74e2",
      "text": " <body>Half Adder 作りました.<br>とりあえず疲れました...</body>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74e3",
      "text": " <timestamp>1284915943</timestamp>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74e4",
      "text": " </comment>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74e5",
      "text": " <comment>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74e6",
      "text": " <username>sumim</username>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74e7",
      "text": " <body>ScalaのTraitsは従来通り継承機構を流用したナンチャッテTraits（名前はTraitsというだけの中身は普通のミックスイン）なので、ネタ元のTraits（SmalltalkスタイルのTraits）のウリの一つである多重継承問題への対処は（例えばPythonと同程度にしか）対応できていません。Scalaを介してTraitsにはじめて接する場合や、多重継承にからめてTraitsを論じる場合には、このあたりちょっと注意が必要かもしれません。→参考：http://publius-ovidius.livejournal.com/314737.html</body>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74e8",
      "text": " <timestamp>1284946189</timestamp>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74e9",
      "text": " </comment>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74ea",
      "text": " <comment>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74eb",
      "text": " <username>nishiohirokazu</username>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74ec",
      "text": " <body>おお、すばらしい。ラインに名前がついていて読みやすいですね！</body>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74ed",
      "text": " <timestamp>1284957551</timestamp>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74ee",
      "text": " </comment>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74ef",
      "text": " <comment>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74f0",
      "text": " <username>nishiohirokazu</username>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74f1",
      "text": " <body>ありがとうございます。「*Scalaの* traits」と前置きして読むべきなのですね。</body>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74f2",
      "text": " <timestamp>1284957726</timestamp>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74f3",
      "text": " </comment>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74f4",
      "text": " </comments>",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74f5",
      "text": "",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d74f6",
      "text": "[はてなダイアリー 2010-09-19 https://nishiohirokazu.hatenadiary.org/archive/2010/09/19]",
      "created": 1284822000,
      "updated": 1284822000,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}