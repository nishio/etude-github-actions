{
  "id": "6090ec05a287e6002291a0e6",
  "title": "Hatena2010-07-30",
  "created": 1280415600,
  "updated": 1280415600,
  "lines": [
    {
      "id": "6090ec29aff09e00003d6d27",
      "text": "Hatena2010-07-30",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d28",
      "text": "code:hatena",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d29",
      "text": " <body>",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d2a",
      "text": " *1280470233*抜粋翻訳 PEP 238: Changing the Division Operator",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d2b",
      "text": " **概要",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d2c",
      "text": " 現在の除算演算子 (/) は数値を引数として使った場合の意味が曖昧である。引数がintやlongの場合には、数学的な除算の結果を切り捨てたものを返す。しかし、引数がfloatやcomplexの場合には除算の結果の妥当な近似値を返す。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d2d",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d2e",
      "text": " この異なる演算のために異なる演算子を導入することによってこの問題を修正することを提案する: x/yを数学的な除算の結果の妥当な近似値を返す除算(真の除算), x//yを切り捨てた値を返す除算(切り捨て除算)とする。現在の、意味の混ざった x/y を「従来の除算」と呼ぶ。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d2f",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d30",
      "text": " ** 動機",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d31",
      "text": " 従来の除算命令では任意の数値入力に対して正しい結果を返す数式を書くのが困難である。他の演算子全てに関しては x*y**2 + z などの式を書くことができ、どんな数値型(int, long, float, または complex)の入力であってもその計算結果は数学的な結果に近い(もちろん計算精度の範囲内で)　しかし除算は問題を起こす。もし運悪く除算の両方の引数が整数型だったら、真の除算ではなく切り捨て除算になってしまう。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d32",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d33",
      "text": " この問題は動的型付け言語に特有のものである: Cのような静的に片付けされた言語では、入力(多くの場合関数の引数)はdoubleやfloatであると宣言されているだろう。そして整数を引数に渡して呼び出した場合、呼び出し時にdoubleやfloatに変換される。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d34",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d35",
      "text": " **訳注",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d36",
      "text": " これは個人的には「なぜそんな変更をしたのか謎だ」と思っていた、1 / 2 == 0.5 への変更についてのPEPだ。何が問題だと考えてこの変更を行ったのか腑に落ちた。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d37",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d38",
      "text": " しかし、OCamlみたいに「そもそも整数の演算と浮動小数点数の演算が別物なんだから全般的に演算子を分けるべきじゃないか」という意見や、Haskellみたいに「そもそも整数と浮動小数点数の演算を許しているのが問題なんじゃないのか」という意見、Schemeみたいに「いや1/10を0.1にした時点ですでに正しい計算じゃないだろ」という意見もあり、この解決方法が唯一の正解とはいえない。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d39",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d3a",
      "text": " 数の構造をどうやって言語の中にモデル化するか、という難問なんだな。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d3b",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d3c",
      "text": " *1280488787*しまった",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d3d",
      "text": " 今朝翻訳した PEP238ってすでに翻訳されてるじゃん",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d3e",
      "text": " http://homepage3.nifty.com/text/script/python/pep-0238.ja.html",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d3f",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d40",
      "text": " PEP Indexに載ってるのを見落としたのかと思ったけど載ってないな",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d41",
      "text": " http://sourceforge.jp/projects/pythonjp/wiki/PEPIndex",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d42",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d43",
      "text": " 今後の翻訳予定は下のようになっているのだが、チェックしよう",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d44",
      "text": " >||",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d45",
      "text": " 概 SF  236  Back to the __future__                                  Peters",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d46",
      "text": " 概 SF  227  Statically Nested Scopes                                Hylton",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d47",
      "text": "  SF  255  Simple Generators                                       Schemenauer, Peters, Hetland",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d48",
      "text": " 概 SF  238  Changing the Division Operator                          Zadka, GvR",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d49",
      "text": " 概 SF  328  Imports: Multi-Line and Absolute/Relative               Aahz",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d4a",
      "text": "  SF  343  The \"with\" Statement                                    GvR, Coghlan",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d4b",
      "text": "  SF 3105  Make print a function                                   Brandl",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d4c",
      "text": "  SF 3112  Bytes literals in Python 3000                           Orendorff",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d4d",
      "text": " http://docs.python.org/library/__future__.html",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d4e",
      "text": " ||<",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d4f",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d50",
      "text": " Simple Generatorsは翻訳済みだね。343は検索してみたけどとりあえず見当たらない。3105と3112もそうだけど、でもこれはあんまり面白くなさそうだなぁ。むしろ3141の方が面白そうだ。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d51",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d52",
      "text": " *1280503032*[en]今日覚えた",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d53",
      "text": " final blow とどめ, 最後の一撃",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d54",
      "text": " rant どなる、がなる、暴言",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d55",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d56",
      "text": " *1280503194*抜粋翻訳 PEP 343: The \"with\" Statement",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d57",
      "text": " **概要",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d58",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d59",
      "text": " このPEPは、try/finally文の標準的な使い方を切り出すことが可能なように、Python言語に新しい文 \"with\" を追加する。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d5a",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d5b",
      "text": " このPEPの中で、「コンテキストマネージャ」はメソッド __enter__() および __exit__() を提供する。これはwith文に入る際と出る際に呼ばれるメソッドである。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d5c",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d5d",
      "text": " **導入",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d5e",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d5f",
      "text": " PEP 340とその代替案に関するたくさんの議論を経て、私は PEP 340 を撤回することに決めた。そして若干の変更を加えたものを PEP 310　で提案した。さらなる議論の末、throw()メソッドを使って停止中のジェネレータの中で例外を投げることの出来る機能と、そして新しい例外 GeneratorExit を投げる close() メソッドをを追加し直した。これらの追加は当初 python-dev [2] で提案され、全面的に賛同されたものである。また、キーワードをwithに変更した。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d60",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d61",
      "text": " **動機と要約",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d62",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d63",
      "text": " PEP 340, 無名ブロック文, はいくつものパワフルなアイデアを結びつけた。ジェネレータをブロックのテンプレートとして使う、ジェネレータに例外ハンドリングと終了処理を追加する、などである。一部の称賛を横目にたくさんの反対意見が出された。彼らは元々あった、だがはっきりとは見えていなかった、潜在的なループ構造が気に入らなかったのだ。つまり、ブロック文の中でのbreakやcontinueはそのブロック文をbreakしたりcontinueしたりする。たとえそれがループをしないリソース管理ツールとして使われていたとしても。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d64",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d65",
      "text": " しかし、とどめは私がRaymond Chenのフロー制御マクロについての暴言[1]を読んだときに刺された。Raymondは確信を持ってマクロのなかにフロー制御を隠してしまうのはコードを理解不能にすると主張した。そして私は、彼の主張がCと同様にPythonにも適用できる、と気づいた。PEP 340のテンプレートはあらゆる種類の制御フローを隠すことが出来る。たとえば、PEP 340の例4 (auto_retry()) は例外をキャッチしブロックを3回まで繰り返す。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d66",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d67",
      "text": " この点、PEP 310のwith文は、私の見解では制御フローを隠さない。finally節は一時的に制御フローを停止するだろうが、最終的には、finally節がまったくなかったのと同じ形に戻る。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d68",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d69",
      "text": " *1280507367*抜粋翻訳: Python Reference Manual: Lexical analysis",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d6a",
      "text": " >>",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d6b",
      "text": " 「Pythonで長くなった行を折り返すのって難しくないの？」",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d6c",
      "text": " 「全然難しくないよ。オフィシャルのコーディングスタイルガイドで79文字以下にすることが推奨されているくらいだし」",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d6d",
      "text": " 「その時のインデントってどうすればいいの」",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d6e",
      "text": " 「え？そんなの自由だよ」",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d6f",
      "text": " 「え？そうなの？」",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d70",
      "text": " <<",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d71",
      "text": " というやりとりがあったので翻訳",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d72",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d73",
      "text": " 2. Lexical analysis &#8212; Python v2.7 documentation",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d74",
      "text": " http://docs.python.org/reference/lexical_analysis.html",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d75",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d76",
      "text": " ** 論理行",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d77",
      "text": " 論理行の終わりはNEWLINEトークンで表現される。文は、構文規則でNEWLINEトークンが許されている場所以外で論理行の境界をまたぐことはできない。論理行は1行以上の物理行で構成される。その構成は後述の明示的行継続ルールと暗黙的行継続ルールに従う。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d78",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d79",
      "text": " (明示的行継続ルールってのは行末にバックスラッシュを置くと行がつながるってルールのことだ。翻訳はしない)",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d7a",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d7b",
      "text": " ** 暗黙的行継続",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d7c",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d7d",
      "text": " 括弧、波括弧、大括弧で囲われた式はバックスラッシュなしで複数の物理行に分けることが出来る。例:",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d7e",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d7f",
      "text": " >|python|",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d80",
      "text": " month_names = ['Januari', 'Februari', 'Maart',      # These are the",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d81",
      "text": "                'April',   'Mei',      'Juni',       # Dutch names",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d82",
      "text": "                'Juli',    'Augustus', 'September',  # for the months",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d83",
      "text": "                'Oktober', 'November', 'December']   # of the year",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d84",
      "text": " ||<",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d85",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d86",
      "text": " 継続行はコメントを持てる。継続行のインデントは重要ではない。空白の継続行は許される。暗黙の継続行の間にNEWLINEトークンはない。暗黙の継続行は後述の「三重引用符で囲われた文字列」の中にもできるが、こちらはコメントを持てない。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d87",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d88",
      "text": " ** インデント",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d89",
      "text": " 続く行のインデントレベルはスタックを使ってINDENT及びDEDENTトークンを作るのに使われる。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d8a",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d8b",
      "text": " 最初の行が読まれる前に、一つの0がスタックにプッシュされる。この0はポップされない。スタックにプッシュされた値は常にスタックの底からてっぺんに向けて増加する。各々の論理行が始まるときに、その行のインデントレベルがスタックトップと比較される。もし同じ値ならなにもしない。もしその行のインデントレベルのほうが大きいなら、その値をプッシュし、INDENTトークンが作られる。もし小さいなら、インデントレベルはスタックの中にある数値のどれかでなくてはならず、スタックの中の値でインデントレベルよりも大きな値はすべてポップされ、そのポップごとに一つのDEDENTトークンが作られる。ファイルの最後で、残っている0より大きな値の数だけDEDENTトークンが作られる。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d8c",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d8d",
      "text": " <hr>",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d8e",
      "text": " さて、もうおわかりかと思うが、例えばこんなインデントも許される。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d8f",
      "text": " >|python|",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d90",
      "text": " >>> if True:",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d91",
      "text": " ...     print (1 +",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d92",
      "text": " ...   2)",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d93",
      "text": " ... ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d94",
      "text": " 3",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d95",
      "text": " ||<",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d96",
      "text": " Python的にはprintの次の行はprintの行の続きなので、print (1 + 　2)って書いてあるのと変わらない。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d97",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d98",
      "text": " そういうわけで、普通の神経の持ち主が「見やすくするためにレイアウトしたい」と思うシチュエーションでPythonのルールがじゃまになることはないと言っていいだろう。少なくとも頭のおかしい人間が正方形プログラミングなんてやってしまう程度にはフリーレイアウトである。<a href='http://www.nishiohirokazu.org/blog/2007/08/post_323.html'>西尾泰和のブログ: ワンライナーはダークサイド。改行をいれるべし</a>",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d99",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d9a",
      "text": " *1280509687*PEPのススメ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d9b",
      "text": " 講義資料の続き",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d9c",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d9d",
      "text": " ** PEPのススメ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d9e",
      "text": " さて、言語の設計の違いについて学ぶことは重要だが、不毛な議論で時間を浪費することは避けなければいけない。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6d9f",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6da0",
      "text": " ならばどうするのがいいだろうか？",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6da1",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6da2",
      "text": " 正解はないが一つの案としてPEPを読むのはどうだろう？",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6da3",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6da4",
      "text": " **PEPとは",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6da5",
      "text": " Python Enhancement Proposals",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6da6",
      "text": " http://www.python.org/dev/peps/",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6da7",
      "text": " Pythonをこう改良したらいいんじゃない？という提案",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6da8",
      "text": " 採用されることもあれば却下されることもある",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6da9",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6daa",
      "text": " 詳細はPEP 1で定義されているよ 和訳: http://sphinx-users.jp/articles/pep1.html",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dab",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dac",
      "text": " なかには本気かと思うような提案もある",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dad",
      "text": " PEP 3117:Postfix type declarations",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dae",
      "text": " 「Unicodeの絵文字で型宣言をつけよう」",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6daf",
      "text": " >||",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6db0",
      "text": " def normpath&#411;(path&#9998;)&#9998;:",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6db1",
      "text": "     \"\"\"Normalize path, eliminating double slashes, etc.\"\"\"",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6db2",
      "text": "     if path&#9998; == '':",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6db3",
      "text": "         return '.'",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6db4",
      "text": "     initial_slashes&#10003; = path&#9998;.startswith&#411;('/')&#10003;",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6db5",
      "text": " ||<",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6db6",
      "text": " これはRejected(却下)されている。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6db7",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6db8",
      "text": " (はてなじゃ表示できないのか)",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6db9",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dba",
      "text": " ** PEP一覧の俯瞰",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dbb",
      "text": " - Meta-PEPs: PEP自体や手続きに関するPEP",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dbc",
      "text": " - Informational PEP: ガイドラインなど",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dbd",
      "text": " - Accepted PEPs: 受理されて未実装",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dbe",
      "text": " - Open PEPs: 議論中",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dbf",
      "text": " - Finished PEPs: 実装済み",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dc0",
      "text": " - Deferred, ... and Rejected PEPs: 却下など",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dc1",
      "text": " - 番号順一覧",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dc2",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dc3",
      "text": " Accepted PEPsとFinished PEPsの、それも互換性を失わせるような変更を重点的に読んでみよう。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dc4",
      "text": " なぜなら互換性を捨てるような提案が採用されているということは、",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dc5",
      "text": " - 互換性を捨ててまで採用するほど重要な問題で",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dc6",
      "text": " - 説得力がある=それがなぜ重要であるのかが明確に説明されている",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dc7",
      "text": " ということだからだ。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dc8",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dc9",
      "text": " ** _",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dca",
      "text": " -ここにいくつかのPEPの概要などを入れてざっくり紹介する",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dcb",
      "text": " -いくつかピックアップして解説をする",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dcc",
      "text": " -- True division、数値の型階層から他の言語の比較、IEEE754などなど現実の理想的なモデルをプログラミングできるものに落としこむことの困難さについて話す？",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dcd",
      "text": " -- String Representationで、英語で発信することの重要さ、プログラマはプログラミングだけで世界を変えるのではなく、時には自然言語がとてもパワフルな道具になりうる、って話をする？",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dce",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dcf",
      "text": " ** 他の選択肢も挙げる",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dd0",
      "text": " - JSR",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dd1",
      "text": " - SFRI",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dd2",
      "text": " - EEP",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dd3",
      "text": " - RFC",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dd4",
      "text": " ",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dd5",
      "text": " ** _",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dd6",
      "text": " 「ソースコードがドキュメントだ」という主張に対する反論",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dd7",
      "text": " ソースコードには「いま現在どうなっているか」しか書かれていない。「過去になにがあっていまこうなっているのか」や「未来にはこういう実装に変わるべきである」は書かれていない。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dd8",
      "text": " PEPはPythonの過去や未来について書かれた文章だ。",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dd9",
      "text": " </body>",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6dda",
      "text": "",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec29aff09e00003d6ddb",
      "text": "[はてなダイアリー 2010-07-30 https://nishiohirokazu.hatenadiary.org/archive/2010/07/30]",
      "created": 1280415600,
      "updated": 1280415600,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}