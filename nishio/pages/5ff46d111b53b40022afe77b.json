{
  "id": "5ff46d111b53b40022afe77b",
  "title": "PAST5N",
  "created": 1609854227,
  "updated": 1609859810,
  "lines": [
    {
      "id": "5ff46d111b53b40022afe77b",
      "text": "PAST5N",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854227,
      "updated": 1609854227
    },
    {
      "id": "5ff46d12aff09e0000262a4d",
      "text": "[N - 旅行会社 https://atcoder.jp/contests/past202012-open/tasks/past202012_n]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854227,
      "updated": 1609854227
    },
    {
      "id": "5ff46d13aff09e0000262a4e",
      "text": "[https://gyazo.com/c0b27c17755f5bd753462bf179457248]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854227,
      "updated": 1609854227
    },
    {
      "id": "5ff46d13aff09e0000262a4f",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854227,
      "updated": 1609854227
    },
    {
      "id": "5ff46d13aff09e0000262a50",
      "text": " 初回考察",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854227,
      "updated": 1609854227
    },
    {
      "id": "5ff46d13aff09e0000262a51",
      "text": "  バスの辺に年齢の上限、下限があり、与えられた年齢がその範囲に収まっているときだけ辺が存在するとみなして到達可能範囲を求める問題",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854227,
      "updated": 1609854227
    },
    {
      "id": "5ff46d13aff09e0000262a52",
      "text": "  年齢軸を時間軸にする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854227,
      "updated": 1609854227
    },
    {
      "id": "5ff46d13aff09e0000262a53",
      "text": "   [二次元の片方を時間軸にする]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854227,
      "updated": 1609854227
    },
    {
      "id": "5ff46d13aff09e0000262a54",
      "text": "   下限でつなぎ、上限で外せば良い",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854227,
      "updated": 1609854227
    },
    {
      "id": "5ff46d13aff09e0000262a55",
      "text": "   クエリは先読みして、混ぜてソートする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854227,
      "updated": 1609854227
    },
    {
      "id": "5ff46d13aff09e0000262a56",
      "text": "  [PAST2N]ではRange Addだったけど、今回はそうではない、どうするか？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854227,
      "updated": 1609854227
    },
    {
      "id": "5ff46d13aff09e0000262a57",
      "text": "  　繋がってる範囲の右端と左端が高速に得られれば良い",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854227,
      "updated": 1609854227
    },
    {
      "id": "5ff46d13aff09e0000262a58",
      "text": "  　右端を持つフェニック木と左端を持つフェニック木を用意すれば良い",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854227,
      "updated": 1609854227
    },
    {
      "id": "5ff46d13aff09e0000262a59",
      "text": "  　ある位置が与えられた時に、そこより左にある最も近い左端を見つけるのは二分探索で対数オーダー",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854227,
      "updated": 1609854227
    },
    {
      "id": "5ff46d13aff09e0000262a5a",
      "text": "  　見つけた左端より右で最も近い右端を見つければ範囲がわかる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854227,
      "updated": 1609854227
    },
    {
      "id": "5ff46d13aff09e0000262a5b",
      "text": "  　クエリで与えられた位置がその範囲に入ってれば、それが答え",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854227,
      "updated": 1609854227
    },
    {
      "id": "5ff46d13aff09e0000262a5c",
      "text": " 　考察完了",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854227,
      "updated": 1609854227
    },
    {
      "id": "5ff46d13aff09e0000262a5d",
      "text": "\t公式解説",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854227,
      "updated": 1609854251
    },
    {
      "id": "5ff46d2baff09e0000b9a3a1",
      "text": "\t　解法1",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854251,
      "updated": 1609854269
    },
    {
      "id": "5ff46d3caff09e0000b9a3a2",
      "text": "\t　 [クエリの先読み]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854269,
      "updated": 1609854278
    },
    {
      "id": "5ff46d78aff09e0000b9a3a3",
      "text": "\t　 年齢でソート",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854333,
      "updated": 1609854376
    },
    {
      "id": "5ff46da9aff09e0000b9a3a6",
      "text": "\t　 　[二次元の片方を時間軸にする]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854377,
      "updated": 1609854385
    },
    {
      "id": "5ff46da7aff09e0000b9a3a5",
      "text": "\t　 道が通れるかどうかは高々2回しか変化しない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854376,
      "updated": 1609854376
    },
    {
      "id": "5ff46d9daff09e0000b9a3a4",
      "text": "　　　　僕の考察と同じ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854366,
      "updated": 1609854392
    },
    {
      "id": "5ff46db8aff09e0000b9a3a7",
      "text": "　　　[std::setのlower_bound]で、対数オーダーでたどり着ける範囲がわかる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854392,
      "updated": 1609854475
    },
    {
      "id": "5ff482c6aff09e0000174a89",
      "text": "　　　　平衡二分木だから、ということだね",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609859783,
      "updated": 1609859810
    },
    {
      "id": "5ff46d2aaff09e0000b9a3a0",
      "text": "　　解法2",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854251,
      "updated": 1609854485
    },
    {
      "id": "5ff46e15aff09e0000b9a3a9",
      "text": "　  Lをmaxのセグメント木にする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854485,
      "updated": 1609854557
    },
    {
      "id": "5ff46e63aff09e0000b9a3aa",
      "text": "　  　Range maxを使った二分探索が対数オーダーになる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854564,
      "updated": 1609854631
    },
    {
      "id": "5ff46e7daff09e0000b9a3ab",
      "text": "　  　下限の制約に違反しない範囲が求まる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854589,
      "updated": 1609854632
    },
    {
      "id": "5ff46eaaaff09e0000b9a3ac",
      "text": "　  Rについても同様にする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854634,
      "updated": 1609854658
    },
    {
      "id": "5ff46ec1aff09e0000b9a3ad",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854658,
      "updated": 1609854740
    },
    {
      "id": "5ff46e10aff09e0000b9a3a8",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1609854480,
      "updated": 1609854480
    }
  ]
}