{
  "id": "6406fb5624e96b001b2d51fb",
  "title": "従来の質問生成アルゴリズムと統合したのでテストする",
  "created": 1678179158,
  "updated": 1678179404,
  "lines": [
    {
      "id": "6406fb5624e96b001b2d51fb",
      "text": "従来の質問生成アルゴリズムと統合したのでテストする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179158,
      "updated": 1678179158
    },
    {
      "id": "6406fb91aff09e000015257a",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179218,
      "updated": 1678179218
    },
    {
      "id": "6406fbedaff09e000015257d",
      "text": "[*** 要約 by AI, modified by Human]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179310,
      "updated": 1678179319
    },
    {
      "id": "6406fbeeaff09e000015257e",
      "text": " LangChainはMax marginal relevanceの口がついている",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179310,
      "updated": 1678179323
    },
    {
      "id": "6406fbfbaff09e0000152589",
      "text": " \tが、抽象クラスを継承しているやつが実装されていない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179323,
      "updated": 1678179323
    },
    {
      "id": "6406fbeeaff09e000015257f",
      "text": " LlamaIndexはテキストのリストを渡すことで、それに対して埋め込みベクトルを対応づけることができる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179310,
      "updated": 1678179310
    },
    {
      "id": "6406fbeeaff09e0000152580",
      "text": " \tクエリーを発行すると、関連するドキュメントをベクトルに基づいてピックアップする。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179310,
      "updated": 1678179334
    },
    {
      "id": "6406fc4caff09e0000152591",
      "text": "  LlamaIndexのテキストに対してのベクトル化はローカルのJSONに格納されている。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179404,
      "updated": 1678179404
    },
    {
      "id": "6406fbeeaff09e0000152581",
      "text": " LlamaIndexはOpenAIの埋め込みAPIを使用している。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179310,
      "updated": 1678179338
    },
    {
      "id": "6406fc2baff09e000015258e",
      "text": "  埋め込みAPIが、どう実装されてるか、どこかのレイヤーから抜き出されるのかは分からない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179371,
      "updated": 1678179394
    },
    {
      "id": "6406fbeeaff09e0000152582",
      "text": " LangChainは動かないというトラブルがあるため、LlamaIndexを使用する。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179310,
      "updated": 1678179310
    },
    {
      "id": "6406fc14aff09e000015258c",
      "text": " \tFAISSに謎のトラブルがあるため、現在はLlamaIndexを使用する。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179348,
      "updated": 1678179349
    },
    {
      "id": "6406fbeeaff09e0000152583",
      "text": " まだLlamaIndexの実装を確認していない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179310,
      "updated": 1678179310
    },
    {
      "id": "6406fbeeaff09e0000152587",
      "text": " 次のステップはLlamaIndexの実装を確認して、コードを読み理解することです。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179310,
      "updated": 1678179310
    },
    {
      "id": "6406fbeeaff09e0000152588",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179310,
      "updated": 1678179310
    },
    {
      "id": "6406fbc8aff09e000015257c",
      "text": "[*** 要約 by AI]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179272,
      "updated": 1678179282
    },
    {
      "id": "6406fbbaaff09e00007ff9af",
      "text": " LangChainはMax marginal relevanceの口がついているが、抽象クラスを継承しているやつが実装されていない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179259,
      "updated": 1678179262
    },
    {
      "id": "6406fbbeaff09e00007ff9b0",
      "text": " LlamaIndexはテキストのリストを渡すことで、それに対して埋め込みベクトルを対応づけることができる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179262,
      "updated": 1678179267
    },
    {
      "id": "6406fbbeaff09e00007ff9b1",
      "text": " クエリーを発行すると、関連するドキュメントをベクトルに基づいてピックアップする。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179262,
      "updated": 1678179267
    },
    {
      "id": "6406fbbeaff09e00007ff9b2",
      "text": " LlamaIndexはOpenAIの埋め込みAPIを使用している。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179262,
      "updated": 1678179268
    },
    {
      "id": "6406fbbeaff09e00007ff9b3",
      "text": " LangChainは動かないというトラブルがあるため、LlamaIndexを使用する。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179262,
      "updated": 1678179268
    },
    {
      "id": "6406fbbeaff09e00007ff9b4",
      "text": " まだLlamaIndexの実装を確認していない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179262,
      "updated": 1678179269
    },
    {
      "id": "6406fbbeaff09e00007ff9b5",
      "text": " FAISSに謎のトラブルがあるため、現在はLlamaIndexを使用する。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179262,
      "updated": 1678179269
    },
    {
      "id": "6406fbbeaff09e00007ff9b6",
      "text": " LangChainが学習されたとき、どこかのレイヤーから抜き出されるかは分からない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179262,
      "updated": 1678179269
    },
    {
      "id": "6406fbbeaff09e00007ff9b7",
      "text": " LlamaIndexのテキストに対してのベクトル化はローカルのJSONに格納されている。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179262,
      "updated": 1678179270
    },
    {
      "id": "6406fbbeaff09e00007ff9b8",
      "text": " 次のステップはLlamaIndexの実装を確認して、コードを読み理解することです。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179262,
      "updated": 1678179270
    },
    {
      "id": "6406fb91aff09e000015257b",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179218,
      "updated": 1678179218
    },
    {
      "id": "6406fb56aff09e00001e26a9",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179158,
      "updated": 1678179158
    },
    {
      "id": "6406fb56aff09e00001e26aa",
      "text": "[/nishio/kei.icon]あなたはこの会話で何がどうなるとよいのでしょう？(GPT)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179158,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26af",
      "text": "[/nishio/human.icon]従来の質問生成アルゴリズムと統合したのでテストする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26b0",
      "text": "[/nishio/kei.icon]ありがとうございます。新しいアルゴリズムのテストに成功することを願っています。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26b1",
      "text": "[/nishio/human.icon]次にする作業を決めるために色々話します",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26b2",
      "text": "[/nishio/kei.icon]具体的にどんな話をしたいですか？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26b3",
      "text": "[/nishio/human.icon]LlamaIndexとLangChainの実装を読んだんだけど、LangChainでFAISSを使った場合に謎のトラブルに巻き込まれてる先達がいるから、当面は今のLlamaIndexでの実装で進めようかなと思っている",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26b4",
      "text": "[/nishio/kei.icon]「LlamaIndex」の実装について教えてください。具体的にどのような実装をしたのでしょうか？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26b5",
      "text": "[/nishio/human.icon]そっちの実装はまだあまり読んでない。特に問題なく動いて、ローカルのJSONにベクトルインデックスが置かれてるから、ライブラリが提供してない機能による実験も楽だろうなという感じ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26b6",
      "text": "[/nishio/kei.icon]「LlamaIndex」のローカルのJSONにベクトルインデックスが置かれた実装ですね。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26b7",
      "text": "[/nishio/human.icon]そう。LangChainの方はMax marginal relevanceの口がついてるのは期待が持てるけど抽象クラスを継承した先でそのメソッドが実装されてないやつがゴロゴロある感じなので、結局具体的なクラスを見なければどれならできるのかわからない状況。FAISSならできそうね",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26b8",
      "text": "[/nishio/kei.icon]「LangChain」の抽象クラスを継承したクラスがMax marginal relevanceのメソッドを実装していない状況なので、具体的にどのクラスがMax marginal relevanceを実装しているのか把握しにくいですが、FAISSを使えばできる可能性がある、ということですか？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26b9",
      "text": "[/nishio/human.icon]そう。だけどもFAISSを使って動かなくて悩んでる人がいるから同じ道を進むのはやめとこうということ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26ba",
      "text": "[/nishio/kei.icon]「LangChain」のMax marginal relevanceの実装がFAISSを使うことで問題が解決する可能性があるということでしたが、具体的にどのような問題があったのでしょうか？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26bb",
      "text": "[/nishio/human.icon]Herokuにデプロイしたらバージョン揃えてるはずなのに動かなくなったということらしくて、関数の引数不一致で死んでたので、たぶん揃えたつもりで揃ってないんだろうなぁ、と思ってる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26bc",
      "text": "[/nishio/kei.icon]「LangChain」について、現在どのような問題があるのでしょうか？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26bd",
      "text": "[/nishio/human.icon]LangChainに限った話ではないけど日々更新されてるライブラリの上にプログラムを作るのは凍ってない湖の上を歩くようなもの。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26be",
      "text": "[/nishio/kei.icon]プログラムを作るのに難しさを感じているようですね。作業が上手く進まない理由は何だと思いますか？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26bf",
      "text": "[/nishio/human.icon]地に足のついた理解をしてない人でも手軽に何かができるように分厚い抽象化レイヤーのクッションが引かれていると、座り心地はいいけど歩こうとするとこけるのである。チュートリアルに書いてあることをそのまま入力して動かして満足な人にはそれでいいんだけど、動き回りたい人には向かない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26c0",
      "text": "[/nishio/kei.icon]「LangChain」は、どこで使っているライブラリの一部なのでしょうか？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26c1",
      "text": "[/nishio/human.icon]その話は置いといて、LlamaIndexについて質問して。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26c2",
      "text": "[/nishio/kei.icon]LlamaIndexに関する質問をするということでしたが、LlamaIndexについて詳細に説明してもらえますか？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26c3",
      "text": "[/nishio/human.icon]テキストの断片に対してベクトルを対応づけて、クエリーに対して適当なテキストを選択し、それをChatGPTに対するプロンプトに積み込むことで、ChatGPTが外部の資料を参照できるようにする方法",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26c4",
      "text": "[/nishio/kei.icon]あなたは「LangChain」をどのように知ったのですか？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26c5",
      "text": "[/nishio/human.icon]👎LangChain",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26c6",
      "text": "[/nishio/kei.icon]「LlamaIndex」の機能について詳しく教えてください。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26c7",
      "text": "[/nishio/human.icon]テキストのリストを渡すとそれに対して埋め込みベクトルを対応づけたVectorStoreができる。これはOpenAIの埋め込みAPIを叩いてるだけだと思う。クエリを発行すると、関連のあるドキュメントをベクトルに基づいてピックアップする。これは内積類似度だと思ってるけど確認してない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26c8",
      "text": "[/nishio/kei.icon]「LlamaIndex」の「ベクトル」について詳しく教えてください。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26c9",
      "text": "[/nishio/human.icon]テキストをその意味を反映した1000次元ちょいのベクトルに対応づける技術がある。それによって作られたベクトルのこと。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26ca",
      "text": "[/nishio/kei.icon]「LlamaIndex」の埋め込みベクトルは、どのように作られるのですか？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26cb",
      "text": "[/nishio/human.icon]OpenAIのAPIでつくる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26cc",
      "text": "[/nishio/kei.icon]「OpenAI」のAPIで作られる埋め込みベクトルについて、APIはどのように機能しているのでしょうか？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26cd",
      "text": "[/nishio/human.icon]Transformerが学習された上でどこかのレイヤーから抜き出されるのかな？知らない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26ce",
      "text": "[/nishio/kei.icon]「LlamaIndex」のベクトルは、どこに格納されていますか？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26cf",
      "text": "[/nishio/human.icon]ローカルのJSONに格納されてる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb63aff09e00001e26d0",
      "text": "[/nishio/kei.icon]「LlamaIndex」のローカルのJSONに格納されているものは、どのようなデータですか？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179171,
      "updated": 1678179171
    },
    {
      "id": "6406fb56aff09e00001e26ab",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179158,
      "updated": 1678179158
    },
    {
      "id": "6406fb56aff09e00001e26ac",
      "text": "https://keicho.netlify.app/#talk=TqbPiBoeyzjYM4zuQsu8",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179158,
      "updated": 1678179158
    },
    {
      "id": "6406fb56aff09e00001e26ad",
      "text": "#KeichobotLog",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179158,
      "updated": 1678179158
    },
    {
      "id": "6406fb56aff09e00001e26ae",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1678179158,
      "updated": 1678179158
    }
  ]
}