{
  "id": "6090ec07a287e6002291a16c",
  "title": "Hatena2011-04-14",
  "created": 1302706800,
  "updated": 1302706800,
  "lines": [
    {
      "id": "6090ec2baff09e00003d8a82",
      "text": "Hatena2011-04-14",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a83",
      "text": "code:hatena",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a84",
      "text": " <body>",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a85",
      "text": " *1302765428*TeXの識別子で悩む",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a86",
      "text": " TeXってアルファベットと数値との間でトークンが分かれるんだけど(知らない人の為に書いておくか)",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a87",
      "text": " >||",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a88",
      "text": " \\newcommand{\\foo}{FOO} [\\foo][\\foo21]   %-> [FOO][FOO21]",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a89",
      "text": " \\newcommand{\\baz42}{BAZ} [\\baz][\\baz42] %-> 42BAZ [][42]",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a8a",
      "text": " ||<",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a8b",
      "text": " ",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a8c",
      "text": " この挙動に忠実にパーサを作るべきかどうか悩ましい。昨日書いたパーサは忠実なんだけど、識別子に数字を使ってはいけないとかモダンな言語では考えにくいのでつまずきどころだよね。",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a8d",
      "text": " ",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a8e",
      "text": " ローカルの名前として\\Sを作ったときに\\Sigmaにマッチしてしまうのは困るな、ってことでトークンに刻もうと思っていたんだけど、defineの左辺に複数トークン来れるようにすると同じ問題が起きてしまうし、これないようにすると\\S1みたいな名前は使えなくなるんだ。うーん。",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a8f",
      "text": " ",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a90",
      "text": " *1302766410*置換に関して",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a91",
      "text": " 昨日書いたのを再掲",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a92",
      "text": " - 今、根元のスコープから順に置換していってるけど、これは適切なの？",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a93",
      "text": " -- →置換したものがさらに置換されるケースを考えて、一番近くにあるルールが一番最後に適用されるのが正しいと考えてこの設計にしたが…",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a94",
      "text": " --- A: そもそも置換したものをさらに置換するとかすると理解が難しくなるからやめようよ案。変数の解決だって内側から見ていって見つかったらそこで終了じゃないか。(名前の解決だよ派)",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a95",
      "text": " --- B: ユースケース「外側で\\x→\\bm xが定義されていて、内側でphix→\\bm \\phi(\\x)を定義する」を考えると、内側から順に適用するべきだ案。さもないと外側で定義したルールを再利用したルールを作る際に\\bm xをもう一度書く必要が出てきてしまう(関数の適用なんだから近い側から順次適用が必要だよ派)",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a96",
      "text": " --- !B: それはルール定義のタイミングでルールの本体にその時点で定義されているルールを適用すればいいんだよ派",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a97",
      "text": " --- C: (当初の案) ユースケース「外側でEx→\\mathbb{E}(x)を定義して、内側の文脈でxが\\hat{x}に変わったらx→\\hat{x}で『継承＆オーバーライド』したい」を考えて外側から…",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a98",
      "text": " --- !C: それは引数を取るマクロで解決すべき問題。",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a99",
      "text": " -- Bが正解なのかなぁ",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a9a",
      "text": " ",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a9b",
      "text": " で、一晩寝て思ったのは、B案への反論として用意した!Bが正しいのではないかと。",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a9c",
      "text": " ",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a9d",
      "text": " 変数の宣言のいらないスクリプト言語において、",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a9e",
      "text": " >||",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8a9f",
      "text": " print (f(x[1]) + f(x[2])) * (f(x[1]) + f(x[2]))",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8aa0",
      "text": " ||<",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8aa1",
      "text": " って書くよりも一時的なローカル変数を導入して",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8aa2",
      "text": " >||",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8aa3",
      "text": " t = f(x[1]) + f(x[2])",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8aa4",
      "text": " print t * t",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8aa5",
      "text": " ||<",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8aa6",
      "text": " って書いてあったほうがわかりやすいよね。だったらTeXでもその方がわかりやすいんじゃないか？「短い名前」を「コード上の限定された範囲」で使いたい。それはつまりレキシカルスコープの導入だよね。",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8aa7",
      "text": " ",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8aa8",
      "text": " っていうことはこれはPythonで言うところの代入文なわけだ。代入文なら右辺が代入文の時点での環境を用いて評価されるのはあたりまえだよね。というわけで!Bが肯定される。",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8aa9",
      "text": " ",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8aaa",
      "text": " さらに、代入の時点で右辺の名前が評価されるんであれば、実用上「置換したものをさらに置換する」は必要ないんだよね。define \\x \\a\\b した際に\\aや\\bが定義されているなら、それが置換された上で\\xの定義になるので、\\xを置換した際にさらに置換を繰り返す必要がない。挙動が変わるのは\\xを定義してから\\aを定義する場合だが、それを実用的な目的で使うことは考えなくていい。引数のあるマクロを導入するほうが素直だから。",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8aab",
      "text": " ",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8aac",
      "text": " 定義した名前を定義したスコープの外に輸出することが必要かどうかは判断出来ていない。それが必要なら、マクロに自分が定義されたときの環境を関連付ける必要があるだろうな。クロージャみたいに。",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8aad",
      "text": " ",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8aae",
      "text": " *1302792834*TeX用プリプロセッサをgithubに置いた",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8aaf",
      "text": " 僕のゴーストは「互換性を無視して識別子に数値を含められるようにしろ」ってささやくけど、いまいち確信は持てないなー。そういうのはブランチを切って開発すればいいんだよな。というわけでgithubに置いた https://github.com/nishio/pp4tex/tree/alnum_tokens",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8ab0",
      "text": " ",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8ab1",
      "text": " >||",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8ab2",
      "text": " % define S X",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8ab3",
      "text": " \\[ SN \\]",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8ab4",
      "text": " % define SN S_N",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8ab5",
      "text": " \\[ SN \\]",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8ab6",
      "text": " ||<",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8ab7",
      "text": " これで",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8ab8",
      "text": " <img src=\"http://gyazo.com/ffcbbe4e841e5c1b7e41b954a18602a8.png\">",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8ab9",
      "text": " こうなる。最初のはSNがSと完全マッチじゃないから置換されず、SNの定義の時点でSはXだと定義されているからSNがX_Nになる。",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8aba",
      "text": " ",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8abb",
      "text": " >||",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8abc",
      "text": " % define S^ \\hat{S}",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8abd",
      "text": " ||<",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8abe",
      "text": " ",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8abf",
      "text": " これは、左辺が複数トークンから構成されている。こういうのは、できたほうが自由度は高いだろうけど、逆にS^のSの部分が置換されてしまわないためのシステムを導入する必要が出てきて複雑になるし、そもそもこれは名前への代入だと考えるなら左辺が識別子でないのはNGだからエラーでいいんじゃないか。そういうわけで「RuntimeError: line 15: key 'S^' should have only one token but has ['S', '^']」ってことにした。",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8ac0",
      "text": " ",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8ac1",
      "text": " ",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8ac2",
      "text": " あとは引数を取るマクロを作りたい。引数を取るマクロが出来たら今度は複数行のマクロが作りたい。そこら辺を作ると名前まわりで今予想できてない別のトラブルが発覚するかもしれない。",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8ac3",
      "text": " </body>",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8ac4",
      "text": "",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    },
    {
      "id": "6090ec2baff09e00003d8ac5",
      "text": "[はてなダイアリー 2011-04-14 https://nishiohirokazu.hatenadiary.org/archive/2011/04/14]",
      "created": 1302706800,
      "updated": 1302706800,
      "userId": "582e63d27c56960011aff09e"
    }
  ]
}