{
  "id": "5f9969bd4973a0001efe4438",
  "title": "PAST1K",
  "created": 1603889599,
  "updated": 1608633480,
  "lines": [
    {
      "id": "5f9969bd4973a0001efe4438",
      "text": "PAST1K",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1603889599
    },
    {
      "id": "5f9969e8aff09e000060c91b",
      "text": "[K - 巨大企業 https://atcoder.jp/contests/past201912-open/tasks/past201912_k]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889640,
      "updated": 1603889648
    },
    {
      "id": "5f9969beaff09e00000d8ccb",
      "text": "\t[https://gyazo.com/735b48c1d33a9397fd177016e9fd6b8a]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1603889640
    },
    {
      "id": "5fe1a7eaaff09e0000aaa5d7",
      "text": " 考えたこと",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608624106,
      "updated": 1608624119
    },
    {
      "id": "5f9969f6aff09e000060c91c",
      "text": " \t巨大な木が与えられてaがbの子孫かを判定する問題",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889655,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8ccc",
      "text": "  素朴にやるとO(NQ)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8ccd",
      "text": "  　バランスした木なら対数オーダーだから問題ないのだが、すごく偏ってる時に問題",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8cce",
      "text": "  計算結果をキャッシュしたいが、素朴にキャッシュすると空間がN^2になるのでダメ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8ccf",
      "text": "  枝分かれのないパスをキャッシュ？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8cd0",
      "text": "  　ダメ、二股の分岐がN/2個続くグラフがある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8cd1",
      "text": "  　思考の分岐A",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8cd2",
      "text": "  偏ってるときだけキャッシュすれば良い？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8cd3",
      "text": "  　前処理で一定以上に深い点だけキャッシュ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8cd4",
      "text": "  　ダメ、N/2より深い頂点をN/2個作れる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8cd5",
      "text": " 　思考の分岐A",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8cd6",
      "text": " 　 キャッシュ済みの経路に後から合流したことの判定を低コストにできれば良い",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8cd7",
      "text": " 　 例えばある頂点から根までをたどる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8cd8",
      "text": " 　 この時、キャッシュ用の配列Aiにたどった頂点をインクリメントしながら記録",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8cd9",
      "text": " 　 別途キャッシュを見つけるための配列Bにキャッシュ番号iを書き込んでいく",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8cda",
      "text": " 　 2回目以降、親を辿る際にBを見れば定数オーダーで既にキャッシュされてるかどうかわかる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8cdb",
      "text": " 　 既にキャッシュされてるならそのキャッシュの目的頂点の番号を見て今の頂点の番号との大小関係を見れば祖先にいるかどうか反対できる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8cdc",
      "text": " 　 キャッシュに見つからなくて素朴に親をたどっていくプロセスは最大N回しか起こらない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8cdd",
      "text": " 　 キャッシュにヒットした後は定数オーダー",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f996f0eaff09e00007746fa",
      "text": " 　 追記: この方法は細かいキャッシュをたくさん作られるような入力の時に空間計算量が大きくなるからダメ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603890958,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8cde",
      "text": "  公式解説",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8cdf",
      "text": "  \t[最小共通祖先]lcaが対数オーダーで求められる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8ce0",
      "text": "  　　lca(x, y) = x ならyはxの子孫",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9acce4aff09e0000a67a7a",
      "text": "  　　ダブリングによる最小共通祖先の求めかたの一部で実現できる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603980517,
      "updated": 1608624119
    },
    {
      "id": "5f9acd3aaff09e0000a67a7c",
      "text": "  　　　まず各頂点の深さを求める、これは線形オーダー",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603980602,
      "updated": 1608624119
    },
    {
      "id": "5f9acd1faff09e0000a67a7b",
      "text": "  　　　2^k個先の親を求める、k一つにつき線形オーダーで、kの値は対数オーダー",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603980575,
      "updated": 1608624119
    },
    {
      "id": "5f9acd89aff09e0000a67a7d",
      "text": "  　　　与えられた2頂点のうち、深い方の親をたどって深さを揃える",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603980682,
      "updated": 1608624119
    },
    {
      "id": "5f9acdd2aff09e0000a67a7e",
      "text": "  　　　この後最小共通祖先を求めるためには二分探索が必要だが、今回は浅い方の頂点が最小共通祖先であるかどうかの判定だけで良い",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603980755,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8ce1",
      "text": "  \t別解",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8ce2",
      "text": "  \t　行きがけ順で頂点を並べる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8ce3",
      "text": "  \t　ある頂点の子孫の頂点は、その頂点を始点とする区間に含まれる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8ce4",
      "text": "  \t　行きがけ順での頂点の位置pos(x)と、区間終点の位置end(x)を配列で持っておけば pos(x) < pos(y) <= end(x) ならyはxの子孫",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8ce5",
      "text": "  \t　定数オーダー",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608624119
    },
    {
      "id": "5f9969beaff09e00000d8ce6",
      "text": "\tAC",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889599,
      "updated": 1608626322
    },
    {
      "id": "5fe1b0b7aff09e0000b04fb4",
      "text": "\t　0オリジンに変える",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626360,
      "updated": 1608626369
    },
    {
      "id": "5fe1b0c1aff09e0000b04fb5",
      "text": "\t　各頂点から親へのポインタが渡されているところを、親から子へのポインタに付け替える",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626369,
      "updated": 1608626401
    },
    {
      "id": "5fe1b0e1aff09e0000b04fb6",
      "text": "\t　各頂点の深さをDFSで求める",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626401,
      "updated": 1608626435
    },
    {
      "id": "5fe1b106aff09e0000b04fb8",
      "text": "\t　ダブリングで2^i個上の頂点を求める",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626439,
      "updated": 1608626460
    },
    {
      "id": "5fe1b0fcaff09e0000b04fb7",
      "text": "\t　各クエリに対して深さの差dを求め、aからdだけ上の頂点がbに一致するか判定する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626428,
      "updated": 1608626531
    },
    {
      "id": "5fe1b092aff09e0000aaa5d8",
      "text": "\t\tcode:python",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626323,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5da",
      "text": "   def solve(N, PS, Q, QS):",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5db",
      "text": "       # PAST1K",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5dc",
      "text": "   ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5dd",
      "text": "       # to 0-origin",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5de",
      "text": "       PS = [p - 1 for p in PS]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5df",
      "text": "       from collections import defaultdict",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5e0",
      "text": "       children = defaultdict(list)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5e1",
      "text": "       for i, p in enumerate(PS):",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5e2",
      "text": "           children[p].append(i)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5e3",
      "text": "   ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5e4",
      "text": "       # calc depth",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5e5",
      "text": "       depth = [0] * N",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5e6",
      "text": "   ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5e7",
      "text": "       def visit(v):",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5e8",
      "text": "           d = depth[v] + 1",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5e9",
      "text": "           for c in children[v]:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5ea",
      "text": "               depth[c] = d",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5eb",
      "text": "               visit(c)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5ec",
      "text": "   ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5ed",
      "text": "       root = children[-2][0]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5ee",
      "text": "       visit(root)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5ef",
      "text": "   ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5f0",
      "text": "       # doubling",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5f1",
      "text": "       parents = [PS]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5f2",
      "text": "       for _i in range(20):",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5f3",
      "text": "           prev = parents[-1]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5f4",
      "text": "           next = [0] * N",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5f5",
      "text": "           for i in range(N):",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5f6",
      "text": "               next[i] = prev[prev[i]]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5f7",
      "text": "           parents.append(next)",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5f8",
      "text": "   ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5f9",
      "text": "       for a, b in QS:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5fa",
      "text": "           a -= 1",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5fb",
      "text": "           b -= 1",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5fc",
      "text": "           d = depth[a] - depth[b]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5fd",
      "text": "           if d < 0:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5fe",
      "text": "               print(\"No\")",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa5ff",
      "text": "               continue",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa600",
      "text": "           # find d-th parent of a",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa601",
      "text": "           p = a",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa602",
      "text": "           for i in range(20):",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa603",
      "text": "               if d % 2:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa604",
      "text": "                   p = parents[i][p]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa605",
      "text": "               d //= 2",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa606",
      "text": "   ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa607",
      "text": "           if p == b:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa608",
      "text": "               print(\"Yes\")",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa609",
      "text": "           else:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa60a",
      "text": "               print(\"No\")",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626331
    },
    {
      "id": "5fe1b09baff09e0000aaa60b",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1608626331,
      "updated": 1608626333
    },
    {
      "id": "5f9969dfaff09e000060c919",
      "text": "[PAST1]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889632,
      "updated": 1603889633
    },
    {
      "id": "5f9969e0aff09e000060c91a",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1603889632,
      "updated": 1603889632
    }
  ]
}