{
  "id": "6131aea3d3418c001dc42b4c",
  "title": "ソースコードをScrapbox的に管理",
  "created": 1630645925,
  "updated": 1630645984,
  "lines": [
    {
      "id": "6131aea3d3418c001dc42b4c",
      "text": "ソースコードをScrapbox的に管理",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630645925,
      "updated": 1630645934
    },
    {
      "id": "6131aea4aff09e0000150428",
      "text": ">[nishio https://twitter.com/nishio/status/1433269313289347072]: KozanebaのソースコードをScrapbox的に管理してる気がしてきた。つまり従来はソースコードはディレクトリによって階層的に整理されていたが、Scrapboxの「リンクをたどる」に相当するVSCodeで「定義にジャンプ」と、Scrapboxの検索欄でのタイトルサジェストに相当するVSCodeの「ファイル名ジャンプ」とそしてそれでも見つからない時の全文検索とがあると、階層構造の重要性が下がる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630645925,
      "updated": 1630645946
    },
    {
      "id": "6131aea4aff09e000015042b",
      "text": ">VSCodeのリファクタリングメニューのMove to new fileは、ScrapboxのNew pageに相当する。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630645925,
      "updated": 1630645950
    },
    {
      "id": "6131aea4aff09e000015042c",
      "text": ">コードの中の再利用可能な部分や、文章の中の個別言及したい塊を別のページに切り出すコマンドだ。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630645925,
      "updated": 1630645951
    },
    {
      "id": "6131aea4aff09e000015042d",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630645925,
      "updated": 1630645925
    },
    {
      "id": "6131aea4aff09e000015042e",
      "text": ">[nishio https://twitter.com/nishio/status/1433271382788517888]: で、興味深いのは、Scrapboxは階層構造を全廃したのに対し、僕はソースコードのディレクトリ分けを今でも使ってるということ。階層からたどることがメインのたどりつきかただった時は階層をキチンとメンテする必要があり、人間がキチンとメンテできないから破綻しやすかった。しかしメインでないなら階層構造を雑にメンテしてても「たどりつくための選択肢が増えた」ということでありデメリットが少ない。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630645925,
      "updated": 1630645961
    },
    {
      "id": "6131aea4aff09e0000150431",
      "text": ">new pageでくくりだした時にデフォルトで元のページと同じディレクトリに生成される。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630645925,
      "updated": 1630645967
    },
    {
      "id": "6131aea4aff09e0000150432",
      "text": ">「緩やかに関係ありそうなものがまとまったグループ」になる。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630645925,
      "updated": 1630645969
    },
    {
      "id": "6131aea4aff09e0000150433",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630645925,
      "updated": 1630645925
    },
    {
      "id": "6131aea4aff09e0000150434",
      "text": ">[nishio https://twitter.com/nishio/status/1433272806117044224]: VSCodeは(少なくともTypeScript環境は)そうやってくくり出したファイルを事後的に別のディレクトリに移動した時に、インポート文を更新してくれるから「移動してもリンクが切れない」「だか気軽に移動できる」「だから最初にどこに作られるかはあまり気にしなくて良い」となる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630645925,
      "updated": 1630645925
    },
    {
      "id": "6131aea4aff09e0000150435",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630645925,
      "updated": 1630645925
    },
    {
      "id": "6131aea4aff09e0000150436",
      "text": ">[nishio https://twitter.com/nishio/status/1433273817883938819]: なのでWikiシステムに階層構造を入れても、実はよいのではないか。重要なのは「階層をたどる以外の見つけ方」がメインで使えるくらいサクサク動くことなのでは。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630645925,
      "updated": 1630645925
    },
    {
      "id": "6131aea4aff09e0000150437",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630645925,
      "updated": 1630645925
    },
    {
      "id": "6131aea4aff09e0000150438",
      "text": ">[nishio https://twitter.com/nishio/status/1433275088707604481]: 「FooからもBarからも、呼び出される関数quuxをどこに置くか」→どこにおいても定義ジャンプで飛ぶから問題ない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1630645925,
      "updated": 1630645984
    }
  ]
}